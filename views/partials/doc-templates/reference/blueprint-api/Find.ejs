<h1>レコードを検索する</h1>
<p>モデル上のレコードのリストをオブジェクトのJSON配列として返します。</p>
<pre><code>GET /:model</code></pre>
<p>結果に対してはリクエストとして送られたパラメータとblueprintの設定（のずれかまたは両方）によってフィルター、ページ分け、並び替えが行われます。</p>
<p>アクションがリクエストを通じて呼びされた場合、リクエストを行ったソケットは返された全てのレコードをサブスクライブします。レコードが付加的に編集、削除された場合その旨を伝えるメッセージがソケットのクライアントに送られます。詳しくは<a href="https://github.com/balderdashy/sails-docs/blob/master/reference/ModelMethods.md#subscriberequestrecordscontexts">Model.subscribe()のドキュメント</a>を御覧ください。</p>
<h3>パラメータ</h3>
<p><em> 全てのパラメータはオプショナルです。 </em></p>
<table>
<thead>
<tr>
<th>パラメータ</th>
<th>型</th>
<th style="text-align: left;">詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>((string))</td>
<td style="text-align: left;">モデルで定義されたものと同名の属性を指定することで属性に応じて結果をフィルターします。<br/> <br/> 例えば<code>Purchase</code>モデルが <strong>amount</strong> 属性を持っていた場合、<code>GET /purchase?amount=99.99</code> と送信することで$99.99の購入のリストが取得できます。</td>
</tr>
<tr>
<td>where</td>
<td>((string))</td>
<td style="text-align: left;">特定の属性でフィルタする代わりに<code>where</code>パラメータを <em>JSON文字列にエンコードされた</em> Waterline WHERE条件オブジェクトで与えることが出来ます。 これによって<code>contains</code>、<code>startsWith</code>などのサブ属性の強みを活かして更に強力な<code>find()</code>を実現することが出来ます。 <br/> <br/> 例: <code>?where={"name":{"contains":"theodore"}}</code></td>
</tr>
<tr>
<td>limit</td>
<td>((number))</td>
<td style="text-align: left;">返すレコード数の最大値(ページ分けに便利です)。デフォルトは30です。<br/> <br/> 例:<code>?limit=100</code></td>
</tr>
<tr>
<td>skip</td>
<td>((number))</td>
<td style="text-align: left;">スキップしたいページ数(ページ分けに便利です)。 <br/> <br/> 例: <code>?skip=30</code></td>
</tr>
<tr>
<td>sort</td>
<td>((string))</td>
<td style="text-align: left;">並べ替えをします。デフォルトでは返されたレコードは主キーの昇順で並べられます。<br/> <br/> 例:<code>?sort=lastName%20ASC</code></td>
</tr>
<tr>
<td>populate</td>
<td>((string))</td>
<td style="text-align: left;">指定されていればデフォルトの自動ポピュレーションプロセスを上書きします。ポピュレートしたいレコード値をコンマ区切りの属性名で受け付けます。返されたレコードのリストに対してモデルに設定されたアソシエーションに応じてどのように値を満たしていくのかに関して更に詳しくは<a href="http://sailsjs.jp/documentation/reference/waterline-orm/populated-values">こちら</a>をご覧ください。</td>
</tr>
<tr>
<td>callback</td>
<td>((string))</td>
<td style="text-align: left;">指定されていればJSONPレスポンスが（JSONの代わりに）送信されます。この名前のJavascript関数を、結果を一つ目の（そして唯一の）引数として実行します。<br/> <br/> 例:<code>?callback=myJSONPHandlerFn</code></td>
</tr>
</tbody>
</table>
<h3><code>find</code> の例</h3>
<p>データベースの中から最新30件の購入を検索する。</p>
<pre><code class="language-json">[
 {
   "amount": 49.99,
   "id": 1,
   "createdAt": "2013-10-18T01:22:56.000Z",
   "updatedAt": "2013-10-18T01:22:56.000Z"
 },
 {
   "amount": 99.99,
   "id": 47,
   "createdAt": "2013-10-14T01:22:00.000Z",
   "updatedAt": "2013-10-15T01:20:54.000Z"
 }
]</code></pre>
<p><strong><a href="http://jquery.com/">jQuery</a>を使う:</strong></p>
<pre><code class="language-javascript">$.get('/purchase?sort=createdAt DESC', function (purchases) {
  console.log(purchases);
});</code></pre>
<p><strong><a href="https://angularjs.org/">Angular</a>を使う:</strong></p>
<pre><code class="language-javascript">$http.get('/purchase?sort=createdAt DESC')
.then(function (res) {
  var purchases = res.data;
  console.log(purchases);
});</code></pre>
<p><strong><a href="http://sailsjs.jp/documentation/reference/websockets/sails.io.js">sails.io.js</a>を使う:</strong></p>
<pre><code class="language-javascript">io.socket.get('/purchase?sort=createdAt DESC', function (purchases) {
  console.log(purchases);
});</code></pre>
<p><strong><a href="http://en.wikipedia.org/wiki/CURL">cURL</a>を使う:</strong></p>
<pre><code class="language-bash">curl http://localhost:1337/purchase?sort=createdAt%20DESC</code></pre>
<h3>備考</h3>
<blockquote>
<ul>
<li>
<p>上記の例では&quot;rest&quot;blueprintが有効であると仮定します。それに加えてあなたのプロジェクトが<code>PurchaseController</code>と<code>Purchase</code>モデルを持っているべきです。これを簡単に行うには以下を実行します:</p>
<pre><code class="language-bash">$ sails new foo
$ cd foo
$ sails generate api purchase</code></pre>
</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="Find290807">
<docmeta name="displayName" value="find where">