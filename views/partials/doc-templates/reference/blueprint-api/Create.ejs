<h1>レコードを作成する</h1>
<p>データベースに新しいモデルを作成し、その値を返します。</p>
<pre><code>POST /:model</code></pre>
<p>属性はフォームエンコードされたHTTPボディまたはJSONで送ることが出来ます。</p>
<p>新規作成されたインスタンスを含むJSONオブジェクトともにレスポンスされます。バリデーションエラーが起きた場合は不正な属性が含まれたJSONとともに<code>400</code>ステータスを返します。</p>
<p>加えて、全てのソケットに対して<code>create</code>イベントが発行されます。(詳しくは<a href="https://github.com/balderdashy/sails-docs/blob/master/reference/websockets/resourceful-pubsub/watch.md">.watch()</a>のドキュメントを御覧ください。)</p>
<p>アクションがソケットのリクエストとしてトリガーされた場合、リクエストを送ったソケットは同様に新規作成されたモデルインスタンスを受け取ります。レコードが付加的に編集、削除された場合その旨を伝えるメッセージがソケットのクライアントに送られます。詳しくは.subscribe()のドキュメントを御覧ください。</p>
<h2>パラメータ</h2>
<table>
<thead>
<tr>
<th>パラメータ</th>
<th>型</th>
<th style="text-align: left;">詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>((string))<br/>((number))<br/>((object))<br/>((array))</td>
<td style="text-align: left;"><code>POST</code> (RESTful)リクエストに対しては新規作成されるレコードのそれぞれの値を定義するためには、ボディパラメータの中でモデルで定義されたものと同じ名前の属性を定義します。<code>GET</code> (shortcut)リクエストに関してはパラメータはクエリストリングに追加されます。<br/> <br/> パラメータとして渡された入れ子のオブジェクトや配列はモデルの<a>.create()</a>メソッドに渡された時と同じように動作します。</td>
</tr>
<tr>
<td>callback</td>
<td>((string))</td>
<td style="text-align: left;">指定されていればJSONPレスポンスが（JSONの代わりに）送信されます。この名前のJavascript関数を、結果を一つ目の（そして唯一の）引数として実行します。<br/> <br/> 例:<code>?callback=myJSONPHandlerFn</code></td>
</tr>
</tbody>
</table>
<h2>例</h2>
<h3>レコードを作成 (REST)</h3>
<p>&quot;pickin&quot;の趣味を持った&quot;AppleJack&quot;という名前のポニーを作成。</p>
<h4>ルート</h4>
<p><code>POST /pony</code></p>
<h4>JSONリクエストボディ</h4>
<pre><code class="language-json">{
  "name": "AppleJack",
  "hobby": "pickin"
}</code></pre>
<h4>レスポンスの例</h4>
<pre><code class="language-json">{
  "name": "AppleJack",
  "hobby": "pickin",
  "id": 47,
  "createdAt": "2013-10-18T01:23:56.000Z",
  "updatedAt": "2013-11-26T22:55:19.951Z"
}</code></pre>
<h3>レコードを作成(ショートカット)</h3>
<h4>ルート</h4>
<p><code>GET /pony/create?name=Fluttershy&amp;best_pony=yep</code></p>
<h4>期待されるレスポンス</h4>
<pre><code class="language-javascript">{
 "name": "Fluttershy",
 "best_pony": "yep",
 "createdAt": "2014-02-24T21:02:16.068Z",
 "updatedAt": "2014-02-24T21:02:16.068Z",
 "id": 5
}
</code></pre>
<h2>一方のアソシエーションを含む例</h2>
<p>モデル化のアソシエーションの作成は2つの方法で行えます。すでの存在するレコードへのアソシエーションを作ることが出来るほか、それぞれを同時に作ることができます。どのようにするのかは例をご覧ください。</p>
<p>これらの例では<code>Pet</code>と<code>Pony</code>APIが手動または<a href="http://sailsjs.jp/documentation/reference/CommandLine/CommandLine.html">Sails CLI Tool</a>で作られていると仮定します。<code>Pony</code> モデルには<code>Pet</code>モデルを指す<code>pet</code>属性が設定されている必要があります。これをどうするのかに関しての詳しい話は<a href="./ModelAssociations.md">Model Association Docs</a>をご覧ください。</p>
<h3>既存のレコードと関連付けられたレコードを作成する(REST)</h3>
<p>既存の&quot;Gummy&quot;と名付けられた<code>id</code>10のペットと関連付けられた、&quot;Pinkie Pie&quot;という名前のポニーを追加する。</p>
<h4>ルート</h4>
<p><code>POST /pony</code></p>
<h4>JSONリクエストボディ</h4>
<pre><code class="language-json">{
  "name": "Pinkie Pie",
  "hobby": "ice skating",
  "pet": 10
}</code></pre>
<h4>Responseの例</h4>
<pre><code class="language-json">{
  "name": "Pinkie Pie",
  "hobby": "ice skating",
  "pet": {
    "name": "Gummy",
    "species": "crocodile",
    "id": 10
  },
  "id": 4,
  "createdAt": "2013-10-18T01:22:56.000Z",
  "updatedAt": "2013-11-26T22:54:19.951Z"
}</code></pre>
<h3>新規レコードと関連付けられた新規レコードを作成する。</h3>
<p>新しい&quot;Gummy&quot;と名付けられた`ペットと関連付けられた、&quot;Pinkie Pie&quot;という名前と&quot;ice skating&quot;の趣味を持つポニーを追加する。</p>
<h4>ルート</h4>
<p><code>POST /pony</code></p>
<h4>JSONリクエストボティ</h4>
<pre><code class="language-json">{
  "name": "Pinkie Pie",
  "hobby": "ice skating",
  "pet": {
    "name": "Gummy",
    "species": "crocodile"
  }
}</code></pre>
<h4>期待されるレスポンス</h4>
<pre><code class="language-json">{
  "name": "Pinkie Pie",
  "hobby": "ice skating",
  "pet": {
    "name": "Gummy",
    "species": "crocodile",
    "id": 10
  },
  "id": 4,
  "createdAt": "2013-10-18T01:22:56.000Z",
  "updatedAt": "2013-11-26T22:54:19.951Z"
}</code></pre>
<docmeta name="uniqueID" value="CreateARecord744986">
<docmeta name="displayName" value="create">