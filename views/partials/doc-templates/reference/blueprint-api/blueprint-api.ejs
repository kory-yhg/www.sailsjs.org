<h1>Blueprint API</h1>
<h3>概要</h3>
<p>blueprintルートとblueprintアクションは一体となって<strong>blueprint API</strong>を構成し、このビルトインロジックはモデルとコントローラを作成する度にいつでも<a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful JSON API</a> を用意します。</p>
<p>例えば<code>User.js</code>モデルと<code>UserController.js</code>コントローラファイルをプロジェクト内に作った時、blueprintのおかげですぐに<code>/user/create?name=joe</code>にアクセスしユーザを作成し、<code>/user</code>アクセスしてユーザの配列を参照できるようになります。これらは全てコーディングなしで実現可能です。</p>
<p>Blueprintsはプロトタイピングに最適ですが、オーバーライトやプロテクション、拡張や無効化が出来るためプロダクション環境においてもとてもパワフルです。</p>
<h4>Blueprintルート</h4>
<p>Blueprintが有効な状態で<code>sails lift</code>を実行した時にフレームワークはコントローラとモデル、コンフィグを確認し、<a href="http://sailsjs.jp/documentation/concepts/Routes">特定のルート</a>を自動的にバインドします。これらの暗黙のblueprintルート(sadowsとも呼びます)は<code>config/routes.js</code>ファイルで手動で設定することなくアプリケーションが特定のルートに反応できるようにします。デフォルトではblueprintルートはblueprint<em>アクション</em>(下記の「Blueprintアクション」をご覧ください。)と一致しますが全てはカスタムのコードによって上書き可能です。</p>
<p>Sailsでは3種類のblueprintルートがあります:</p>
<ul>
<li><strong>RESTfulルート</strong>, パスは常に<code>/:modelIdentity</code>または<code>/:modelIdentity/:id</code>です。これらのルートはHTTPの「動詞」を使い、取るべきアクションを決めます。例えば、<code>/user</code>に対する<code>POST</code>リクエストはユーザを新規作成し、<code>/user/123</code> に対する<code>DELETE</code>リクエストは主キーが123のユーザを削除します。本番環境ではRESTfulルートは一般的には<a href="http://sailsjs.jp/documentation/concepts/Policies">policies</a>で保護して許可無いアクセスを防止しなければなりません。</li>
<li><strong>Shortcutルート</strong>, 取るべきアクションはパスにエンコードされています。例えば<code>/user/create?name=joe</code>ショートカットはユーザを新規作成し、<code>/user/update/1?name=mike</code>はユーザ１を更新します。これらのルートは<code>GET</code> リクエストのみに反応します。ショートカットルートを使うと非常に開発しやすいですが一般的に本番環境では無効化されるべきです。</li>
<li><strong>Actionルート</strong>, カスタムコントローラアクションに対して自動的に作成されるものです。例えば<code>FooController.js</code>ファイルに<code>bar</code>メソッドがあった場合、blueprintアクションルートが有効な限り<code>/foo/bar</code>ルートは自動的に作成されます。RESTfulとショートカットルートとは違い、アクションルートはコントローラファイルは対応するモデルを持つ必要は<em>ありません</em>。</li>
</ul>
<p>blueprintの設定オプションや異なるタイプのblueprintルートをどのように有効化、無効化するのかに関しては<a href="http://sailsjs.jp/documentation/reference/sails.config/sails.config.blueprints.html">コンフィグレーションリファレンスのblueprint部分</a>をご覧ください。</p>
<h4>Blueprintアクション</h4>
<p>Blueprintアクション（blueprintアクション<em>ルート</em>と混同しないように気をつけてください。）は同名のモデルを持つコントローラ(例:<code>ParrotController</code>は<code>Parrot</code>モデルを必要とします。)が使うことの出来る一般的なアクションです。これはいわばアプリ―ケーションのデフォルトの振る舞いです。例えば<code>User.js</code>モデル空の<code>UserController.js</code>コントローラがあった場合、<code>find</code>、<code>create</code>、<code>update</code>、<code>destroy</code>、<code>populate</code>、<code>add</code>、<code>remove</code>のアクションがコードを書くことなく暗示的に存在します。</p>
<p>デフォルトではblueprint RESTfulルートやshortcutルートはそれぞれの対応するblueprintアクションに転送されます。しかしながら、全ての全てのblueprintアクションはそのコントローラファイルにカスタムアクションを作成することによって(例:<code>ParrotController.find</code>)特定のコントローラによって上書きされることが出来ます。別の方法としては 自分のカスタムblueprintアクション(例:<code>api/blueprints/create.js</code>)を作成することで<em>アプリケーションの中のどこでも</em> blueprintアクションをオーバーライドすることが出来ます。</p>
<p>現在のバージョンのSailsは以下のblueprintアクションを提供します:</p>
<ul>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/Find.html">find</a></li>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/FindOne.html">findOne</a></li>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/Create.html">create</a></li>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/Update.html">update</a></li>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/Destroy.html">destroy</a></li>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/Populate.html">populate</a></li>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/Add.html">add</a></li>
<li><a href="http://sailsjs.jp/documentation/reference/blueprint-api/Remove.html">remove</a></li>
</ul>
<p>結果的に、ドキュメントの中のこのセクションでカバーするblueprint APIメソッドは上記のアクションに1対1対応します。</p>
<h3>Blueprintsをオーバーライドする</h3>
<p>(<a href="https://stackoverflow.com/questions/22273789/crud-blueprint-overriding-in-sailsjs">https://stackoverflow.com/questions/22273789/crud-blueprint-overriding-in-sailsjs</a> より)</p>
<p>Sails v0.10でblueprint をオーバライドするにはapi/blueprintsフォルダを作り、その中にblueprintファイル(例: find.js, create.jsなど)を作成します。手始めにデフォルトのアクションにあるコードを見て進めてください。</p>
<p><strong>備考:</strong> 現在全てのファイルは小文字である必要があります。(デフォルトのアクションはfindOne.jsを含みますが/api/blueprintsではこのファイルはfindone.jsである必要があります)</p>
<p>カスタムのblueprintを作成することも同様にサポートされていますが、現在自動的にルートの転送は行われません。もし/blueprints/foo.jsファイルを作った場合/config/routes.jsでルートのバインドを行う必要があります。（例えば）:</p>
<pre><code>GET /myRoute: {blueprint: 'foo'}</code></pre>
<h3>コントローラごとにblueprintを無効化する</h3>
<p>すべての設定は<code>config/blueprints.js</code>で コントローラの定義に'_config' キーを設定し、上書きしたい設定オブジェクトをアサインすることで、コントローラごとに上書きすることが出来ます。</p>
<pre><code class="language-javascript">module.exports = {
  _config: {
    actions: false,
    shortcuts: false,
    rest: false
  }
}
</code></pre>
<h3>備考</h3>
<blockquote>
<ul>
<li>以下のドキュメントはHTTPにフォーカスしていますがblueprint APIはリクエスト変換機能のおかげで（カスタムアクションやポリシーと同じように）WebSocketにも使うことが出来ます。使用例に関しては<a href="http://sailsjs.jp/documentation/reference/websockets/sails.io.js">browser SDK</a>のリファレンスセクションをご覧ください。</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="blueprintapi170785">
<docmeta name="displayName" value="Blueprint API">
<docmeta name="stabilityIndex" value="2">