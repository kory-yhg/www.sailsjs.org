<h1>.toJSON()</h1>
<h3>目的</h3>
<p>このメソッドはクローンされたモデルインスタンスを返します。しかし、これは全てのインスタンスメソッドを含みます。これに関して備考を読むようにして下さい。</p>
<h3>概要</h3>
<h4>返り値</h4>
<table>
<thead>
<tr>
<th>#</th>
<th>説明</th>
<th>想定されるデータ型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>クローンされたレコード</td>
<td><code>{}</code></td>
</tr>
</tbody>
</table>
<h3>使用例</h3>
<pre><code class="language-javascript">User.find().exec(
  function(err,myRecord){
    var datUser = myRecord.pop().toObject();
    console.log(datUser);
  });

/* { id: 2,
  createdAt: '2013-10-31T22:42:25.459Z',
  updatedAt: '2013-11-01T20:12:55.534Z',
  name: 'Hank',
  phoneNumber: '101-150-1337' } */

User.find().exec(
  function(err,myRecord){
    var datUser = myRecord.pop().toJSON();
    console.log(datUser);
  });

/* { id: 2,
  createdAt: '2013-10-31T22:42:25.459Z',
  updatedAt: '2013-11-01T20:12:55.534Z',
  name: 'Hank' } */

// Don't forget to handle your errors
</code></pre>
<p>モデルで</p>
<pre><code class="language-javascript">module.exports = {
  attributes: {
    name: 'string',
    phoneNumber: 'string',

    // Override the default toJSON method

    toJSON: function() {
      var obj = this.toObject();
      delete obj.phoneNumber;
      return obj;
    }
  }
}
</code></pre>
<h3>備考</h3>
<blockquote>
<p>toJSONの真価はres.jsonを通じて送り出される全てのモデルインスタンスがtoJSONを経由するということです。
特定のモデル(すぐに使えるblueprints含め)を扱う全てのコントローラアクションにカスタムのコードを書く代わりに単にデフォルトのtoJSONファンクションを上書きすることにより出て行くデータを操作できます。
メールアドレス等のプライベートな情報が全てのクライアントに送られないようにするためにこれを使うべきです。</p>
<p>これはインスタンスメソッドです。現在、インスタンスメソッドはトランザクション出来ません。そのため、同じ意味を持つモデルメソッドを使うことをおすすめします。  </p>
</blockquote>
<docmeta name="uniqueID" value="toJSON161307">
<docmeta name="methodType" value="instance">
<docmeta name="importance" value="undefined">
<docmeta name="displayName" value=".toJSON()">