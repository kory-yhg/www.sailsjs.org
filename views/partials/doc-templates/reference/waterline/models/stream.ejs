<h1>.stream( <code>criteria</code> )</h1>
<h3>目的</h3>
<p>このメソッドは<a href="http://nodejs.org/api/stream.html">node write stream</a>を使って、最初に全ての結果をメモリにバッファすることなくデータを取得できるようにモデルデータをパイプします。</p>
<h3>概要</h3>
<h4>パラメータ</h4>
<table>
<thead>
<tr>
<th>#</th>
<th>説明</th>
<th>受け入れられるデータ型</th>
<th>必須か</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>検索条件</td>
<td><code>{}</code>,<code>[{}]</code>, <code>string</code>, <code>int</code></td>
<td>はい</td>
</tr>
<tr>
<td>2</td>
<td>カスタムのWrite/Endメソッド</td>
<td><code>`{}</code></td>
<td>いいえ</td>
</tr>
</tbody>
</table>
<h4>コールバックパラメータ</h4>
<table>
<thead>
<tr>
<th>#</th>
<th>説明</th>
<th>想定されるデータ型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>エラー</td>
<td><code>Error</code></td>
</tr>
<tr>
<td>2</td>
<td>レコードのストリーム</td>
<td><code>stream</code></td>
</tr>
</tbody>
</table>
<h3>使用例</h3>
<p>UsersController.js</p>
<pre><code class="language-javascript">module.exports = {

  testStream: function(req, res){

    if (req.param('startStream') &amp;&amp; req.isSocket){

        var getSocket = req.socket;

        // Start the stream.  Pipe it to sockets.
        User.stream({name:'Walter'}).pipe(getSocket.emit);

    } else {

      res.view();

    }

  }
}</code></pre>
<p>views/users/testSocket.ejs</p>
<pre><code class="language-javascript">&lt;script type="text/javascript"&gt;
window.onload = function startListening(){
    socket.on('gotUser',function(data){
      console.log(data.name + ' number ' + data.id + ' has joined the party');
    });
};

&lt;/script&gt;
&lt;div class="addButton" onClick="socket.get('/users/testStream/', {startStream:true})"&gt;Stream all the Users!&lt;/div&gt;
</code></pre>
<h3>備考</h3>
<blockquote>
<p>このメソッドはとても大きなモデルからデータをそのままレスポンスにパイプするときに便利です。　また、別の場所にパイプすることも出来ます。詳しくはnode streamのドキュメントをお読み下さい。
mongo、mysql、posgresqlのアダプタのみがサポートされます。これはdiskアダプタだは動作しません。
全ての文字列引数はレコードのIDである必要があります。</p>
</blockquote>
<docmeta name="uniqueID" value="stream427721">
<docmeta name="methodType" value="mcm">
<docmeta name="importance" value="undefined">
<docmeta name="displayName" value=".stream()">