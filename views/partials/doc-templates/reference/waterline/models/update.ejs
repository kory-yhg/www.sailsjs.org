<h1>.update()</h1>
<h3>目的</h3>
<p>データベースにある、与えられた条件に合う既存レコードを更新します。</p>
<h3>概要</h3>
<h4>パラメータ</h4>
<table>
<thead>
<tr>
<th>#</th>
<th>説明</th>
<th>受け入れられるデータ型</th>
<th>必須か</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>検索条件</td>
<td><code>{}</code>,<code>[{}]</code>, <code>string</code>, <code>int</code></td>
<td>はい</td>
</tr>
<tr>
<td>2</td>
<td>更新するレコード</td>
<td><code>{}</code>,<code>[{}]</code></td>
<td>はい</td>
</tr>
<tr>
<td>3</td>
<td>コールバック</td>
<td><code>function</code></td>
<td>いいえ</td>
</tr>
</tbody>
</table>
<h4>コールバックパラメータ</h4>
<table>
<thead>
<tr>
<th>#</th>
<th>説明</th>
<th>想定されるデータ型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>エラー</td>
<td><code>Error</code></td>
</tr>
<tr>
<td>2</td>
<td>更新に成功したレコード</td>
<td><code>{}</code>, <code>[{}]</code></td>
</tr>
</tbody>
</table>
<h3>使用例</h3>
<pre><code class="language-javascript">User.update({name:'Walter Jr'},{name:'Flynn'}).exec(function afterwards(err, updated){

  if (err) {
    // handle error here- e.g. `res.serverError(err);`
    return;
  }

  console.log('Updated user to have name ' + updated[0].name);
});
</code></pre>
<h3>備考</h3>
<p><code>.update()</code>に<code>collection</code>のアソシエーションのために与えられた主キーの値の配列は主キーの値が与えられたレコード <strong>のみ</strong> が含むようなアソシエーションのコレクションを設定します。つまり、これはアソシエーションにおいて <strong>他のすべてをリンク解除する</strong> ということです。</p>
<blockquote>
<ul>
<li>.update()にはオブジェクトまたはオブジェクトの配列を渡せますが、返り値は常に配列です。</li>
<li>検索オブジェクトの代わりに(例:<code>7</code> や <code>"50c9b254b07e040200000028"</code>)主キーを指定した時、全ての<code>.where()</code>フィルタは無視されます。</li>
<li>現在、<code>.update()</code>で<code>.populate()</code>を呼び出すクエリは効果がありません。結果の属性をpopulateしたい時にはupdateのあとに<code>find().populate()</code>クエリを行わなければなりません。</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="update727440">
<docmeta name="methodType" value="mcm">
<docmeta name="importance" value="undefined">
<docmeta name="displayName" value=".update()">