<h1>クエリーを扱う</h1>
<p><code>.find()</code>や<code>.create()</code>と同じようにチェーン可能なdeferredオブジェクトがWaterlineから返されます</p>
<pre><code class="language-js">var query = Stuff.find();</code></pre>
<p>おそらく、すでにSailsアプリケーションでクエリオブジェクトを扱ったことがあると思います。多くの場合、そのオブジェクト <em>それ自体</em>　に関してはデータベースと通信するシンタックスの一部ということ以上に考えてこなかったと思います。</p>
<p>Waterlineクエリインスタンスの第一の目的はモデル操作に関して便利で、チェーン可能なシンタックスを提供することです。<code>.populate()</code>や<code>.where()</code>、<code>.sort()</code>のようなメソッドはデータベースの呼び出しをそれが送られる <em>前に</em> 洗練することが出来ます。クエリをデータベースに送信する準備ができた時には単に<a href="http://sailsjs.jp/documentation/reference/waterline/queries/exec.html"><code>.exec()</code></a>を呼び出すことが出来ます。</p>
<h3>Promises</h3>
<p><code>.exec()</code>メソッドに加え、Waterlineクエリーは<a href="https://github.com/petkaantonov/bluebird">Bluebird</a> promiseライブラリの部分的なサポートを実装しており、<code>.then()</code>と<code>.catch()</code>メソッドを露出しています。</p>
<pre><code class="language-js">Stuff.find()
.then(function (allTheStuff) {...})
.catch(function (err) {...});</code></pre>
<p>あなたがpromisesのファンであって、それに対しての十分な経験があればそのインタフェースを扱うのに問題はないと思います。しかしながらもしpromisesにそれほど慣れていない場合やそんなことを気にしないなどの場合、おそらくNodeのコールバックの慣習を採用した<code>.exec()</code>ほうが物事を簡単に進められます。</p>
<pre><code class="language-js">Stuff.find()
.exec(function (err, allTheStuff) {...})</code></pre>
<h3>クエリの実行</h3>
<p>クエリを <strong>実行</strong> すると、たくさんのことが起こります:</p>
<pre><code class="language-js">Zookeeper.find().exec(function (err, zookeepers){
  // would you look at all those zookeepers?
});</code></pre>
<p>まず、Waterlineのコアからノーマライズされた<a href="http://sailsjs.jp/documentation/concepts/ORM/Querylanguage.html?q=query-language-basics">criteria object</a>が送り出されます。それから、それから、使っているデータベース(例:Redis、Mongoや多種のSQLの方言など) に対応した生のクエリに変換されるために関連するWaterlineのアダプタに渡されます。最後にそれぞれの関連するアダプタがそのネイティブのNode.jsデータベースドライバが物理的なデータベースに対してネットワークを通じてクエリを発行します。</p>
<p>アダプタがレスポンスを受け取った時には、Waterlineインタフェースのスペックに誘導され、その他のアダプタからの生のレスポンスと統合して整合性ある結果セットに変換されるためにWaterlineのコアに送り返されます。この時点で、アプリケーションで利用されるコールバックに渡される直前の最後のノーマライゼーションが行われます。</p>
<h3>備考</h3>
<blockquote>
<ul>
<li>Waterlineのモデルメソッドは最後の引数にコールバックが直接渡されていた場合、クエリインスタンスを <strong>返しません</strong>。代わりに、クエリが完了した際にはそのコールバックがトリガーされます。</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="query820682">
<docmeta name="displayName" value="Queries">