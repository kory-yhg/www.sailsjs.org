<h1>req.file()</h1>
<p>特定の<code>field</code>のマルチパートアップロード入力(<a href="https://github.com/balderdashy/skipper/blob/master/lib/Upstream.js"><code>Upstream</code></a>)からの<a href="http://nodejs.org/api/stream.html#stream_class_stream_readable">読み込み可能なNodeストリーム</a> を返します。</p>
<h3>使い方</h3>
<pre><code class="language-js">req.file(field);</code></pre>
<h3>詳細</h3>
<p><code>req.file()</code>はオリジナルのConnectのbodyパーサーとは違う考え方でアプリケーションロジックに動的な変更を加えることなくストリーミングアップロードのハイパフォーマンスさを利用できる<a href="https://github.com/balderdashy/skipper">Skipper</a>から来ています。</p>
<p>これは非常な簡易化ですが、ちょっと注意しなければならいこともあります。: <strong>文字列のパラメータはリクエストボディー中のファイルより前になかればいけません</strong> 一般的にこれらのテキストパラメータはファイルアップロードに関する追加情報を提供するメタデータの文字列を含んでいます。</p>
<p>Sailsに対するマルチパートのリクエストは <em>いかなる</em> <strong>ファイルパラメータより前に</strong> 全ての　<strong>テキストパラメータ</strong> を送る必要があります。例えば、Sails通信するWebフロントエンドの作成している場合、いかなるファイルアップロードを行うフォームに関してもテキストのパラメータを <em>最初に</em> 含める必要があります。ここにおける「テキストパラメータ」とは、ファイルのアップロードに際して一緒に何かの情報を送るメタデータパラメータを指します。</p>
<h3>どのように動作するのか</h3>
<p>Skipperは <em>全ての</em> ファイルアップロードをストリームとして扱います。これによってユーザは大きなファイルアップロードをディスクのフットプリントに影響をあたえることがなくなるので、tmpファイル関連の醜いDOSアタックから守ることが出来ます。</p>
<p>マルチパートのリクエストがサーバに来た場合、一時ファイルに書き込むことなくSkipperはリクエストをアプリケーションコードが実行されるに十分な長さに渡りバッファーし、適切なBLOBレシーバをプラグインする機会を与えます。特定のフィールドに適切なデータフォームがプラグインされなかった場合、アップストリームは&quot;high water mark&quot;を呼び出し、バッファはクリアーされ、そのフィールドに対するその後の入力は無視されます。</p>
<h3>例</h3>
<p>コントローラアクションかポリシーで:</p>
<pre><code class="language-javascript">var SomeReceiver = require('../services/SomeReceiver');

req.file('avatar').upload( SomeReceiver(), function (err, files) {
    if (err) return res.serverError(err);
    return res.json({
      message: files.length + ' file(s) uploaded successfully!',
      files: files
    });
  });
});</code></pre>
<h3>備考</h3>
<blockquote>
<ul>
<li>クライアントのリクエストの <strong>テキストパラメータは先に送られなければならず</strong> 、その後ファイルパラメータを送るべきということを覚えておいて下さい。</li>
<li><code>req.file()</code>は同一のフィールドに対する複数のファイル送信をサポートしていますが、それはそれほど大事なことではありませんので、その結果Upstreamとして実際に返されるものはバイナリーストリーム（ファイル）の候補となるストリーム（バッファされたイベントエミッタ）です。</li>
<li>ストリームのストリームとしてのUpstreamを直接扱いたいときは<code>.upload()</code>メソッドを省いて代わりに&quot;finish&quot;か&quot;error&quot;のイベントをバインドして (あるいは<code>.pipe()</code>を使って) 下さい。 events (or use <code>.pipe()</code>) instead.</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="reqfile784692">
<docmeta name="displayName" value="req.file()">