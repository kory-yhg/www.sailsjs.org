<h1>req.socket</h1>
<p>現在のリクエスト(<code>req</code>)がSocket.ioクライアント経由で行われていた場合、<code>req.socket</code> はSocket.ioの生のインスタンスを参照します。</p>
<h3>使いかた</h3>
<pre><code class="language-js">req.socket;</code></pre>
<h3>詳細</h3>
<blockquote>
<p><strong>警告:</strong></p>
<p><code>req.socket</code>はSailsの将来のリリースで廃止されるかもしれません。代わりに<a href="http://sailsjs.jp/documentation/reference/Sockets"><code>sails.sockets.*</code></a>メソッドを使うべきです。</p>
</blockquote>
<p>現在のリクエスト(<code>req</code>)がSoket.ioクライアント経由ではない場合、<code>req.socket</code>は同様の意味を持ちません。最も一般的なシナリオではHTTPリクエスト<code>req.socket</code>は確かに <em>存在します</em> がその下にあるTCPソケットを指します。<code>req.socket</code>を使う前に<a href="http://sailsjs.jp/documentation/reference/req/req.isSocket.html"><code>req.isSocket</code></a>フラグを確認し、リクエストが確かにSocket.io経由であることを確かめるべきです。</p>
<p><code>req.socket.id</code>は現在のソケットを指すユニークな識別子です。これはクライアントが初めて接続した際にSocket.ioサーバが作成し、ソケットが切断されるまで（もしもクライアントがWebブラウザであればブラウザタブが閉じられるまで。）の間有効なユニーク識別子で在り続けます。</p>
<p>Sailsは同様に<code>req.socket</code>、<code>req.socket.join</code>、<code>req.socket.leave</code>、<code>req.socket.broadcast</code>その他全てのSocket.ioからのメソッドやプロパティに対するローレベルで直接的なアクセスを提供します。詳しくは<a href="https://github.com/Lear。いおnBoost/socket.io/wiki/Rooms">Socket.io wiki</a>の該当する箇所をご確認下さい。</p>
<h3>例</h3>
<pre><code class="language-js">if (req.isSocket) {
  // Low-level Socket.io methods and properties accessible on req.socket.
  // ...
}
else {
  // This is not a request from a Socket.io client, so req.socket
  // may or may not exist.  If this is an HTTP request, req.socket is actually
  // the underlying TCP socket.
  // ...
}</code></pre>
<docmeta name="uniqueID" value="reqsocket572002">
<docmeta name="displayName" value="req.socket">