<h1>req.options</h1>
<p><code>req.options</code>は下のオブジェクトを変更することなくリクエストパラメータを変更（あるいはデフォルトを設定）することが出来ます。</p>
<p><a href="http://sailsjs.jp/documentation/concepts/Routes/RouteTargetSyntax.html">カスタムのルート設定</a>て提供された全てのプロパティは<code>req.options</code>で利用可能です。例えば<a href="http://sailsjs.jp/documentation/reference/sails.config/sails.config.routes.html"><code>config/routes.js</code></a>での以下の例で:</p>
<pre><code class="language-js">"GET /foo": {controller: 'user', action: 'myAction', owl: 'hoot'}</code></pre>
<p><code>req.options.controller</code>、<code>req.options.action</code>と<code>req.options.owl</code> は利用可能です。</p>
<p>加えて、幾つかの特別な<code>req.options</code>オブジェクトは<a href="http://sailsjs.jp/documentation/reference/blueprint-api">blueprints</a>でblueprintがデータストアにアクセスする際に使う条件式や値をプログラム的に変更するために使うことが出来ます。これらは<a href="http://sailsjs.jp/documentation/concepts/Policies">policies</a>の中で、ログインユーザーに応じてリクエストされたレコードをフィルターするのにとてもよく利用できます。</p>
<h3>例</h3>
<p><code>config/policies/filterByUser.js</code> ポリシーの中で:</p>
<pre><code class="language-javascript">module.exports = function filterByUser (req, res, next) {

  if (req.session.user) {

    req.options.where = req.options.where || {};
    req.options.where.userId = req.session.user.id;

  }

  return next();

}</code></pre>
<docmeta name="displayName" value="req.options">