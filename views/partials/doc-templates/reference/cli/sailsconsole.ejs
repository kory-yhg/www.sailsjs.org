<h1>sails console</h1>
<p>Sailsアプリケーションを静かにliftし（すなわちログをサイレントにした状態で）<a href="http://nodejs.org/api/repl.html">node REPL</a>に入ります。これは全てのモデルやサービス、設定などにアクセスして利用できるということです。Waterlineを試したり、簡単にデータ管理をしたり、プロジェクトの実行時設定を確認するのに便利です。</p>
<h3>例</h3>
<pre><code class="language-sh">$ sails console

info: Starting app in interactive mode...

info: Welcome to the Sails console.
info: ( to exit, type &lt;CTRL&gt;+&lt;C&gt; )

sails&gt;</code></pre>
<blockquote>
<p><code>sails console</code>がサーバ上で起動されているため、ルートはHTTPとソケットを通じて（ブラウザなどから）を通じてアクセス可能ということを覚えておいてください。</p>
</blockquote>
<h3>sails console内のグローバル変数</h3>
<p>SailsはSailsアプリケーションに対してするように、いつくかの<a href="http://sailsjs.jp/documentation/reference/Globals">グローバル変数</a> をコンソールに露出しています。これは特にREPLで便利です。デフォルトでは<code>sails</code>アプリケーションインスタンスとモデル、サービスへのアクセスと、同様にLo-Dash (<code>sails.util._</code>)とasync (<code>async</code>)のアクセスも持ちます。</p>
<blockquote>
<p><strong>警告</strong></p>
<p>Be careful when using <code>_</code> as a variable name in the Node REPL- and when possible, don't.
(It doesn't work quite like you'd expect.)</p>
<p>Instead, use lodash as <code>sails.util._</code>, e.g.:</p>
<pre><code class="language-sh">sails&gt; sails.util._.keys(sails.config)</code></pre>
<p>Or alternatively, build yourself a local variable to use for familiarity:</p>
<pre><code class="language-sh">sails&gt; var lodash = _;</code></pre>
<p>Then you can do:</p>
<pre><code class="language-sh">sails&gt; lodash.keys(sails.config);</code></pre>
</blockquote>
<h3>さらなる例</h3>
<h4>Waterline</h4>
<p><code>Model.action(query).exec(console.log)</code>フォーマットのconsole.logは結果を見るのに最適です。</p>
<pre><code class="language-sh">sails&gt; User.create({name: 'Brian', password: 'sailsRules'}).exec(console.log)
undefined
sails&gt; null { name: 'Brian',
  password: 'sailsRules',
  createdAt: "2014-08-07T04:29:21.447Z",
  updatedAt: "2014-08-07T04:29:21.447Z",
  id: 1 }</code></pre>
<p>いいですね、これがデータベースに挿入されます。しかしながら、undefinedとnullにお気づきのことと思います。気にしないでください。.exec()は値に対するエラーとデータを返すということを思い出してください。そのため、<code>.exec(console.log)</code>を実行することは<code>.exec(console.log(err, data))</code>を実行することと同じです。2番めのメソッドはundefinedのメッセージを削除し、新しい行にnullを追加します。更に多くの方が必要であれば、ご自由に出来ます。</p>
<h4>Sailsをエクスポートする</h4>
<p>Sailsコンソールにおいて、<code>sails</code>とタイプすることで、Sailsのプロパティを見れます。これはSailsに関して更に学んだり、プロパティを上書きしたりグローバルを無効化しているかどうかを確認するのに使えます。</p>
<pre><code class="language-sh">sails&gt; sails
  |&gt;   [a lifted Sails app on port 1337]
\___/  For help, see: http://links.sailsjs.org/docs

Tip: Use `sails.config` to access your app's runtime configuration.

1 Models:
User

1 Controllers:
UserController

20 Hooks:
moduleloader,logger,request,orm,views,blueprints,responses,controllers,sockets,p
ubsub,policies,services,csrf,cors,i18n,userconfig,session,grunt,http,projecthooks

sails&gt;</code></pre>
<docmeta name="uniqueID" value="sailsconsole198558">
<docmeta name="displayName" value="sails console">