<h1>sails.sockets.blast()</h1>
<p>Broadcast a message to all sockets connected to the server.</p>
<pre><code class="language-javascript">sails.sockets.blast(data);</code></pre>
<p><em>Or:</em></p>
<ul>
<li><code>sails.sockets.blast(eventName, data);</code></li>
<li><code>sails.sockets.blast(data, socketToOmit);</code></li>
<li><code>sails.sockets.blast(eventName, data, socketToOmit);</code></li>
</ul>
<h3>Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th>Argument</th>
<th>Type</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>eventName</td>
<td>((string))</td>
<td>Optional. Defaults to <code>'message'</code>.</td>
</tr>
<tr>
<td>2</td>
<td>data</td>
<td>((*))</td>
<td>The data to send in the message.</td>
</tr>
<tr>
<td>3</td>
<td>socketToOmit</td>
<td>((Socket))</td>
<td>Optional. If provided, that request socket will <strong>not</strong> receive the message blasted out to everyone else.  Useful when the broadcast-worthy event is triggered by a requesting user who doesn't need to hear about it again.</td>
</tr>
</tbody>
</table>
<h3>Example</h3>
<p>In a controller action...</p>
<pre><code class="language-javascript">sails.sockets.blast('user_logged_in', {
  msg: 'User #' + req.session.userId + ' just logged in.',
  user: {
    id: req.session.userId,
    username: req.session.username
  }
}, req.socket);</code></pre>
<h3>Notes</h3>
<blockquote>
<ul>
<li>The phrase &quot;request socket&quot; here refers to an application-layer WebSocket/Socket.io connection.  <code>req.socket</code> also exists for HTTP requests, but it refers to the underlying TCP socket at the transport layer, which is different.  Be sure and ensure <code>req.isSocket == true</code> before using <code>req.socket</code> with this method.</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="sailssocketsblast345475">
<docmeta name="displayName" value="sails.sockets.blast()">