<h1>sails.sockets.blast()</h1>
<p>サーバに接続された全てのソケットにメッセージを送信します。</p>
<pre><code class="language-javascript">sails.sockets.blast(data);</code></pre>
<p><em>あるいは:</em></p>
<ul>
<li><code>sails.sockets.blast(eventName, data);</code></li>
<li><code>sails.sockets.blast(data, socketToOmit);</code></li>
<li><code>sails.sockets.blast(eventName, data, socketToOmit);</code></li>
</ul>
<h3>使い方</h3>
<table>
<thead>
<tr>
<th></th>
<th>引数</th>
<th>型</th>
<th>詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>eventName</td>
<td>((string))</td>
<td>オプション、デフォルトでは<code>'message'</code></td>
</tr>
<tr>
<td>2</td>
<td>data</td>
<td>((*))</td>
<td>メッセージとして送信されるデータ。</td>
</tr>
<tr>
<td>3</td>
<td>socketToOmit</td>
<td>((Socket))</td>
<td>オプション。存在する場合、リクエストメソッドは他からblastされたメッセージを受信 <strong>しません</strong>。ブロードキャストに値するデータが、それらを再び受信する必要のないユーザによってトリガーされた時に便利です。</td>
</tr>
</tbody>
</table>
<h3>使用例</h3>
<p>コントローラアクションで。。。</p>
<pre><code class="language-javascript">sails.sockets.blast('user_logged_in', {
  msg: 'User #' + req.session.userId + ' just logged in.',
  user: {
    id: req.session.userId,
    username: req.session.username
  }
}, req.socket);</code></pre>
<h3>備考</h3>
<blockquote>
<ul>
<li>ここでの&quot;request socket&quot;はアプリケーションレイヤーのWebSocket/Socket.ioコネクションを意味します。<code>req.socket</code>はHTTPリクエストにも存在しますが、これはその下のトランスポートレイヤーに存在するTCPソケットを表すものでこれとは違います。この方法で<code>req.socket</code>を使う前に<code>req.isSocket == true</code>であることを確認して下さい。</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="sailssocketsblast345475">
<docmeta name="displayName" value="sails.sockets.blast()">