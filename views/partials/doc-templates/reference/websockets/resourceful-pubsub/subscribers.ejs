<h1>.subscribers(<code>record</code>,[<code>contexts</code>])</h1>
<h3>Purpose</h3>
<p>Returns an array of sockets that are subscribed to <code>record</code>.  This can be used in conjunction with lower-level methods like <a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.emit.html"><code>sails.sockets.emit</code></a> to send custom messages to a collection of sockets, or with <a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/subscribe.html"><code>.subscribe</code></a> to subscribe one group of sockets to a new instance.</p>
<table>
<thead>
<tr>
<th></th>
<th>Description</th>
<th>Accepted Data Types</th>
<th>Required ?</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Record</td>
<td>((object)), ((integer)), ((string))</td>
<td>Yes</td>
</tr>
<tr>
<td>2</td>
<td>Contexts to subscribe to</td>
<td>((string)), ((array))</td>
<td>No</td>
</tr>
</tbody>
</table>
<p><em>Note</em>: <code>record</code> can be either an instance of a model, or a model&rsquo;s primary key.</p>
<h4><code>context</code></h4>
<p>If you specify a specific context (or array of contexts), you will only get sockets that are subscribed to the specified contexts for the record.</p>
<h3>Example Usage</h3>
<p>Controller Code</p>
<pre><code class="language-javascript">    // Find user #1
    User.findOne(1).exec(function(e,userOne){
        // Get all of the sockets that are subscribed to user #1
        var subscribers = User.subscribers(userOne);
        // Subscribe them all to userOne's best friend, too
        _.each(subscribers, function(subscriber) {
           User.subscribe(subscriber, userOne.bestFriendId);
        });
    });
</code></pre>
<docmeta name="methodType" value="pubsub">
<docmeta name="importance" value="undefined">
<docmeta name="displayName" value=".subscribers()">