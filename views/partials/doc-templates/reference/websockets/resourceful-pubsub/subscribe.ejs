<h1>.subscribe()</h1>
<p>リクエストしているソケットクライアントに一つまたは複数のデータベースレコード（すなわち、モデルインスタンス）をサブスクライブさせます。</p>
<h3>使い方</h3>
<pre><code class="language-js">SomeModel.subscribe(req, ids);</code></pre>
<p><em>-あるいは-</em></p>
<pre><code class="language-js">SomeModel.subscribe(req, ids, contexts);</code></pre>
<p>デフォルトでは（コンテキストが設定されていなければ）、クライアントは<code>.publishUpdate()</code>と<code>.publishDestroy()</code>、<code>.publishAdd()</code>、<code>.publishRemove()</code>で発信された全てのメッセージを受け取ります。</p>
<blockquote>
<p><strong>重要</strong>:</p>
<p>このファンクションは実際に<em>データベースとはやり取りしません</em>! 実際、リソースフルなPubSubのメソッドのうちどれもが行いません。これらは低レベルの<code>sails.sockets</code>の上に構築された簡易化された抽象化レイヤーであり、その目的はevents/rooms/namespacesを慣例的な名前で扱うことでアプリケーションを簡単でデバッグしやすくすることです。</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>引数</th>
<th style="text-align: center;">型</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>req</code></td>
<td style="text-align: center;">((req))</td>
<td>リクエストオブジェクト(<code>req</code>)です。このオブジェクトはアクションの中からのみ使えます。</td>
</tr>
<tr>
<td>2</td>
<td><code>ids</code></td>
<td style="text-align: center;">((array))</td>
<td>レコードのID（主キー）の配列</td>
</tr>
<tr>
<td>3</td>
<td><code>contexts</code></td>
<td style="text-align: center;">((array))</td>
<td>オプションの変更タイプ（コンテキスト）の配列です。存在すれば、サブスクライブしているクライアントは与えられているタイプの変更に関係するメッセージのみを受け取ります。（例：&quot;destroy&quot;コンテキストが指定されていればソケットは該当するレコードの <code>publishDestroy()</code>から発せられた通知のみを受け取ります。）一方、指定されていなければソケットはそのレコードに関連する全てのイベントを受け取ります。</td>
</tr>
</tbody>
</table>
<p><em>備考</em>:<code>subscribe</code>はsocket.ioでの接続 (例：<code>io.socket.get()</code>など)のみで有効であり、HTTPでの接続(例：<code>jQuery.get()</code>)では無効です。SailsでWebSocket/Socket.ioを使ってメッセージを送信するには<a href="http://sailsjs.jp/documentation/reference/web-sockets/socket-client">sails.io.jsソケットクライアントドキュメント</a>をご覧ください。 </p>
<h3>使用例</h3>
<pre><code class="language-javascript">  subscribeToLouies: function (req, res) {
    if (!req.isSocket) {
      return res.badRequest('Only a client socket can subscribe to Louies.  You, sir, appear to be something... _else_.');
    }

    // Let's say our client socket has a problem with people named "louie".

    // First we'll find all users named "louie" (or "louis" even-- we should be thorough)
    User.find({ or: [{name: 'louie'},{name: 'louis'}] }).exec(function(err, usersNamedLouie){
      if (err) {
        return res.negotiate(err);
      }

      // Now we'll use the ids we found to subscribe our client socket to each of these records'
      // "destroy" context.
      User.subscribe(req, _.pluck(usersNamedLouie, 'id'), ['destroy']);

      // Now any time a user named "louie" or "louis" is destroyed, our client socket will receive
      // a notification (as long as it stays connected anyways).

      // All done!  We could send down some data, but instead we send an empty response.
      // (although we're ok telling this vengeful client socket when our users get
      //  destroyed, it seems ill-advised to send him our Louies' sensitive user data.
      //  We don't want to help this guy to hunt them down irl.)
      return res.ok();
    });
  }</code></pre>
<h3>Blueprintsと.subscribe()</h3>
<p>デフォルトではblueprintの <code>find</code>と<code>findOne</code>のアクションは返ってきた全てのレコードをサブスクライブするよう<code>.subscribe()</code>をコールします。しかしながら、デフォルトでは<code>update</code>と<code>delete</code>のアクションはリクエストしているソケットにはメッセージを送信せず<em>その他の</em>接続されたソケットにのみ送信します。これは（例えば）<code>io.socket.update()</code>のコール元がサーバレスポンスを別々のクライアント再数度SDKのコールバックで扱えるようにするということを意図しています。<em>リクエストを送っているソケットを含めて</em>全てのソケットにメッセージを送るようにblueprintアクションに強制したい場合、<code>sails.config.blueprints.mirror</code>を<code>true</code>に設定して下さい。</p>
<h3><code>context</code>とは何ですか?</h3>
<p>サブスクライブする特定の<em>コンテキスト</em>（あるいはコンテキストの配列）を指定した場合、そのコンテキストとして受け取ったメッセージのみを受信します。例えば、<code>User.subscribe(socket, user, 'update')</code>は<code>publishUpdate</code>が<code>user</code>に関して呼びだされた時のみにメッセージを受信します。後に続くコールは累積されますので、<code>User.subscribe(socket, user, 'destroy')</code>を後で同じソケットに対して行った場合、ソケットは<code>publishUpdate</code>と<code>publishDestroy</code>の両方からのメッセージを受信します。</p>
<p>そのモデルのデフォルトのコンテキストをサブスクライブしたい場合、<code>context</code>は省略可能です。デフォルトのコンテキストはモデルクラスの<code>autosubscribe</code>プロパティで設定可能です。もし、<code>autosubscribe</code>が存在しなければコンテキストは<code>update</code>と<code>destroy</code>、<code>message</code> (カスタムのメッセージ用)、<code>add:*</code>、<code>remove:*</code>(関連付けられたモデルへのpublishAddとpublishRemoveメッセージ)となります。</p>
<docmeta name="methodType" value="pubsub">
<docmeta name="displayName" value=".subscribe()">