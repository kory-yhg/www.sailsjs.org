<h1>.publishCreate( <code>data</code>,[<code>request</code>] )</h1>
<h3>目的</h3>
<p>PublishCreate自体は実際には何も作成しません。これはただ単にモデルインスタンスが生成されたことをWebsocket経由で通知するだけです。PublishCreateは<a href="https://github.com/balderdashy/sails-docs/blob/0.10/reference/Blueprints.md#create-a-record">blueprint <code>create</code> アクション</a>によって自動的に呼びだされます</p>
<table>
<thead>
<tr>
<th></th>
<th>説明</th>
<th>受け入れ可能なデータ型</th>
<th>必須か</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>送信するデータ</td>
<td><code>object</code></td>
<td>はい</td>
</tr>
<tr>
<td>2</td>
<td>リクエスト</td>
<td><code>Request object</code></td>
<td>いいえ</td>
</tr>
</tbody>
</table>
<p>publishCreateのデフォルトの実装は <code>watch</code>メソッドを使ってサブスクライブしているソケットfirehoseにメッセージを発行するだけです。同様に、該当するモデルに対する新規インスタンスの作成をウォッチしているソケットもサブスクライブしています。サブスクライバへのメッセージは以下の内容を含みます。:</p>
<ul>
<li><strong>id</strong> - 新しいモデルインスタンスの<code>id</code>属性</li>
<li><strong>verb</strong>  - <code>"created"</code> (文字列)</li>
<li><strong>data</strong> - 新規モデルインスタンスの属性と値からなるオブジェクト</li>
</ul>
<h4><code>data</code></h4>
<p>新規モデルインスタンスの属性と値からなるオブジェクト</p>
<h4><code>request</code></h4>
<p>この引数が含まれていればそのリクエストに結びついているソケットは通知を<em>受け取りません</em>。</p>
<h3>使用例</h3>
<p>UsersController.js</p>
<pre><code class="language-javascript">module.exports = {

  testSocket: function(req,res){

        var nameSent = req.param('name');

        if (nameSent &amp;&amp; req.isSocket){

          User.create({name:nameSent}).exec(function created(err,newGuy){
            User.publishCreate({id:newGuy.id,name:newGuy.name});
            console.log('A new user called '+newGuy.name+' has been created');
          });

        } else if (req.isSocket){

          User.watch(req);
          console.log('User with socket id '+sails.sockets.id(req)+' is now subscribed to the model class \'users\'.');

        } else {

          res.view();

        }
    }
}

    // Don't forget to handle your errors
</code></pre>
<p>views/users/testSocket.ejs</p>
<pre><code class="language-html">
&lt;script type="text/javascript"&gt;
window.onload = function subscribeAndListen(){
    // When the document loads, send a request to users.testSocket
    // The controller code will subscribe you to the model 'users'
    socket.get('/users/testSocket/');

    // Listen for the event called 'user' emited by the publishCreate() method.
    socket.on('user',function(obj){
      if (obj.verb == 'created') {
         var data = obj.data;
         console.log('User '+data.name+' has been created.');
      }
    });
};

function makeNew(){

    // Send the new users name to the 'testSocket' action on the 'users' controller

    socket.get('/users/testSocket/',{name:'Walter'});
}

&lt;/script&gt;
&lt;div class="addButton" onClick="makeNew()"&gt;Click Me to add a new 'Walter' ! &lt;/div&gt;</code></pre>
<docmeta name="uniqueID" value="publishCreate671839">
<docmeta name="methodType" value="pubsub">
<docmeta name="importance" value="undefined">
<docmeta name="displayName" value=".publishCreate()">