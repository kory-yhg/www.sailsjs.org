<h1>.publishDestroy( <code>{id}</code>, [<code>request</code>], [<code>options</code>] )</h1>
<h3>目的</h3>
<p>モデルの削除を通知します。</p>
<table>
<thead>
<tr>
<th></th>
<th>説明</th>
<th>受け入れ可能なデータ型</th>
<th>必須か</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>削除されたレコードのID</td>
<td><code>int</code>, <code>string</code></td>
<td>はい</td>
</tr>
<tr>
<td>2</td>
<td>リクエスト</td>
<td><code>request object</code></td>
<td>いいえ</td>
</tr>
<tr>
<td>3</td>
<td>追加のオプション</td>
<td><code>object</code></td>
<td>いいえ</td>
</tr>
</tbody>
</table>
<p><code>publishDestroy()</code>はモデルの識別子をイベント名として利用します。このメッセージは<code>.subscribe</code>モデルメソッドを通じてモデルインスタンスをサブスクライブした全てのソケットに送信されます。</p>
<p>ソケットメッセージは以下の属性を含んだオブジェクトです:</p>
<ul>
<li><strong>id</strong> - モデルインスタンスの<code>id</code>属性</li>
<li><strong>verb</strong>  - <code>"destroyed"</code> (文字列)</li>
<li><strong>previous</strong> - オブジェクト。もし存在したら削除されたオブジェクトの属性と値を持っています。</li>
</ul>
<h4><code>request</code></h4>
<p>この引数が含まれていればそのリクエストに結びついているソケットは通知を<em>受け取りません</em>。</p>
<h4><code>options.previous</code></h4>
<p>もしセットされていれば削除前の、モデルを表しています。これは関連付けられているレコードに関して追加の通知を送るのに使えます。</p>
<h3>使用例</h3>
<p>UsersController.js</p>
<pre><code class="language-javascript">module.exports = {

  testSocket: function(req,res){

        var nameSent = req.param('name');

        if (nameSent &amp;&amp; req.isSocket){

          User.findOne({name:nameSent}).exec(function findIt(err,foundHim){
            User.destroy({id:foundHim.id}).exec(function destroy(err){
              User.publishDestroy(foundHim.id);
            });
          });

        } else if (req.isSocket){

        User.find({}).exec(function(e,listOfUsers){
          User.subscribe(req.socket,listOfUsers);
        console.log('User with socket id '+req.socket.id+' is now subscribed to all of the model instances in \'users\'.');
        });

        } else {

          res.view();

        }

  }
}

    // エラーのハンドリングを忘れずに
</code></pre>
<p>views/users/testSocket.ejs</p>
<pre><code class="language-html">
&lt;script type="text/javascript"&gt;
window.onload = function subscribeAndListen(){
    // When the document loads, send a request to users.testSocket
    // The controller code will subscribe you to all of the 'users' model instances (records)
    socket.get('/users/testSocket/');

    // Listen for the event called 'message' emited by the publishDestroy() method.
    socket.on('message',function(obj){
      if (obj.verb == 'destroyed') {
        console.log('User '+obj.previous.name+' has been destroyed .');
      }
    });
};

function destroy(){

    // Send the name to the testSocket action on the 'Users' contoller
    socket.get('/users/testSocket/',{name:'Walter'});
}

&lt;/script&gt;
&lt;div class="addButton" onClick="destroy()"&gt;Click Me to destroy user 'Walter' ! &lt;/div&gt;
</code></pre>
<h3>備考</h3>
<blockquote>
<p>渡される全ての母子列はレコードのIDでなければいけません。</p>
</blockquote>
<docmeta name="uniqueID" value="publishDestroy732227">
<docmeta name="methodType" value="pubsub">
<docmeta name="importance" value="undefined">
<docmeta name="displayName" value=".publishDestroy()">