<h1>.publishUpdate( <code>{id}</code>,[<code>changes</code>],[<code>request</code>],[<code>options</code>] )</h1>
<h3>目的</h3>
<p>PublishCreate自体は実際には何も更新しません。これはただ単にモデルインスタンスが更新されたことをWebsocket経由で通知するだけです。</p>
<table>
<thead>
<tr>
<th></th>
<th>説明</th>
<th>受け入れ可能なデータ型</th>
<th>必須か</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>更新されたレコードのID</td>
<td><code>int</code>, <code>string</code></td>
<td>はい</td>
</tr>
<tr>
<td>2</td>
<td>更新された値</td>
<td><code>{}</code></td>
<td>いいえ</td>
</tr>
<tr>
<td>3</td>
<td>リクエスト</td>
<td><code>request object</code></td>
<td>いいえ</td>
</tr>
<tr>
<td>4</td>
<td>追加のオプション</td>
<td><code>object</code></td>
<td>いいえ</td>
</tr>
</tbody>
</table>
<p><code>publishUpdate()</code>はモデル識別子をイベント名として利用し、ソケットメッセージを送信します。メッセージは<code>.subscribe</code>モデルメソッドにを経由してサブスクライブをした全てのソケットに送信されます。</p>
<p>ソケットメッセージは以下のプロパティを含むオブジェクトです。:</p>
<ul>
<li><strong>id</strong> - モデルインスタンスの<code>id</code>属性</li>
<li><strong>verb</strong>  - <code>"updated"</code> (文字列)</li>
<li><strong>data</strong> - 更新された属性のオブジェクト</li>
<li><strong>previous</strong> - オブジェクト。もし存在すれば更新された属性の、前の値</li>
</ul>
<h4><code>changes</code></h4>
<p>変更された属性とその新しい値を含むオブジェクトです。</p>
<h4><code>request</code></h4>
<p>この引数が含まれていればそのリクエストに結びついているソケットは通知を<em>受け取りません</em>。</p>
<h4><code>options.previous</code></h4>
<p><code>options</code>オブジェクトに<code>previous</code>プロパティが含まれていた場合、それは変更する<em>前の</em>モデルインスタンスを表します。これは追加のメッセージを発行するかどうかを判断するのに使うことができます。(詳しくは以下の<code>options.noReverse</code>フラグに関してをご覧下さい。)</p>
<h4><code>options.noReverse</code></h4>
<p><code>publishUpdate</code>のデフォルト実装は、もし<code>options.previous</code>が存在すれば関連付けられたレコードがその更新により影響を受けるかを確認し、追加の通知を発行することがあります。例えば、<code>Pet</code>モデルが<code>User</code>モデルに関連付けられた<code>owner</code>属性を持っており、ユーザが特定のペットを所有することが出来る場合で、<code>publishUpdate</code>がコールされて送信されたデータがぺっとの<code>owner</code>変更を示していた場合、追加の<code>publishAdd</code>あるいは<code>publishRemove</code>コールがなされます。これらの通知を抑制するには<code>options.noReverse</code>フラグを<code>true</code>に設定します。一般的にモデルに対して独自の<code>publishUpdate</code>実装を行っていないかぎりはこの引数をっかうべきではありません。</p>
<h3>使用例</h3>
<p>UsersController.js</p>
<pre><code class="language-javascript">module.exports = {

  testSocket: function(req,res){

        var nameSent = req.param('name');

        if (nameSent &amp;&amp; req.isSocket){

          User.update({name:nameSent},{name:'Heisenberg'}).exec(function update(err,updated){
            User.publishUpdate(updated[0].id,{ name:updated[0].name });
          });

        } else if (req.isSocket){

        User.find({}).exec(function(e,listOfUsers){
          User.subscribe(req.socket,listOfUsers);
        console.log('User with socket id '+req.socket.id+' is now subscribed to all of the model instances in \'users\'.');
        });

        } else {

          res.view();

        }
    }
}

    // エラーハンドリングを忘れずに</code></pre>
<p>views/users/testSocket.ejs</p>
<pre><code class="language-html">&lt;script type="text/javascript"&gt;
window.onload = function subscribeAndListen(){
    // When the document loads, send a request to users.testSocket
    // The controller code will subscribe you to all of the 'users' model instances (records)
    socket.get('/users/testSocket/');

    // Listen for the event called 'user'
    socket.on('user',function(obj){
      if (obj.verb == 'updated') {
        var previous = obj.previous;
        var data = obj.data;
        console.log('User '+previous.name+' has been updated to '+data.name);
      }
    });
};

function doEdit(){

    //  'Users'コントローラでのnameをtestSocketアクションに送る

    socket.get('/users/testSocket/',{name:'Walter'});
}

&lt;/script&gt;
&lt;div class="addButton" onClick="doEdit()"&gt;ユーザの新規作成はここをクリック！&lt;/div&gt;
</code></pre>
<docmeta name="uniqueID" value="publishUpdate712330">
<docmeta name="methodType" value="pubsub">
<docmeta name="importance" value="undefined">
<docmeta name="displayName" value=".publishUpdate()">