<h1>リソースフルなPubSub</h1>
<h3>概要</h3>
<p>P2PのチャットやSNSアプリケーションのようなリアルタイムのクライアント・サーバ通信に大きく依存したアプリケーションではソケットイベントの送受信はすぐに膨大なものになります。SailsはリソースフルなPubSub(<a href="http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">Publish / Subscribe</a>)を提供することでこの複雑さをスムーズにすることに貢献します。アプリケーションの全てのモデル（あるいは<em>リソース</em>）は自動的にインスタンスの作成やアップデート、削除に関してソケットで通知をするクラスメソッドを持っています。<a href="http://sailsjs.jp/documentation/reference/blueprint-api">Blueprint API</a>を利用している場合、ソケットのメッセージはモデルイベントが発生した時に自動的にブロードキャストされます。そうでない時にもこのセクションで書かれた方法を使って、クライアントに手動でモデルイベントの通信ができます。</p>
<h3>クライアントでイベントをリッスンする</h3>
<p>Javascriptライブラリを自由に使ってクライアント側でソケットイベントをリッスンできますが、Sailsでは独自の<a href="http://sailsjs.jp/documentation/reference/websockets/sails.io.js">Socketクライアント</a>をサーバと通信するための簡便な方法として用意しています。SailsのソケットクライアントはリソースフルなPubSubを以下のように簡単にリッスンすることができます。:</p>
<pre><code>io.socket.on("&lt;model identity&gt;", listenerFunction)</code></pre>
<blockquote>
<p>モデルファイルで手動で定義しない限り、<em>model identity</em>は通常モデル名の小文字版です。</p>
</blockquote>
<h3>使用例</h3>
<p>アプリケーションの中に&quot;name&quot;と名づけられた一つのアトリビュートを持つ<code>User</code>というモデルが有るとしましょう。まずはじめに&quot;user&quot;イベントにイベントリスナーを追加します。:</p>
<pre><code>io.socket.on("user", function(event){console.log(event);})</code></pre>
<p>これで<code>User</code>に関する全ての通知がコンソールに記録されます。しかしながら実在する<code>User</code>モデルインスタンスを<em>サブスクライブする</em>までそのようなメッセージを受け取ることはありません。もしデフォルトのblueprintを使っている場合、クライアントから<code>/user</code>へのWebsocketリクエストを行うことでサブスクライブができます。:</p>
<pre><code>io.socket.get("/user", function(resData, jwres) {console.log(resData);})</code></pre>
<p>これでSailsサーバに現在のユーザのリストをリクエストし、クライアントはそれぞれのユーザに関してのイベントをサブスクライブします。。加えて、<a href="http://sailsjs.jp/documentation/reference/sails.config/sails.config.blueprints.html?q=properties"><code>autoWatch</code>設定</a> がonであれば（デフォルトではonです。）、新規の<code>User</code>が作成された時にも通知を受け、新しいユーザもまたサブスクリプトされます。この例のコールバックは単にユーザのリストをコンソールにログします。このメソッドに関してのより詳細の情報は <a href="http://sailsjs.jp/documentation/reference/websockets/sails.io.js/socket.get.html">socket.get</a>のリファレンスをご覧ください。</p>
<p>ここで大切なことはサブスクリプションが行われるためには<code>/user</code>へのリクエストは通常の<em>HTTPリクエストではなく</em>、Websocketのリクエストである必要があるということです。つまり、AJAXリクエストを行うこと(例えば<code>jQuery.get("/user")</code>) では<code>User</code>に対してのリソースフルなPubsubをサブスクライブすることはできないということです。しかし、一旦サブスクリプションが行われると、ソケットのコールでもAjaxリクエストでも、cURLのリクエストでも、<em>全ての</em>モデル変更が通知されます。上の例に続けでブラウザを開き、以下のURLへのリクエストを行うと:</p>
<pre><code>/user/create?name=joe</code></pre>
<p>以下の様な通知が最初のウインドウのコンソールで表示されます。:</p>
<pre><code>{
    data: {
        createdAt: "2014-08-01T05:50:19.855Z"
        id: 1
        name: "joe"
        updatedAt: "2014-08-01T05:50:19.855Z"
    },
    id: 1,
    verb: "created"
}</code></pre>
<p><code>verb</code>はどのようなアクションが起こったかを示します。<code>id</code>はアクションが発生したインスタンスを、<code>data</code>はそれが発生した<code>User</code>に関しての更なる情報を示します。それぞれのイベントタイプはそれぞれちょっと違う情報を含みます。さらなる情報に関してはそれぞれのリソースフルPubSubメソッドのドキュメントをご覧ください。</p>
<docmeta name="uniqueID" value="resourcefulpubsub293545">
<docmeta name="displayName" value="Resourceful PubSub">