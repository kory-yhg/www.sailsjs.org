<h1>io.socket.on()</h1>
<p>Starts listening for server-sent events from Sails with the specified <code>eventIdentity</code>.  Will trigger the provided callback function when a matching event is received.</p>
<h3>Usage</h3>
<pre><code class="language-js">io.socket.on(eventIdentity, function (msg) {
  // ...
});</code></pre>
<table>
<thead>
<tr>
<th></th>
<th>Argument</th>
<th style="text-align: center;">Type</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>eventIdentity</code></td>
<td style="text-align: center;">((string))</td>
<td>The unique identity of a server-sent event, e.g. &quot;recipe&quot;</td>
</tr>
<tr>
<td>2</td>
<td><code>callback</code></td>
<td style="text-align: center;">((function))</td>
<td>Will be called when the server emits a message to this socket.</td>
</tr>
</tbody>
</table>
<h5>Callback</h5>
<table>
<thead>
<tr>
<th></th>
<th>Argument</th>
<th style="text-align: center;">Type</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>msg</code></td>
<td style="text-align: center;">((object))</td>
<td>Message sent from the Sails server</td>
</tr>
</tbody>
</table>
<p>Note that the callback will NEVER trigger until one of your back-end controllers, models, services, etc. sends a message to this socket.  Typically that is achieved one of the following ways:</p>
<h6>Resourceful Pubsub Methods</h6>
<ul>
<li>server publishes a message about a record to which this socket is subscribed (see <a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishUpdate.html">Model.publishUpdate()</a>, <a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishDestroy.html">Model.publishDestroy()</a>, and <a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/subscribe.html">Model.subscribe()</a>)</li>
<li>server publishes a message informing all permitted watcher sockets that a new record has been created in the model with the same identity as <code>eventIdentity</code> (see <a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishCreate.html">Model.publishCreate(<a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishCreate.html">http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishCreate.html</a>)</a> and <a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/watch.html">Model.watch()</a>)</li>
</ul>
<h6>Low-Level Socket Methods</h6>
<ul>
<li>server emits a message to all known sockets (see <a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.blast.html">sails.sockets.blast()</a>)</li>
<li>server emits a message directly to this socket (<code>io.socket</code>) using its unique id (see <a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.emit.html">sails.sockets.emit()</a>)</li>
<li>server <a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.broadcast.html">broadcasts</a> to a room in which this socket (<code>io.socket</code>) has been allowed to <a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.join.html">join</a> (remember that a socket only stays subscribed as long as it is connected-- i.e. as long as the browser tab is open)</li>
</ul>
<h3>Example</h3>
<p>Listen for new orders and updates to existing orders:</p>
<pre><code class="language-javascript">io.socket.on('order', function onServerSentEvent (msg) {
  // msg =&gt; {...whatever the server published/emitted...}
});</code></pre>
<h5>Another example, this time using Angular:</h5>
<blockquote>
<p>Note that this Angular example assumes the backend calls <code>publishCreate()</code> at some point.</p>
</blockquote>
<pre><code class="language-javascript">angular.module('cafeteria').controller('CheckoutCtrl', function ($scope) {

  $scope.orders = $scope.orders || [];

  if (!io.socket.alreadyListeningToOrders) {
    io.socket.alreadyListeningToOrders = true;
    io.socket.on('order', function onServerSentEvent (msg) {

      // Let's see what the server has to say...
      switch(msg.verb) {

        case 'created':
          $scope.orders.push(msg.data); // (add the new order to the DOM)
          $scope.$apply();              // (re-render)
          break;

        default: return; // ignore any unrecognized messages
      }
    });
  }
});</code></pre>
<h3>Notes</h3>
<blockquote>
<ul>
<li>When listening for resourceful pubsub calls, the <code>eventIdentity</code> is the same as the identity of the calling model (e.g. if you have a model &quot;UserComment&quot;, the identity is &quot;usercomment&quot;.)</li>
<li>For context-- these types of server-sent events are sometimes referred to as <a href="http://en.wikipedia.org/wiki/Comet_(programming)">&quot;comet&quot;</a> messages.</li>
</ul>
</blockquote>
<h3>Handle Socket 'Connect' and 'Disconnect' events</h3>
<p>If connection to server was interrupted - server was restarted or some network issue - it is possible to handle these events and subscribe to sockets again.</p>
<pre><code class="language-javascript">  io.socket.on('connect', function(){
      io.socket.get('/messages');
      io.socket.get('/notifications/subscribe/statusUpdates');
  });

  io.socket.on('disconnect', function(){
      console.log('Lost connection to server');
  });</code></pre>
<docmeta name="uniqueID" value="socketon682488">
<docmeta name="displayName" value="io.socket.on()">