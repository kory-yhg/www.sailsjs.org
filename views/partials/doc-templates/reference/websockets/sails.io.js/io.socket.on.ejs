<h1>io.socket.on()</h1>
<p>指定された<code>eventIdentity</code>でSailsから発信されたサーバー側送信のイベントをリッスンし始めます。これは対応するイベントがトリガーされた時にコールバック関数をトリガーします。</p>
<h3>使い方</h3>
<pre><code class="language-js">io.socket.on(eventIdentity, function (msg) {
  // ...
});</code></pre>
<table>
<thead>
<tr>
<th></th>
<th>引数</th>
<th style="text-align: center;">型</th>
<th>詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>eventIdentity</code></td>
<td style="text-align: center;">((string))</td>
<td>サーバ側送信イベントのユニークな識別子。（例：&quot;recipe&quot;）</td>
</tr>
<tr>
<td>2</td>
<td><code>callback</code></td>
<td style="text-align: center;">((function))</td>
<td>このソケットにサーバがメッセージを送った時に呼び出されるコールバック</td>
</tr>
</tbody>
</table>
<h5>コールバック</h5>
<table>
<thead>
<tr>
<th></th>
<th>引数</th>
<th style="text-align: center;">型</th>
<th>詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>msg</code></td>
<td style="text-align: center;">((object))</td>
<td>Sailsサーバから送られたメッセージ</td>
</tr>
</tbody>
</table>
<p>バックエンドのコントローラやモデル、サービスなどがメッセージをソケットに送信しないかぎりこのコールバックは呼び出されないということにご注意下さい。一般的にこれは以下の方法によって実現します。:</p>
<h6>リソースフルなPubsubメソッド</h6>
<ul>
<li>サーバはSubscribeしているソケットにレコードに関してのメッセージをPublishします。(<a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishUpdate.html">Model.publishUpdate()</a>と<a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishDestroy.html">Model.publishDestroy()</a>、<a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/subscribe.html">Model.subscribe()</a>を御覧ください)</li>
<li>サーバは許可されている全てのウォッチャーに対してモデルに<code>eventIdentity</code>と同じ識別子のレコードがツッカされた旨を通知します。(<a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishCreate.html">Model.publishCreate(<a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishCreate.html">http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/publishCreate.html</a>)</a> と <a href="http://sailsjs.jp/documentation/reference/websockets/resourceful-pubsub/watch.html">Model.watch()</a>を御覧ください)</li>
</ul>
<h6>低レベルでのソケットメソッド</h6>
<ul>
<li>サーバは既知のすべてのソケットに対してメッセージを送信します。(<a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.blast.html">sails.sockets.blast()</a>を御覧ください。)</li>
<li>サーバはソケットのユニーク識別子を使って特定のソケット(<code>io.socket</code>)にメッセージを送信します(<a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.emit.html">sails.sockets.emit()</a>を御覧ください。)</li>
<li>サーバはソケット(<code>io.socket</code>)が<a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.join.html">join</a> することを許可されているroomに対してメッセージを<a href="http://sailsjs.jp/documentation/reference/websockets/sails.sockets/sails.sockets.broadcast.html">ブロードキャスト</a>します。（ソケットは接続中に限り、つまりブラウザのタブが開いている間に限りサブスクライブするということを覚えておいて下さい）</li>
</ul>
<h3>例</h3>
<p>既存のorderへの変更と新規のorderをListenする。:</p>
<pre><code class="language-javascript">io.socket.on('order', function onServerSentEvent (msg) {
  // msg =&gt; {...whatever the server published/emitted...}
});</code></pre>
<h5>別の例。今回はAngularを使って。:</h5>
<blockquote>
<p>備考:このAngularの例は同じポイントの<code>publishCreate()</code>をコールすることを想定しています。</p>
</blockquote>
<pre><code class="language-javascript">angular.module('cafeteria').controller('CheckoutCtrl', function ($scope) {

  $scope.orders = $scope.orders || [];

  if (!io.socket.alreadyListeningToOrders) {
    io.socket.alreadyListeningToOrders = true;
    io.socket.on('order', function onServerSentEvent (msg) {

      // Let's see what the server has to say...
      switch(msg.verb) {

        case 'created':
          $scope.orders.push(msg.data); // (add the new order to the DOM)
          $scope.$apply();              // (re-render)
          break;

        default: return; // ignore any unrecognized messages
      }
    });
  }
});</code></pre>
<h3>備考</h3>
<blockquote>
<ul>
<li>リソースフルなPubsubコースをListenしている時、<code>eventIdentity</code>はコールされているモデルのIdentityと一緒です。（例：&quot;UserComment&quot;というモデルが有る場合、識別子は&quot;usercomment&quot;です。）</li>
<li>コンテキストに関して。このようなサーバ側送信のイベントは<a href="http://en.wikipedia.org/wiki/Comet_(programming)">&quot;comet&quot;</a>を参考にしていることがあります。</li>
</ul>
</blockquote>
<h3>ソケットの'Connect'と'Disconnect'イベントをハンドルする</h3>
<p>サーバへのコネクションが阻害された時、つまりはサーバがリスタートしたりネットワークに問題が生じた時、これらのイベントをハンドルしてソケットをサブスクライブし直すことができます。</p>
<pre><code class="language-javascript">  io.socket.on('connect', function(){
      io.socket.get('/messages');
      io.socket.get('/notifications/subscribe/statusUpdates');
  });

  io.socket.on('disconnect', function(){
      console.log('Lost connection to server');
  });</code></pre>
<docmeta name="uniqueID" value="socketon682488">
<docmeta name="displayName" value="io.socket.on()">