<h1>res.send()</h1>
<p>シンプルなリクエストを送信します。<code>statusCode</code>はデフォルトで200 (&quot;OK&quot;)になります。</p>
<p>このメソッドは多くのターミナルレスポンスのメソッドの裏側で利用されています。</p>
<h3>使い方</h3>
<pre><code class="language-javascript">return res.send([statusCode,] body);</code></pre>
<h3>詳細</h3>
<p>このメソッドはContent-Lengthが事前に定義されていない時に自動で割り当てたり、自動的なHEADとHTTPの更新サポートなど、シンプルで、ストリーミングでないレスポンスに必要な数えきれないほど多くのタスクを提供します。</p>
<p>バッファが与えられた時、Content-Typeには以下のように事前に定義された時を除き&quot;application/octet-stream&quot;がセットされます:</p>
<pre><code class="language-javascript">res.set('Content-Type', 'text/html');
res.send(new Buffer('some html'));</code></pre>
<p>文字列が与えられた時、Content-Typeには&quot;text/html&quot;がセットされます:</p>
<pre><code class="language-javascript">res.send('some html');</code></pre>
<p>配列またはオブジェクトが与えられた時、ExpressはJSON表現でレスポンスします。:</p>
<pre><code class="language-javascript">res.send({ user: 'tobi' })
res.send([1,2,3])</code></pre>
<p>最後に、事前にNodyが与えられることなく数字が与えられた場合、レスポンスボディ文字列が割り当てられます。例えば200が文字列「OK」とともにレスポンスされたり、404「Not found」だったりという感じにです。</p>
<pre><code class="language-javascript">res.send(200)
res.send(404)
res.send(500)</code></pre>
<h3>例</h3>
<pre><code class="language-javascript">res.send(new Buffer('whoop'));
res.send({ some: 'json' });
res.send('some html');
res.send(404, 'Sorry, we cannot find that!');
res.send(500, { error: 'something blew up' });
res.send(200);</code></pre>
<h3>Notes</h3>
<blockquote>
<ul>
<li>このメソッドは <strong>ターミナル</strong>であり、リクエストを処理するための一般的に最後の1行であるべきです。（そのためこれらのドキュメントの使用方法では<code>return</code>を使うと考えるべきです。）。</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="ressend588955">
<docmeta name="displayName" value="res.send()">