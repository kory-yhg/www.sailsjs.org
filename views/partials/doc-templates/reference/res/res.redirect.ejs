<h1>res.redirect()</h1>
<p>与えられた絶対パスまたは相対パスにユーザーエージェントをリダイレクトする。</p>
<h3>使い方</h3>
<pre><code class="language-js">return res.redirect(url);</code></pre>
<h3>引数</h3>
<table>
<thead>
<tr>
<th></th>
<th>引数</th>
<th style="text-align: center;">型</th>
<th>詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>url</code></td>
<td style="text-align: center;">((string))</td>
<td>URL表現 (完全なスペックに関しては以下をご覧ください。).<br/> 例:<code>"http://google.com"</code> あるいは <code>"/login"</code></td>
</tr>
</tbody>
</table>
<h3>詳細</h3>
<p>Sails/Express/Koa/Connectはいくつかのリダイレクトの形をサポートします。まずは別のドメインへの完全な形のURIです。:</p>
<pre><code class="language-javascript">return res.redirect('http://google.com');</code></pre>
<p>2番めにはドメインに対しての相対リダイレクトです。例えば、<a href="http://example.com/admin/post/new">http://example.com/admin/post/new</a> にいる場合、<code>/admin</code>へのリダイレクトは<a href="http://example.com/admin">http://example.com/admin</a>へ導かれます。:</p>
<pre><code class="language-javascript">return res.redirect('/checkout');</code></pre>
<!--
おそらく、便利というよりややこしいです。:
次のリダイレクトはアプリケーションのマウントポイントからの相対パスです。例えば、ブログアプリケーションが/blogにマウントされていた場合、理想的にはどこにマウントされているのかという知識は必要ないはずので、/admin/post/newへのリダイレクトは単にhttp://example.com/admin/post/newへになりますので、以下の相対リダイレクトはhttp://example.com/blog/admin/post/newを与えます:
```javascript
return res.redirect('admin/post/new');
```
-->
<p>パス名に対するリダイレクトも同様に可能です。もし<a href="http://example.com/admin/post/newにいる場合、以下のリダイレクトはhttp//example.com/admin/post">http://example.com/admin/post/newにいる場合、以下のリダイレクトはhttp//example.com/admin/post</a>に導かれます:</p>
<pre><code class="language-javascript">return res.redirect('..');</code></pre>
<p>最後の特別なケースはBackリダイレクトであり、これは&quot;Referer&quot; (あるいは&quot;Referrer&quot;)ヘッダー（もし省略されていた場合、デフォルトとして<code>/</code>に）を利用してリクエストが来る前へリダイレクトで戻す方法です。</p>
<pre><code class="language-javascript">return res.redirect('back');</code></pre>
<h3>備考</h3>
<blockquote>
<ul>
<li>このメソッドは <strong>ターミナル</strong>であり、リクエストを処理するための一般的に最後の1行であるべきです。（そのためこれらのドキュメントの使用方法では<code>return</code>を使うと考えるべきです。）。</li>
<li>アプリケーションで<code>res.redirect()</code>が呼び出された時、Sailsはステータスコード<a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection">302</a>でレスポンスします。これはユーザエージェントに対して、与えられたURLに対して新しいリクエストを行うよう示すものです。これは、ユーザエージェントに対してリダイレクトを <em>強制</em> するものではなくただ、そのように振る舞ってくれることを期待するだけのものです。</li>
<li>一般的に、リクエストが「JSONを要求」している（すなわち、<a href="http://sailsjs.jp/documentation/reference/req/req.wantsJSON.html"><code>req.wantsJSON</code></a>）場合、<code>res.redirect()</code>を使う必要はありません。</li>
<li>リクエストがSocket.ioから出ている場合、常に「JSONを要求」しているとされますｓ．<code>res.redirect(http://sailsjs.jp/documentation/reference/res/res.redirect.html)</code>をソケットに対してコールした場合、Sailsはサーバサイドで内部的にリクエストをリダイレクトし、効果的にリダイレクトがが行われるように強制します。（すなわち、302ステータスコードを送信する代わりに、サーバーが単にリダイレクト先にURLに対する新規リクエストを送信します。）
<ul>
<li>その結果、ソケットリクエストにおいては（技術的にはプロキシーで実現が出来るものの）外部のドメインへのリダイレクトはサポートされていません。</li>
<li>この振る舞いは将来のバージョンのSailsではよりHTTPの振る舞いに合った形に変更されるかもしれません。</li>
</ul></li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="resredirect444617">
<docmeta name="displayName" value="res.redirect()">