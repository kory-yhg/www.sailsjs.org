<h1>res.view()</h1>
<p>HTMLページでレスポンスする。</p>
<h3>使い方</h3>
<pre><code class="language-js">return res.view(pathToView, locals);</code></pre>
<p><em>あるいは:</em></p>
<ul>
<li><code>return res.view(pathToView);</code></li>
<li><code>return res.view(locals);</code></li>
<li><code>return res.view();</code></li>
</ul>
<p><a href="http://sailsjs.jp/documentation/concepts/Views/ViewEngines.html">設定されたビューエンジン</a>を使って<code>pathToView</code>にある<a href="http://sailsjs.jp/documentation/concepts/Views/Partials.html">view template</a>をHTMLにコンパイルします。<code>pathToView</code>が与えられない場合、現在のコントローラとアクションに応じて慣習的にビューを提供します。</p>
<p>与えられた、<a href="http://sailsjs.jp/documentation/reference/Views/Locals.html"><code>locals</code></a> はアプリケーション横断的なローカルやSailsやビューエンジンによって挿入されたローカルと統合された後にdataとしてビューエンジンに渡されます。</p>
<h3>引数</h3>
<table>
<thead>
<tr>
<th></th>
<th>引数</th>
<th style="text-align: center;">型</th>
<th>詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>pathToView</code></td>
<td style="text-align: center;">((string))</td>
<td>目的のビューファイルに対する<a href="http://sailsjs.jp/documentation/anatomy/myApp/views"><code>views</code> フォルダ</a> (usually <code>views/</code>)に相対的なパスを拡張子(例:<code>.ejs</code>)と最後のスラッシュ無しで。<br/>デフォルトは&quot;identityOfController/nameOfAction&quot;.</td>
</tr>
<tr>
<td>2</td>
<td><code>locals</code></td>
<td style="text-align: center;">((object))</td>
<td>ビューテンプレートに渡すデータ。ここで明示的に渡されたローカルがSailsの<a href="http://sailsjs.jp/documentation/concepts/Views/Locals.html">ビルドインのlocal</a>とアプリケーションの<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md">アプリ内で全体的に使えると設定したlocal</a>と統合されます。<br/>デフォルトは<code>{}</code>です。</td>
</tr>
</tbody>
</table>
<h3>例</h3>
<p>慣習通りに設定されたSailsアプリケーションの<code>OvenController.js</code>の<code>cook()</code>アクションで<code>res.view()</code>を呼び出すとします。</p>
<p><code>pathToView</code>引数なしには<code>res.view()</code>はコントローラの識別子(<code>oven</code>)とアクションの名前(<code>cook</code>)を合わせて判断します:</p>
<pre><code class="language-js">return res.view();
// -&gt; responds with `views/oven/cook.ejs`</code></pre>
<p>以下は明示的な<code>pathToView</code>を使って同じビューをロードする方法です:</p>
<pre><code class="language-js">return res.view('oven/cook');
// -&gt; responds with `views/oven/cook.ejs`</code></pre>
<p>最後に<code>res.view</code>がどのようにWaterlineと組み合わさるのか関してのもう少し踏み込んだデモです。:</p>
<pre><code class="language-js">// Find the 5 hottest oven brands on the market
Oven.find().sort('heat ASC').exec(function (err, ovens){
  if (err) return res.serverError(err);

  return res.view('oven/top5', {
    hottestOvens: ovens
  });
  // -&gt; responds using the view at `views/oven/top5.ejs`,
  // and with the oven data we looked up as view locals.
  //
  // e.g. in the view, we might have something like:
  // ...
  // &lt;% _.each(hottestOvens, function (aHotOven) { %&gt;
  //  &lt;li&gt;&lt;%= aHotOven.name %&gt;&lt;/li&gt;
  // &lt;% }) %&gt;
  // ...
});
</code></pre>
<h3>Notes</h3>
<blockquote>
<ul>
<li>This method is <strong>terminal</strong>, meaning it is generally the last line of code your app should run for a given request (hence the advisory usage of <code>return</code> throughout these docs).</li>
<li><code>res.view()</code>はビューファイルをディスクから読み出し、HTMLにコンパイルし、クライアントに返送します。ビューがすでにメモリ上にある場合や直接クライアントにコンパイルされたHTMLを送信したくない場合、代わりに<code>sails.hooks.views.render()</code>を使って下さい。</li>
<li><code>res.view()</code> は常にビューファイル名の <em>小文字版</em> 探します。例えばコントローラが<code>FooBarController</code>でアクションが<code>Baz</code>なら<code>res.view()</code>は<code>views/foobar/baz.ejs</code>を見つけようとします。<em>大文字と小文字を区別する</em> ファイルシステム(例:Ubuntu Linux)では大文字を入れてこれらが命名されていた場合、思わぬエラーを発生させる場合があります。この理由からビューとビューフォルダは常に小文字で命名することをおすすめします。</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="resview916814">
<docmeta name="displayName" value="res.view()">