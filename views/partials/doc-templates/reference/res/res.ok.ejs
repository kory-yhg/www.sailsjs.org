<h1>res.ok()</h1>
<p>与えられたデータを使い、クライアントに200 (&quot;OK&quot;)レスポンスを返します。リクエストに対するコンテンツネゴシエーションを行い、<a href="http://sailsjs.jp/documentation/reference/res/res.json.html"><code>res.json()</code></a>または<a href="http://sailsjs.jp/documentation/reference/res/res.view.html"><code>res.view()</code></a>を呼び出します。</p>
<h3>使い方</h3>
<pre><code class="language-js">return res.ok();</code></pre>
<p><em>あるいは:</em></p>
<ul>
<li><code>return res.ok(data);</code></li>
<li><code>return res.ok(data, pathToView);</code></li>
</ul>
<h3>詳細</h3>
<p>ほかのカスタムレスポンスモジュールと同じようにこのメソッドはカスタマイズ可能です。</p>
<p>デフォルトでこれは以下のように動作します:</p>
<ul>
<li>リクエストが&quot;<a href="http://sailsjs.jp/documentation/reference/req/req.wantsJSON.html">JSONを望んでいる</a>&quot;場合（例えはリクエストがAJAXやWebSocketsその他cURLなどのRESTクライアントからのものである場合）、Sailsは与えられたエラーの<code>data</code>をJSONで返します。もし何の<code>data</code>も与えられていない時はデフォルトのレスポンスボディ（文字列の<code>"OK"</code>）が送信されます。</li>
<li>リクエストがJSONを望んで <em>いない場合</em> （例:URLがブラウザに打ち込まれた場合）、Sailsはビューのうち1つを返そうとします。
<ul>
<li>特定の<code>pathToView</code>が与えられているときはSailsはそのビューを返そうとします。</li>
<li>そうではなく<code>pathToView</code>が与えられて_いない時_Sailsは適切なviewを推測しようとします。（詳しくは <a href="http://sailsjs.jp/documentation/reference/res/res.view.html"><code>res.view()</code></a>を御覧ください。）、もし適切なビューを見つけられない時Sailsは単にJSONを返します。</li>
<li>Sailsがビューを返すとき、<code>data</code>引数は<a href="http://sailsjs.jp/documentation/concepts/Views/Locals.html">view local</a>: <code>data</code>としてアクセス可能です。</li>
</ul></li>
</ul>
<h3>例</h3>
<pre><code class="language-javascript">return res.ok({
  name: 'Loïc',
  occupation: 'developer'
});</code></pre>
<p>リクエストがAJAXから来ていた場合、上記の利用例に対しては以下のJSONを含んだレスポンスが送信されます:</p>
<pre><code class="language-json">{
  "name": "Loïc",
  "occupation": "developer"
}</code></pre>
<p>また、<code>res.ok()</code>がビューが予測可能な場所から呼び出された時はパラメータが<code>data</code>のローカルで利用可能な形でそのビューが提供されます。例えば<code>res.ok()</code>が<code>UserController.update</code>呼びだされた時には<code>views/user/update.ejs</code>を使って以下のビューが作成されます:</p>
<pre><code class="language-html">&lt;input type="text" placeholder="Name" value="&lt;%= data.name %&gt;"/&gt;
&lt;input type="text" placeholder="Occupation" value="&lt;%= data.occupation %&gt;"/&gt;</code></pre>
<p><code>res.ok()</code>が呼び出された場所がコントローラアクションでない場合、慣習的なビューは予想されませんのでSailは代わりに単にJSONを返します:</p>
<p>最後に<code>pathToView</code>が2つ目の引数で指定された時にはSailsは推測をせずに常にそのビューを使います。例えば、以下の仕様例では<code>views/user/detail.ejs</code>にあるビューが利用されてコンパイルされ、レスポンスされます:</p>
<pre><code class="language-javascript">return res.ok({
  name: 'Loïc',
  occupation: 'developer'
}, 'user/detail');</code></pre>
<h3>備考</h3>
<blockquote>
<ul>
<li>このメソッドは <strong>ターミナル</strong>であり、リクエストを処理するための一般的に最後の1行であるべきです。（そのためこれらのドキュメントの使用方法では<code>return</code>を使うと考えるべきです。）。</li>
<li><code>res.notFound()</code>は（ほかのユーザ側のレスポンスメソッドと同様に）編集や上書きが可能です。<a href="http://sailsjs.jp/documentation/anatomy/myApp/api/responses/ok.js.html"><code>api/responses/ok.js</code></a>,で定義されたレスポンスメソッドが実行されますが、これはSailsアプリケーションを生成する際に自動的に作成されます。<code>ok.js</code>が無いときはSailsは暗黙でデフォルトの振る舞いを利用します。</li>
<li>このメソッドは<a href="http://sailsjs.jp/documentation/reference/blueprint-api?q=blueprint-actions">blueprint actions</a>が成功したリクエストに対するレスポンスを返す際に使われます。そのためそのため、この部分はレスポンスデータクライアントが望む特定の形式に整形する、すなわちデータをXMLにコンバートしたり、追加のオブジェクトにラップしたり（Ember向けに）するのに、最適な場所です。</li>
</ul>
</blockquote>
<docmeta name="uniqueID" value="resok847363">
<docmeta name="displayName" value="res.ok()">