<h1>コンベンショナルのデフォルト</h1>
<p>Sailsにはすぐに使えるコンベンショナルなHTTPミドルウエアがバンドルされています。もちろんこれは、無効化したり、上書きしたり、アレンジしなおしたり、追加することも出来ますが、多くのアプリケーションの開発時及び運用時にはプリインストールのスタックは完璧に対応することが出来ます。以下に、外部からのリクエストを受けた時には毎回実行されるに標準的なミドルウエアファンクションの表を実行順に掲載します。:</p>
<table>
<thead>
<tr>
<th>HTTP ミドルウエアキー</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>startRequestTimer</strong></td>
<td>リクエストの始まった時間を記録するためにメモリ上に変数を配置します。これはスローリクエストの診断データに使います。</td>
</tr>
<tr>
<td><em>cookieParser</em> *</td>
<td>この後のミドルウエアやアプリケーションで使うためにCookieのデータをパースします。</td>
</tr>
<tr>
<td><em>session</em> *</td>
<td><a href="http://beta.sailsjs.org/#/documentation/reference/sails.config/sails.config.session.html">session設定</a>を使ってユニークなセッションオブジェクトを準備します。</td>
</tr>
<tr>
<td><strong>bodyParser</strong></td>
<td><a href="https://github.com/balderdashy/skipper">Skipper</a>を使ってHTTPリクエストボディからパラメータとバイナリストリーム(ストリーミングファイルアップロード時に)をパースします。</td>
</tr>
<tr>
<td><strong>compress</strong></td>
<td>gzip/deflateを使ってレスポンスを圧縮します。</td>
</tr>
<tr>
<td><strong>methodOverride</strong></td>
<td>faux HTTPメソッドを提供します。これによりクライアントがサポートしない場合(例えばレガシーなInternet Explorerのように)でもPUTやDELETEのようなHTTPリクエストを使えるようにします。もしリクエストが<code>"PUT"</code>に設定された<code>_method</code>パラメータを持っていればあたかもそのリクエストは適切なPUT リクエストであったかのようにルーティングされます。さらなる情報が欲しい場合は<a href="http://www.senchalabs.org/connect/methodOverride.html">Connect's methodOverride docs</a> を御覧ください。</td>
</tr>
<tr>
<td><strong>poweredBy</strong></td>
<td><code>X-Powered-By</code>ヘッダーを外行きのレスポンスに対して付加します。</td>
</tr>
<tr>
<td><strong>$custom</strong></td>
<td>Sails v0.9.x.における設定プションに対する後方互換性を提供します。Sailsv0.10ではより多くの柔軟な設定をHTTPミドルウエアに対して行えるようにしたため、<code>sails.config.express.customMiddleware</code>を使わない限りはこのアイテムを自身を持ってリストから取り除くことも出来ます。</td>
</tr>
<tr>
<td><em>router</em> *</td>
<td>ここでアプリケーションの諸々のロジックがリクエストに対して適用されます。hooksにある(csrf tokenの強制などの)<code>"before"</code> ハンドラやいくつかのSailsロジックに加え、(<a href="http://beta.sailsjs.org/#/documentation/reference/sails.config/sails.config.routes.html"><code>sails.config.routes</code></a>での) 明示的ルーティングやblueprintsルーティングを使ってリクエストをルーティングします。</td>
</tr>
<tr>
<td><em>www</em> *</td>
<td>Connectの <a href="http://www.senchalabs.org/connect/static.html">スタティックミドルウエア</a>アプリケーションの&quot;public&quot;フォルダ(通常<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md"><code>.tmp/public/</code></a>に配置されている<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md"><code>sails.config.paths</code></a>で設定されます)にあるスタティックファイル(通常画像やスタイルシート、スクリプト)を提供します。</td>
</tr>
<tr>
<td><strong>favicon</strong></td>
<td><a href="http://en.wikipedia.org/wiki/Favicon">browser favicon</a>がアプリケーション中で<code>/assets/favicon.ico</code>として設定されていればこれを提供します。</td>
</tr>
<tr>
<td><em>404</em> *</td>
<td>どのルーティングにもマッチしないリクエストをハンドルします - <code>res.notFound()</code>をトリガーします  <!-- technically, this emits the `router:request:404` event)  --></td>
</tr>
<tr>
<td><em>500</em> *</td>
<td>内部エラーをトリガーしたリクエストをハンドルします。 - <code>res.serverError()</code>をトリガーします <!-- technically, this emits the `router:request:500` event)  --></td>
</tr>
</tbody>
</table>
<docmeta name="displayName" value="Conventional Defaults">