<h1>ミドルウエア</h1>
<p>SailsはExpress / Connectのミドルウエアと(実は全ての部分が)完全な互換性を持っています。<a href="http://sailsjs.org/documentation/concepts/Controllers?q=actions">コントローラアクション</a>や<a href="http://sailsjs.org/documentation/concepts/Policies">ポリシー</a>を始めとした、あなたがSails上で書くコードの大半は事実上ミドルウエアであると言えます。</p>
<h3>HTTPミドルウエア</h3>
<p>また、SailsはHTTPリクエストを処理する目的で追加の<a href="http://sailsjs.org/documentation/concepts/Middleware?q=adding-or-overriding-http-middleware">設定可能なミドルウエアスタック</a>を利用しています。アプリケーションがHTTPリクエストを受け取った時は常に、設定されたミドルウエアスタックが順に実行されます。</p>
<blockquote>
<p>HTTPミドルウエアスタックは「実際の」HTTPリクエスト時にのみ利用され、<strong>バーチャルなリクエスト</strong>（例えばliveなSocket.ioコネクションからのリクエスト）は無視されるということを覚えておいてください。</p>
</blockquote>
<h6>凡例:</h6>
<ul>
<li><code>*</code> - アスタリスク(*) がついたミドルウエアは <em>ほぼ絶対に</em> 編集したり削除したりする必要はありません。自分で何をやっているのかを本当に理解している時にのみこれらを編集したり削除したりしてください。</li>
</ul>
<h4>HTTPミドルウエアを追加または上書きする。</h4>
<p>カスタムのHTTPミドルウエアを設定するには、まず新しいHTTPキー<code>sails.config.http.middleware.foobar</code>を定義して設定済みのミドルウエアファンクションとして設定します。そして<code>sails.config.http.middleware.order</code>のミドルウエアチェーンの配列の中の好きなところにキー名(“foobar”)を文字列で追加します。(&quot;cookieParser”の直前に置くのがいいでしょう。):</p>
<p><code>config/http.js</code>での例:</p>
<pre><code class="language-js">  // ...
  middleware: {

    // Define a custom HTTP middleware fn with the key `foobar`:
    foobar: function (req,res,next) { /*...*/ next(); },

    // Define another couple of custom HTTP middleware fns with keys `passportInit` and `passportSession`
    // (notice that this time we're using an existing middleware library from npm)
    passportInit    : require('passport').initialize(),
    passportSession : require('passport').session(),

    // Override the conventional cookie parser:
    cookieParser: function (req, res, next) { /*...*/ next(); },

    // Now configure the order/arrangement of our HTTP middleware
    order: [
      'startRequestTimer',
      'cookieParser',
      'session',
      'passportInit',            // &lt;==== passport HTTP middleware should run after "session"
      'passportSession',         // &lt;==== (see https://github.com/jaredhanson/passport#middleware)
      'bodyParser',
      'compress',
      'foobar',                  // &lt;==== we can put this stuff wherever we want
      'methodOverride',
      'poweredBy',
      '$custom',
      'router',
      'www',
      'favicon',
      '404',
      '500'
    ]
  },

  customMiddleware: function(app){
     //Intended for other middleware that doesn't follow 'app.use(middleware)' convention
     require('other-middleware').initialize(app);
  }
  // ...</code></pre>
<h3>SailsにおけるExpressミドルウエア</h3>
<p>Sailsのとても良い所の一つはすでに存在するExpress/Connectの恩恵に預かることが出来るという点です。しかし <em>実際に</em>やってみようとした人の共通の疑問は:</p>
<blockquote>
<p><em>”何処で<code>app.use()</code>すればいいのか?”</em>ということです。</p>
</blockquote>
<p>ほとんどのケースにおいてこの答えはExpressのミドルウエアをHTTPミドルウエアとして<a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.http.html"><code>sails.config.http.middleware</code></a>でインストールすることです。これでアプリケーションにおける全てのHTTPリクエストの際にこれらトリガーされることになります。また他のHTTPミドルウエアと関連してどの順番で動作すればいいのかを設定することも出来ます。</p>
<h3>SailsにおけるExpress Routingミドルウエア</h3>
<p><a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.policies.html"><code>config/policies.js</code></a>で設定することによりポリシーとしてExpressミドルウエアをインクルードすることも出来ます。また、実際のラッパーポリシーの中にmiddlewareをrequireしてセットアップすることも出来ます(通常、そうするのがいいです)し、単にpolicies.jsファイルで直接requireする事もできます。以下の例では簡潔さを優先して後者の手法を取っています。:</p>
<pre><code class="language-js">{
  '*': true,

  ProductController: {

    // Prevent end users from doing CRUD operations on products reserved for admins
    // (uses HTTP basic auth)
    '*': require('http-auth')({
      realm: 'admin area'
    }, function customAuthMethod (username, password, onwards) {
      return onwards(username === "Tina" &amp;&amp; password === "Bullock");
    }),

    // Everyone can view product pages
    show: true
  }
}</code></pre>
<!--
  TODO:
### Advanced Express Middleware In Sails
You can actually do this in a few different ways, depending on your needs.
Generally, the following best-practices apply:
If you want a middleware function
+ If you want a piece of middleware to run only when your app's explicit or blueprint routes are matched, you should include it as a policy.
+ this will run passport for all incoming http requests, including images, css, etc.
If you want a middleware function to run for all you should include it at the top of your `config/routes.js` as a wildcard route.  for your controller (both HTTP and virtual) requests
-->
<docmeta name="uniqueID" value="middleware198259">
<docmeta name="displayName" value="Middleware">