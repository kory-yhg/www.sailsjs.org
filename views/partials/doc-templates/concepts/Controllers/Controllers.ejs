<h1>コントローラ</h1>
<h3>概要</h3>
<p>コントローラ（<strong>MVC</strong>モデルでいうところの<strong>C</strong>）はSailsアプリケーションがWebブラウザやモバイルアプリケーションなどWebサーバと通信できる各種の端末から受けるリクエストを処理する基礎的なオブジェクトです。コントローラはしばしば<a href="http://sailsjs.org/documentation/concepts/ORM/Models.html">Model</a>と<a href="http://sailsjs.org/documentation/concepts/Views">View</a>の中間に立ちます。また、多くのケースではアプリケーションお大半の<a href="http://en.wikipedia.org/wiki/Business_logic">ビジネスロジック</a>はコントローラの中に記述されます。</p>
<h3>アクション</h3>
<p>コントローラは<em>アクション</em>と呼ばれるファンクションの集合から構成されます。アクションはあなたのアプリケーションのルーティングから転送されます。つまりクライアントが特定の<a href="http://sailsjs.org/documentation/concepts/Routes">ルート</a>に対してリクエストを行った時にはアクションに転送されそこで何ら家のビジネスロジックを実行した上で（大抵の場合は）レスポンスを生成します。例えば「<code>/hello</code>のルートにGETアクセスがなされた場合以下の様なメソッドが呼び出す」ということが出来ます。:</p>
<pre><code class="language-javascript">function (req, res) {
  return res.send("Hi there!");
}</code></pre>
<p>このためブラウザが<code>/hello</code>のURLを呼び出した時はいつでも&ldquo;Hi there&rdquo;とメッセージが表示されるようになります。</p>
<h3>コントローラはどこで定義されますか</h3>
<p>コントローラは<code>api/controllers</code>フォルダの中に定義されます。このフォルダにはどんなファイルでも置いていいですがSailsのコントローラとして読み込まれるためにはファイル名は必ず<code>Controller.js</code>で<em>終わらなければ</em>なりません。慣習に則り、Sailsのコントローラは<a href="http://c2.com/cgi/wiki?PascalCase"><em>パスカルケース</em></a>で命名されます。そのためすべての単語（最初の単語も含め）は大文字で始まらなければなりません。例えばUserController.js, MyController.js や<code>SomeGreatBigController.js</code> はすべて正しいフォーマットのパスカルケース命名です。</p>
<p>もしもコントローラをグループ分けする必要がある場合<code>api/controllers</code>の中にサブフォルダーを作成することが出来ます。ただし、サブフォルダー名はルーティングの過程で<em>コントローラの名前の一部</em>として取り扱われます。(詳細は下記の&quot;Routing&quot;セクションをご覧ください。)</p>
<h3>コントローラはどんなファイルですか</h3>
<p>コントローラフォルダはアクション名をキーとしたJavascriptオブジェクトとして定義され、そのオブジェクトのキーの中身にアクションが入ります。以下にコントローラファイルの簡単な例を挙げます。:</p>
<pre><code class="language-javascript">module.exports = {
  hi: function (req, res) {
    return res.send("Hi there!");
  },
  bye: function (req, res) {
    return res.redirect("http://www.sayonara.com");
  }
};</code></pre>
<p>このコントローラには2つのアクションが定義されいます。アクション&ldquo;hi&rdquo;はテキストのレスポンスを返し、アクション&ldquo;bye&rdquo;は別のWebサイトへのリダイレクトを返します。<code>req</code>オブジェクトと<code>res</code>オブジェクトは<a href="https://github.com/expressjs">Express.js</a>でWebアプリケーションを書いたことのある人は誰でも馴染みあるところです。これはSailsはルーティングにあたってExpressを裏方で利用しているという設計上の利用です。Expressのミドルウエアとは違いSailsのコントローラは常にリクエストチェーンの最後になります。つまり、常に何らかのレスポンスないしエラーを返さなければならないということです。アクションメソッドの中で別の方針を使うことは可能ですが、この方針をとって構わない時には<a href="http://sailsjs.org/documentation/concepts/Policies">ポリシー</a>を利用することを強くおすすめします。</p>
<h3>「軽量な」コントローラ</h3>
<p>ほとんどのMVCフレームワークはコントローラを「軽量に」保つことを進めており、Sailsもその例外ではありませんが、（つまりSailsのコントローラ可能な限りシンプルにしておくべきです）ここで「なぜそうなのか」を知っておくのもいいでしょう。</p>
<p>コントローラのコートはトリガーやイベント本質的に独立しています。Sailsのようなバックエンドフレームワークでは、イベントは殆どの場合においてインカミングのリクエストです。そのためもしいくつかのコードを一つのコントローラアクションに書いてしまった場合リクエストのコンテキスト（つまり<code>req</code>オブジェクトと<code>res</code>オブジェクト）ごとに独立しているべきである各コードのスコープとは別のものになってしまいます。それは一時的には何とかなりますが、あとで「ちょっと違うアクション」やコマンドラインから呼び出したいときに困ったことになります。</p>
<p>そのため「軽量なコントローラ」の目指すものは再利用可能なコードが特定のスコープともつれ合ってしまっている状況を解消することです。Sailsにおいてこれを実現する方法はいろいろありますがコードをコントローラから独立させる最も一般的な方法は以下のとおりです。</p>
<ul>
<li>特定のモデルに対して特定のタスクを実行するためにカプセリングされたカスタムのモデルメソッドを書く。</li>
<li>特定の用途に限定して使われるタスクを実行するためにカプセリングされたファンクションをサービスとして書く。</li>
<li>もし複数のアプリケーションを通じて有用であるコードを見つけた場合は（時間があれば）nodeのモジュールにしましょう。そうすればあなたの組織を通じて利用することが出来るようになりますし、更に良いこととしてはもしそれをnpmとしてオープンソースで公開すれば誰かが使ってくれたり、メンテナンスを手伝ってくれたりします。</li>
</ul>
<docmeta name="uniqueID" value="Controllers464694">
<docmeta name="displayName" value="Controllers">