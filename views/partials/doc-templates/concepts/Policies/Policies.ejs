<h1>ポリシー</h1>
<h3>概要</h3>
<p>Sailsにおける「ポリシー」は認証とアクセスコントロールを行うための多機能なツールです。つまりポリシーはコントロータへのアクセスを許可したり拒否したりする動作を適切な粒度で定義できるのです。たとえばあなたがDropboxをつくろうとしているとしましょう。するとユーザにファイルをフォルダーにアップロードをさせる前にはユーザが<code>isAuthenticated</code>かどうかを確認して次に<code>canWrite</code>（フォルダへの書き込み権限を持っているか）を確認します。最後にアップロードしようとしてるフォルダーが<code>hasEnoughSpace</code>かどうかも確認するでしょう。</p>
<p>ポリシーはどんなものでも利用することが出来ます。つまりHTTP BasicAuthでも、サードパーティーのシングルサインオンでも、OAuth2.0でも、あるいはあなたが書いたオリジナルの認証・認可スキーマとでも利用することが出来ます。</p>
<blockquote>
<p>備考：ポリシーはコントローラーアクションに対して<strong>のみ</strong>提供され、ビューには適用されません。もしも<a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.routes.html">routes.js config file</a> でビューを直接指定指定した場合ポリシーは一切適用されません。ポリシーが確実に適用されるようにするにはビューを表示するコントローラを作成し、ルートからはそのコントローラを呼び出すようにしてください。</p>
</blockquote>
<h3>初めてのポリシーを書く</h3>
<p>ポリシーはSailsアプリケーションの<code>api/policies</code>で定義されます。それぞれのポリシーは一つのファンクションを持ちます。</p>
<p>中身を見てみると、ポリシーはまさにコントローラの<strong>手前で</strong>動作するConnect/Expresのミドルウエアなのです。ここでは好きなだけのチェーンを繋げることが出来ます。（そもそも、そういうふうにして使われるべきものなのですが）。理想的には一つのミドルウエアは<em>一つだけの</em>ことをチェックすべきです。</p>
<p>例えば先程述べた<code>canWrite</code>ポリシーは以下のようになります。</p>
<pre><code class="language-javascript">// policies/canWrite.js
module.exports = function canWrite (req, res, next) {
  var targetFolderId = req.param('id');
  var userId = req.session.user.id;

  Permission
  .findOneByFolderId( targetFolderId )
  .exec( function foundPermission (err, permission) {

    // Unexpected error occurred-- skip to the app's default error (500) handler
    if (err) return next(err);

    // No permission exists linking this user to this folder.  Maybe they got removed from it?  Maybe they never had permission in the first place?  Who cares?
    if ( ! permission ) return res.redirect('/notAllowed');

    // OK, so a permission was found.  Let's be sure it's a "write".
    if ( permission.type !== 'write' ) return res.redirect('/notAllowed');

    // If we made it all the way down here, looks like everything's ok, so we'll let the user through
    next();
  });
};</code></pre>
<h3>コントローラをポリシーで保護する</h3>
<p>SailsではビルドインのACL(アクセスコントロールリスト）が <code>config/policies.js</code>に用意されています。このファイルはポリシーとコントローラを紐付けるのに使われます。  </p>
<p>このファイルは<em>ディクレラテブ</em>です。すなわち、ここではアプリケーションにおけるパーミッションが<em>どのようになっているのか</em>を記述するのであり、<em>どのように動作するのか</em>を記述するものではありません。これは開発を始めたばかりの開発者でも何が起こっているのかを理解しやすくというメリットばかりではなく、必然的に何度も起こるであろうプログラムの変更に柔軟に対応できるようにするという狙いもあるのです</p>
<p><code>config/policies.js</code>ファイルはコントローラネーム（あるいはグローバル設定する場合は<code>'*'</code>）をキーとマップすべきオブジェクト名を値とするJavascriptオブジェクトをエクスポートしなければなりません。詳しくは以下の例をご覧ください・</p>
<h5>特定のコントローラアクションにポリシーを適用する:</h5>
<pre><code class="language-js">{
  ProfileController: {
      // Apply the 'isLoggedIn' policy to the 'edit' action of 'ProfileController'
      edit: 'isLoggedIn'
      // Apply the 'isAdmin' AND 'isLoggedIn' policies, in that order, to the 'create' action
      create: ['isAdmin', 'isLoggedIn']
  }
}</code></pre>
<h5>コントローラ全体にポリシーを適用する:</h5>
<pre><code class="language-js">{
  ProfileController: {
    // Apply 'isLoggedIn' by default to all actions that are NOT specified below
    '*': 'isLoggedIn',
    // If an action is explicitly listed, its policy list will override the default list.
    // So, we have to list 'isLoggedIn' again for the 'edit' action if we want it to be applied.
    edit: ['isAdmin', 'isLoggedIn']
  }
}</code></pre>
<blockquote>
<p><strong>備考:</strong> デフォルトのポリシーマッピングはカスケードしたりtrickle downしません。コントローラのアクションに指定されたマッピングはデフォルトのマッピングを上書きします。</p>
</blockquote>
<h5>明示的にマッピングされたアクション以外に対してポリシーを適用する:</h5>
<pre><code class="language-js">{
  // Apply 'isLoggedIn' to all actions by default
  '*': 'isLoggedIn',
  ProfileController: {
      // Apply 'isAdmin' to the 'foo' action.  'isLoggedIn' will NOT be applied!
      'foo': 'isAdmin'
  }
}</code></pre>
<blockquote>
<p>デフォルトのポリシーは明示的にマッピングされている以外のいかなるコントローラやアクションには適用されません。</p>
</blockquote>
<h3>ビルトインのポリシー</h3>
<p>SailsにはGlobalに割り当てたり、指定したコントローラやアクションに割り当てたりすることができる２つのコントローラがあります。</p>
<ul>
<li><code>true</code>: パブリックアクセス (マップされたコントローラやアクションにはだれでもアクセスできる。)</li>
<li>
<p><code>false</code>: アクセス<strong>不可</strong>  (マップされたコントローラやアクションには<strong>だれも</strong>アクセスできない)</p>
<p><code>'*': true</code> はすべてのコントローラやアクションに対するデフォルトのポリシーです。本番環境では不用意にアクションやコントローラが露出してしまう事を防ぐためにこれを<code>false</code> にするといいでしょう。</p>
</li>
</ul>
<h5>コントローラにいくつかのポリシーを適用する:</h5>
<pre><code class="language-javascript">  // in config/policies.js

  // ...
  RabbitController: {

    // Apply the `false` policy as the default for all of RabbitController's actions
    // (`false` prevents all access, which ensures that nothing bad happens to our rabbits)
    '*': false,

    // For the action `nurture`, apply the 'isRabbitMother' policy
    // (this overrides `false` above)
    nurture : 'isRabbitMother',

    // Apply the `isNiceToAnimals` AND `hasRabbitFood` policies
    // before letting any users feed our rabbits
    feed : ['isNiceToAnimals', 'hasRabbitFood']
  }
  // ...</code></pre>
<p>上で挙げた<code>isNiceToAnimals</code>はこのようになっているはです。(このファイルは<code>policies/isNiceToAnimals.js</code>に設置されます。):</p>
<pre><code class="language-javascript">module.exports = function isNiceToAnimals (req, res, next) {

  // `req.session` contains a set of data specific to the user making this request.
  // It's kind of like our app's "memory" of the current user.

  // If our user has a history of animal cruelty, not only will we 
  // prevent her from going even one step further (`return`), 
  // we'll go ahead and redirect her to PETA (`res.redirect`).
  if ( req.session.user.hasHistoryOfAnimalCruelty ) {
    return res.redirect('http://PETA.org');
  }

  // If the user has been seen frowning at puppies, we have to assume that
  // they might end up being mean to them, so we'll
  if ( req.session.user.frownsAtPuppies ) {
    return res.redirect('http://www.dailypuppy.com/');
  }

  // Finally, if the user has a clean record, we'll call the `next()` function
  // to let them through to the next policy or our controller
  next();
};</code></pre>
<p>うさぎを守るということ（とても立派なことだと思います）に加え、ポリシーにはいくつかのユースケースが有ります。:</p>
<ul>
<li>クッキーベースの認証</li>
<li>ロールベースのアクセス管理</li>
<li>容量ベースでのファイルアップロード制限。</li>
<li>考えられるその他すべての認証スキーム</li>
</ul>
<docmeta name="uniqueID" value="Policies766425">
<docmeta name="displayName" value="Policies">