<h1>Sailsのセッションを理解する</h1>
<p><strong>セッション</strong>の目的はいくつかのコンポーネントを同期することで同じユーザエージェントの複数のリクエストの間で情報を共有することです。</p>
<blockquote>
<p><strong>ユーザエージェント</strong>はデバイス上（ブラウザタブやスマートフォンアプリケーション、冷蔵庫など）においてあなたを代表するソフトウエア（ブラウザやネイティブアプリケーション）です。これはクッキーやアクセストークンと1対1で結びついています。 </p>
</blockquote>
<p>リクエストとレスポンスのサイクルは<strong>ステートレス</strong>ですのでセッションは非常に有用です。リクエストとレスポンスのサイクルがステートレスとみなされる理由は本質的にはクライアントもサーバも特定のリクエストと別のリクエストを区別するデータを持たないからです。そのためリクエストとレスポンスのライフサイクルはユーザエージェントのリクエストに対するレスポンスが作成された時点で（例：<code>res.send()</code>）終了します。</p>
<p>ちなみに、これから議論する内容はブラウザユーザーエージェントでの話です。Sailsのなかでセッションは好きなような目的で使えることができますが、一般的に使われる目的は単にユーザの認証を保存するために使われる目的です。認証とはユーザーエージェントが何らかのアイデンティティを持っていることを確認する作業です。例えば何らかの保護された機能を使うときにブラウザタブがデータベースの中の特定のユーザーデータに結びついているかを確認しなければならないかもしれません。もし私がユニークな名前とパスワードを提供すればあなたは名前を探しだして（暗号化されていればいいのですが、）保存されているパスワード比較することができます。もしそれらが一致すれば私は認証されたことになります。しかし、どうやって「認証されていること」を保存すればいいのでしょうか。そこでセッションの出番なのです。</p>
<h3>セッションは何から出来ているのでしょうか</h3>
<p>Sailsでのセッションの実装は3つの主な要素から成り立っています。s:</p>
<ol>
<li>情報を保管する<strong>セッションストア</strong></li>
<li>セッションを管理するミドルウエア</li>
<li>セッションIDを保管しアクセスごとに送信されるクッキー(デフォルトでは<code>sails.sid</code>)</li>
</ol>
<p>この<strong>セッションストア</strong>はメモリの中（例えばSailsのデフォルトのセッションストア）にあってもデータベースの中（Sailsにはこの目的でのRedisのサポートがあります）にあっても構いません。Sailsはセッションを管理する目的でConnectミドルウエアの一番上にミドルウエアを構築し、それはユーザエージェントのセッションID(<code>sid</code>)を保管するために<strong>クッキー</strong>を使います。</p>
<h3><em>request</em>と<em>response</em>と<em>session</em>の日常</h3>
<p><code>request</code>がSailsに送信されるとセッションミドルウエアによってリクエストヘッダーがパースされます。 </p>
<h5>シナリオ１: リクエストヘッダーが<em>cookie property</em>を持たない場合</h5>
<p>もしヘッダーがクッキープロパティを持たない場合、<code>sid</code>がセッションの中に作成され、デフォルトのセッションディレクトリが<code>req</code>（例えば<code>req.session</code>）に追加されます。この時点でセッションプロパティを変更（通常コントローラアクションで）することが出来ます。例えば、以下の様な<em>login</em> を見てみましょう。 </p>
<pre><code class="language-javascript">module.exports = {

  login: function(req, res) {

    // ここに認証コードが入ります。

    // もし、認証に成功したら

    req.session.userId = foundUser.id;   // データベースから返ってきたものです

    return res.json(foundUser);

  }
}</code></pre>
<p><code>req.session</code>に<code>userId</code>が追加されました。  </p>
<blockquote>
<p><strong>備考:</strong> レスポンスが返されるまでプロパティは<em>セッションストア</em>に保存されませんし、他のリクエストから利用可能にもなりません。</p>
</blockquote>
<p>一度レスポンスが送信されるとすべての新規リクエストは<code>req.session.userId</code>にアクセス可能になります。クッキーの<em>プロパティ</em>はリクエストヘッダーに存在しませんでしたからこのためにクッキーが新しく作成されます。</p>
<h5>シナリオ2: リクエストヘッダーが<code>Sails.sid</code>の<em>property</em>を持っている時</h5>
<p>ユーザエージェントが次のリクエストをスるとき、クッキーに格納された<code>Sails.sid</code>は自動的に確認されセッションストアに保管された<code>sid</code>とマッチされればセッションストアの内容は<code>req</code>ディレクトリ(例えば<code>req.session</code>)のプロパティに保存されます。<code>req.session</code>のプロパティ(例：<code>req.session.me</code>)にアクセスしたりそこに内容を追加したり(例：<code>req.session.me == someValue</code>)出来ます。セッションストアの値は変わることがありますが通常<code>Sails.sid</code>と<code>sid</code>は変わることがありません。</p>
<h3><code>Sails.sid</code>はいつ変更されますか</h3>
<p>デフォルトではセッションストアは<em>インメモリ</em>です。そのためSailのサーバを閉じた時に現在のセッションデータはセッション天国に行ってしまいます。（つまりセッションストアは消え去ります）Sailsがリスタートした時仮にユーザエージェントのリクエストのクッキーの中に<code>Sails.sid</code>が存在してもセッションストアには<code>sid</code>はありません。そのため新しい<code>sid</code>が生成され、クッキーの中身が置き換えられます。<code>Sails.sid</code>はユーザーエージェントのクッキーが期限切れになったり削除された時にも変更されます。</p>
<blockquote>
<p>Sailsのクッキーのライフスパンは<code>projectName/config/session.js</code>の<code>cookie.maxAge</code>プロパティを書き換えることでデフォルトから変更することができます（例えば有効期限切れしないなど）</p>
</blockquote>
<h3>セッションストアに<em>Redis</em>を利用する</h3>
<p>Redisはキーバリュー型のデータベースパッケージでありセッションストアをSailsのインスタンスから分離するのに使えます。セッションの設定をこうすることには２つのメリットが有ります。一つはSailsがリスタートしてもセッションデータが残るということです。もう一つはもしもロードバランサの後ろに複数のSailsインスタンスを用意した時にも全てのインスタンスが統合されたセッションストアにアクセスすることが出来ることです。</p>
<p>Redisをセッションストアにするのを有効化する際はお好みのテキストエディタで<code>projectName/config/session.js</code>を開いて<code>adapter</code>プロパティのコメントアウトを外します。これだけです。開発中はRedisインスタンスが同じマシーンで動き続けている限り、SailsはセッションストレージとしてRedisを使います。<code>projectName/config/session.js</code>で以下のオプションパラメータを設定することで別のRedisインスタンスを指すことも出来ます。:</p>
<pre><code>  // host: 'localhost',
  // port: 6379,
  // ttl: &lt;redis session TTL in seconds&gt;,
  // db: 0,
  // pass: &lt;redis auth password&gt;,
  // prefix: 'sess:',
</code></pre>
<p>これらのプロパティの設定に関してのさらなる情報は<a href="https://github.com/tj/connect-redis"><a href="https://github.com/tj/connect-redis">https://github.com/tj/connect-redis</a></a>をご覧ください。</p>
<h4>どのようにセッションのクッキーが作られるかの詳細</h4>
<p>クッキーの中身は設定可能な<em>secret</em>と<code>sid</code>をハッシュすることで作成されます、</p>
<blockquote>
<p><code>projectName/config/session.js</code>でセッションに使う<code>secret</code>プロパティを変更することが出来ます。 </p>
</blockquote>
<p>Sailsの<code>sid</code> (例：<code>Sails.sid</code>)はプレーンな<code>sid</code>の後に続いて<code>sid</code>と<code>secret</code>を合わせたもののハッシュがつながっているものになります。これを具体的にするために例を上げてみましょう。Sailsは<code>234lj232hg234jluy32UUYUHH</code>と<code>session secret</code>である<code>9238cca11a83d473e10981c49c4f</code>からなる<code>sid</code>を作成するとします。Sailsは単純にこれらの文字列を組み合わせて<code>AuSosBAbL9t3Ev44EofZtIpiMuV7fB2oi</code>という<code>signature</code>を作ります。ですから、<code>Sails.sid</code>は<code>234lj232hg234jluy32UUYUHH.AuSosBAbL9t3Ev44EofZtIpiMuV7fB2oi</code>になり、レスポンスヘッダーで<code>set-cookie</code>プロパティを送信することでユーザーエージェントのクッキーに保管されます。</p>
<p><strong>これは何を防いでいるのですか?</strong> これはユーザの<code>sid</code>を推測困難にすることで攻撃者が知っている<code>sid</code>を利用してユーザになりすした認証リクエストを送信するのを防ぎます。これがもし許されるとユーザーがセッション経由でログインしている際に攻撃者が<code>sid</code>を悪用することが可能になってしまいます。</p>
<docmeta name="displayName" value="Sessions">