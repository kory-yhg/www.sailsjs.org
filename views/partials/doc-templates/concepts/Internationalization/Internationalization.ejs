<h1>国際化</h1>
<h3>概要</h3>
<p>もしあなたのアプリケーションが世界中の人やシステムとふれあうとしたら国際化とローカライゼーションはあなたの国際戦略の中で大切な位置を占めるでしょう。Sailsは<a href="https://github.com/mashpie/i18n-node">i18n-node</a>のおかげでユーザの言語プリファレンスの検知及び静的ワードの翻訳のサポートを内蔵しています。(<a href="https://www.npmjs.org/package/i18n">npm</a>).</p>
<!--
  もしかしたらカバーすべきかも:
  *(ただ、これを含むのは明確でそれほど有用だったり大切だったししないかもしれません。自信はありませんが便利というよりややこしいかも。*
このビルトインのサポートは**動的にレンダリングされる**（**スタティック**でない）コンテントに対してです。予めサーバで処理されたレスポンスに対してのみこれを使うことが出来ます。別の言い方をすればこの翻訳機能はビューやコントローラ、ポリシーでは使えますがassetフォルダの中身に関しては使えません。
幾つかの原因（明らかな例としてはSEO対策やフラグメンテーションの理由など）から文字列の翻訳をフロントエンド（例えば：ブラウザやiOSアプリなど）で行うことは推奨されません。もちろん、それでもやれないことはないですがこのビルトインサポートをi18nのフックからは使わないでください。
-->
<h3>利用方法</h3>
<p>ビューで:</p>
<pre><code class="language-ejs">&lt;h1&gt; &lt;%= __('Hello') %&gt; &lt;/h1&gt;
&lt;h1&gt; &lt;%= __('Hello %s, how are you today?', 'Mike') %&gt; &lt;/h1&gt;
&lt;p&gt; &lt;%= i18n('That\'s right-- you can use either i18n() or __()') %&gt; &lt;/p&gt;</code></pre>
<p>コントローラやポリシーで:</p>
<pre><code class="language-javascript">req.__('Hello'); // =&gt; Hola
req.__('Hello %s', 'Marcus'); // =&gt; Hola Marcus
req.__('Hello {{name}}', { name: 'Marcus' }); // =&gt; Hola Marcus</code></pre>
<p>あるいはもしロケールIDがわかっているとしたら<code>sails.__</code>を使うことでアプリケーションの中のどこからでも翻訳できます。:</p>
<pre><code class="language-javascript">sails.__({
  phrase: 'Hello',
  locale: 'es'
});
// =&gt; 'Hola!'</code></pre>
<h3>追加のオプション</h3>
<p>国際化とローカライゼーションの設定は <a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.i18n.html"><code>sails.config.i18n</code></a>で設定されています。このファイルを編集する典型的な例はあなたのアプリケーションのサポートする言語や翻訳ファイルの位置を変更する時です。:</p>
<pre><code class="language-javascript">// どのロケールがサポートされますか?
locales: ['en', 'es'],

// 翻訳がいるはどこに置かれていますか?
localesDirectory: '/config/locales'</code></pre>
<h3>Sailのデフォルトの国際化サポートを無効化、もしくはカスタマイズする。</h3>
<p>もちろんプロジェクトの中のどこでも好きなNodeモジュールを<code>require()</code>して、好きな国際化の方法を取ることが出来ます。</p>
<p>しかし、ここで理解するに値すべきことはSailsは<a href="https://github.com/mashpie/i18n-node">node-i18n</a>の実装を<a href="http://sailsjs.org/documentation/concepts/Internationalization">i18n hook</a>で行っているので<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md"><code>loadHooks</code></a>や<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md"><code>hooks</code></a> の設定を使ってこれを完全に無効化したり、オーバライドすることが出来ます。</p>
<h3>クライアントでの国際化に関して</h3>
<p>ここに上げたテクニックはサーバーサイドのビューではとてもうまく動きます。しかし、静的なテンプレートをCDNや静的ホストから提供するリッチクライアント、（例えばパフォーマンス重視のSPAやPhonegapアプリやGoogleエクステンションなど）ではどうでしょうか。</p>
<p>実はSailsのi18nサポートは翻訳済みのテンプレートをブラウザに届ける際にも再利用することが出来ます。もしSailの国際化機能を<em>クライアントサイドテンプレート</em>で使いたいときはフロントエンドテンプレートを<code>/views</code>のサブディレクトリに配置してください。</p>
<ul>
<li>開発モードでは、Sailsプロジェクトですでにデフォルトでインストールされているgrunt-contrib-watchによってテンプレートファイルが編集されたり、文字列ファイルが編集されるたびに、テンプレートアイルを翻訳してプレコンパイルしなおさなければなりません。</li>
<li>プロダクションモードではlift()を行う時点で全てのテンプレートが翻訳され、プレコンパイルされることになります。読み込み時間を気にする用途（例えばモバイルWebアプリケーション）では翻訳され、プレコンパイルされ、最小化されたテンプレートをCloudfrontのようなCDNにアップロードして更なるパフォーマンスの追求を行うことが出来ます。</li>
</ul>
<docmeta name="displayName" value="Internationalization">