<h1>ロケール</h1>
<h3>概要</h3>
<p>i18nフックはプロジェクトの中の&quot;locales&quot;ディレクトリ(デフォルトでは<code>config/locales</code>にあります)の中にあるJSONフォーマットの翻訳ファイルを読み込みます。それぞれのファイルはSailsバックエンドがサポートすべき<a href="http://en.wikipedia.org/wiki/Locale">locale</a>（通常は言語）に対応します。</p>
<p>これらのファイルはあなたがビューやコントローラの中で使えるロケール特有の文字列を（JSONのキー・バリューのペアで）含んでいます。</p>
<p>以下にロケールファイルの例を挙げます (<code>config/locales/ja.json</code>):</p>
<pre><code class="language-json">{
    "Hello!": "こんにちは!",
    "Hello %s, how are you today?": "こんにちは%sさん、お元気ですか。"
}</code></pre>
<p>文字列ファイルの中のキー(例:&quot;Hello %s, how are you today?&quot;)は<strong>大文字と小文字を区別し</strong>、厳密なマッチングが必要なことにご留意ください。ここには幾つかの違ったアプローチがありますが、どれが一番いいのかはそれは翻訳ファイルとHTMLファイルに関して、だれがどのように編集することが多いかということによって変わってきます。特に、もし翻訳ファイルを手動で編集する機会が多い場合、シンプルな全て小文字のキー名にすることでメンテナンスがしやすくなるでしょう。</p>
<p>例えば以下が別のやり方における<code>config/locales/ja.json</code>の例です:</p>
<pre><code class="language-json">{
    "hello": "こんにちは!",
    "hello-how-are-you-today": "こんにちは%sさん、お元気ですか。"
}</code></pre>
<p>そしてこれが <code>config/locales/en.json</code>です。:</p>
<pre><code class="language-json">{
    "hello": "Hello!",
    "hello-how-are-you-today": "Hello, how are you today?"
}</code></pre>
<p>ロケール文字列をネストすることも出来ます。しかしより良いアプローチとしてはネストされた文字列を表すために<code>.</code>を使うことです。例えばuserコントローラのindexページで使うラベルのリストです。:</p>
<pre><code class="language-json">{
    "user.index.label.id": "User ID",
    "user.index.label.name": "User Name"
}</code></pre>
<h3>リクエストの理想的なロケールを検出、上書きする。</h3>
<p>現在のリクエストで使われているロケールを判断するには<a href="https://github.com/mashpie/i18n-node#getlocale"><code>req.getLocale()</code></a>を使います。</p>
<p>自動検出されたロケールを上書きするには<a href="https://github.com/mashpie/i18n-node#setlocale"><code>req.setLocale()</code></a>を利用し、これを新しいロケールのユニークコードとともに呼び出します。 例:</p>
<pre><code class="language-js">// Force the language to German for the remainder of the request:
req.setLocale('de');
// (this will use the strings located in `config/locales/de.json` for translation)</code></pre>
<p>デフォルトではnode-i18nは言語ヘッダーを見ることで望ましい言語を検出します。言語ヘッダーはユーザーのブラウザ設定で決められ、殆どの場合においてそれは正しいのでロケールの上書きに関しては柔軟な対応が可能にするべきです。</p>
<p>例えば、もしあなたのアプリでユーザが任意の言語を選ぶことが出来るようにする場合、まずユーザセッションにおけるカスタム言語を確認する<a href="http://beta.sailsjs.org/#/documentation/concepts/Policies">ポリシー</a> ポリシーを作り、もしそれが存在する場合、その後に続くポリシーやコントローラ、ビューで使う適切なロケールをセットすることになります。:</p>
<pre><code class="language-js">// api/policies/localize.js
module.exports = function(req, res, next) {
  req.setLocale(req.session.languagePreference);
  next();
};</code></pre>
<!--
  その他に、別の拡張したサンプルです。:
  (todo: 最新のPullでは別のガイドページに以降する。)
```js
// config/routes.js
module.export.routes = {
  '/:lang/': 'MyController.index',
  '/:lang/help': 'MyController.help',
  '/:lang/contact': 'MyController.contact',
  // ...etc...
}
// config/policies.js
module.exports.policies = {
  '*' : 'localize'
}
// api/policies/localize.js
module.exports = function(req, res, next) {
   req.setLocale(req.param('lang'));
   next();
};
```
-->
<docmeta name="displayName" value="Locales">