<h1>スケーリング</h1>
<p>直近の予定としてトラフィックの増大を想定しているなら（あるいはすでに多くのトラフィックがあるなら）
多くの人のアクセスを受け入れられるようなスケーラブルなアーキテクチャでのセットアップを行いましょう。</p>
<h3>ベンチマーク</h3>
<p>ほとんどの部分に関してSailsのベンチマークは他のConnectやExpress、Socket.ioのアプリケーションと全く同じです。このことはいくつ管異なる環境下で確認されており、直近のものは<a href="http://serdardogruyol.com/?p=111">これ</a>です。もしあなた自身でおこなったベンチマークの結果をシェアしてもいいならgithubひプルリクエストを送ってください。</p>
<h3>アーキテクチャ例</h3>
<pre><code>                       Sails.js server
                             ....                 
                    /  Sails.js server  \      /  Database (e.g. Mongo, Postgres, etc)
Load Balancer  &lt;--&gt;    Sails.js server    &lt;--&gt;    Socket store (Redis)
                    \  Sails.js server  /      \  Session store (Redis)
                             ....                 
                       Sails.js server</code></pre>
<h3>クラスタでのデプロイのためにアプリケーションを設定する</h3>
<ul>
<li>モデルに使われているデータベース（MySQLやPostgres、Mongoなど）がスケーラブルなこと（シェーディングやクラスタリングがなされている）を確認して下さい。</li>
<li>共有のセッションストアを利用する設定をしてください。
<ul>
<li>Radisを使った実装がサポートされています。(<code>config/session.js</code>の<code>adapter</code>オプションをご確認ください)</li>
</ul></li>
<li>もしもSocketを使ってるなら:
<ul>
<li>共有のソケットストアを利用する設定をしてください。</li>
<li>Radisを使った実装がサポートされています。(config/sockets.jsの<code>adapter</code>オプションをご確認ください</li>
<li>Socket.ioのデフォルト設定ではまず<a href="http://en.wikipedia.org/wiki/Push_technology#Long_polling">long-polling</a>を使って接続を試みるようになっています。これが動作するにするためサーバー環境はsticky load-balancing (sticky sessionsとも言います)を<a href="http://socket.io/blog/introducing-socket-io-1-0/#scalability">サポートしなければならない</a>、さもなければコネクションがWebsockets使用のものにアップグレードされるまで（そしてWebsocketsが利用可能なとき以外は）失敗します。
<strong>Heroku</strong>ではベータ版のsticky load-balancing機能を <a href="https://devcenter.heroku.com/articles/session-affinity">明示的に有効化</a>しなければなりません。
stickky load balancingが無い環境では<a href="https://github.com/balderdashy/sails-docs/blob/v0.11/reference/sails.config/sails.config.sockets.md">config/sockets.js</a>で<code>transports</code>設定を<code>['websocket']</code>にしてwebsocketの使用を強制することでlong-pollingを避けなければなりません。クライアント側でも透過性の設定をしなければなりません。（もし<code>sails.io.js</code>を使っているのであれば<code>sails.io.js</code>をインクルードした直後に<code>&lt;script&gt;io.sails.transports=['websocket']&lt;/script&gt;</code>を追加するだけで簡単にできます） この問題に対する更に劇的な読み物としては<a href="https://github.com/Automattic/engine.io/issues/261">このスレッド</a>をお読みください。</li>
<li>その他の依存関係にある部分が共有メモリに依存していないことを確認してください。</li>
</ul></li>
</ul>
<h3>Sailsのクラスタを複数台のサーバにアップロードする</h3>
<ul>
<li>ロードバランサの後ろに複数個のインスタンス（つまりプロジェクトが動いているサーバ）をセットアップする。
<ul>
<li>それぞれのインスタンスで<code>forever</code>を使ってSailsを起動する。</li>
<li>ロードバランサーに関してのさらなる詳細は: <a href="https://en.wikipedia.org/wiki/Load_balancing_(computing">https://en.wikipedia.org/wiki/Load_balancing_(computing</a>)</li>
</ul></li>
<li>ロードバランサーがSSLを終端するように設定する
<ul>
<li>そのためSails側でSSLを設定する必要はありません。（通信はすでに復号されています。）</li>
</ul></li>
</ul>
<docmeta name="uniqueID" value="Scaling291270">
<docmeta name="displayName" value="Scaling">