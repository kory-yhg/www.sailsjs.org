<h1>デプロイ</h1>
<h3>概要</h3>
<h4>デプロイする前に</h4>
<p>アプリケーションをデプロイする前に以下のことを自問してみてください。</p>
<ul>
<li>あなたが予期している通信は何ですか。</li>
<li>契約上（SLAなど）、稼働時間の補償に適合する必要がありますか。</li>
<li>どんな種類のフロントエンドアプリかあなたのインフラを「叩いて」きますか。
<ul>
<li>Androidアプリケーション</li>
<li>iOSアプリケーション</li>
<li>デスクトップWebブラウザ</li>
<li>モバイルWebブラウザ (タブレットや携帯、iPadminiなど)</li>
<li>テレビ？時計？トースター？。。。</li>
</ul></li>
<li>それらはどんなものをリクエストしてきますか。
<ul>
<li>JSON?</li>
<li>HTML?</li>
<li>XML?</li>
</ul></li>
<li>Socket.ioを利用してリアルタイムのPublish/Subscribeデザインパターンに対応する必要がありますか。
<ul>
<li>例：チャット、リアルタイム分析、アプリ内通知・メッセージ</li>
</ul></li>
<li>クラッシュした時やエラーが起こった時どうやって監視しますか。
<ul>
<li>Sailsのログ設定を見てみてください。</li>
</ul></li>
</ul>
<h4>1台のサーバにデプロイする</h4>
<p>Node.jsはものすごく速いです。そのため来るべきトラフィックをハンドルするためには1台のサーバーで十分です（少なくとも最初のうちは）</p>
<h5>設定</h5>
<ul>
<li>すべてのプロダクション環境の設定は<code>config/env/production.js</code>に保存されています。</li>
<li>アプリケーションが80番ポートで動作するように設定してください（Nginxのようなプロキシを使わない時は）もしNginxを使っているときはアプリケーションにWebSocketをリレーするように設定してください。Nginxの<a href="http://nginx.org/en/docs/http/websocket.html">WebSocket proxying</a>ドキュメントでこれに関する手順を見ることが出来ます。</li>
<li>すべてのcssとjsがバンドルされるようにプロダクション環境を設定し、内部サーバが適切な環境に切り替わるようにしてください。（<a href="https://github.com/balderdashy/sails-wiki/blob/0.9/assets.md">linker</a>が必要です）</li>
<li>データベース設定がプロダクション環境に設定されていることを確認して下さい。これはあなたがMySQLのようなリレーショナルデータベースを利用しているときは特に重要です。なぜならSailsはプロダクション環境で実行された時にはすべてのモデルを<code>migrate:safe</code>に設定します。つまり自動マイグレーションは行われません。データベースの作成は以下の手順でできます。
<ul>
<li>データベースをサーバ上に作成しローカル上でそのデータベースへの接続をするように設定し、更に<code>migrate:alter</code>の設定をしたうえでSailsを起動します。こレにより自動的にセットアップできます。</li>
<li>データベースサーバにリモートから接続できない場合は単純にローカルのスキーマをダンプしてデータベースサーバでインポートしてください。</li>
</ul></li>
<li>POST, PUT, DELETEのリクエストに対して<a href="http://sailsjs.org/documentation/concepts/Security/CSRF.html?q=enabling-csrf-protection">CSRF防御</a>を適用します。</li>
<li>SSLを有効化します。</li>
<li>もしSocketを使ってる時は:
<ul>
<li><code>config/sockets.js</code>を適切に設定し、<a href="https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO#recommended-production-settings">ここ</a>に書いているsocket.ioが推奨するプロダクション環境での設定に適合するようにします。</li>
<li>例：<code>flashsocket</code> transportを有効化する</li>
</ul></li>
</ul>
<h5>Deploy</h5>
<p>プロダクション環境ではSailsがクラッシュしてもデーモンが走り続けられるように、<code>sails lift</code>を直接使う代わりにforeverかPM2を使います。</p>
<ul>
<li>foreverをインストールする: <code>sudo npm install -g forever</code>
<ul>
<li>foreverについての詳細: <a href="https://github.com/nodejitsu/forever">https://github.com/nodejitsu/forever</a></li>
</ul></li>
<li>あるいはPM2をインストールする: <code>sudo npm install pm2 -g --unsafe-perm</code>
<ul>
<li>PM2についての詳細: <a href="https://github.com/Unitech/pm2">https://github.com/Unitech/pm2</a> </li>
</ul></li>
<li>アプリケーションディレクトリーから<code>forever start app.js --prod</code>また<code>pm2 start app.js -x -- --prod</code>を実行してサーバを起動する。
<ul>
<li>これは<code>sails lift --prod</code>と同じです。しかしこのようにすることでSailsがクラッシュしても自動的に復旧します。</li>
</ul></li>
</ul>
<docmeta name="uniqueID" value="Deployment402941">
<docmeta name="displayName" value="Deployment">