<h1>ローカル</h1>
<p>特定のビューからアクセスすることの出来る変数を<code>locals</code>と言います。ローカルとはビューから <em>アクセス可能な</em> サーバサイドデータを意味します。ローカルは実際に利用しているビューエンジンごとに決められた特殊な構文によって明示的に呼び出されないかぎりは実際にコンパイル済みのHTMLに <em>含まれている</em> わけではありません。</p>
<pre><code class="language-ejs">&lt;div&gt;Logged in as &lt;a&gt;&lt;%= name %&gt;&lt;/a&gt;.&lt;/div&gt;</code></pre>
<h5>ビューからローカルを使う</h5>
<p>ローカルにアクセスするための文法はビューエンジンごとに異なります。EJSでは特別なテンプレートマークアップ (例： <code>&lt;%= someValue %&gt;</code>)を使うことでビューにローカルをインクルードします。</p>
<p>EJSには3種類のテンプレートタグがあります:</p>
<ul>
<li><code>&lt;%= someValue %&gt;</code>
<ul>
<li>ローカルの中の<code>someValue</code>をエスケープしたうえで文字列としてインクルードします。</li>
</ul></li>
<li><code>&lt;%- someRawHTML %&gt;</code>
<ul>
<li>ローカルの中の<code>someRawHTML</code>をエスケープせずに読み込みます。</li>
<li>ご注意ください！これを使うことで何が起こるかわからない場合、XSS攻撃の脆弱性を作りこんでしまう危険性があります。</li>
</ul></li>
<li><code>&lt;% if (!loggedIn) { %&gt;  &lt;a&gt;Logout&lt;/a&gt;  &lt;% } %&gt;</code>
<ul>
<li>ビューがコンパイルされた時に<code>&lt;% ... %&gt;</code> の中のjavascriptを実行します。</li>
<li>条件式(<code>if</code>/<code>else</code>)やデータのループ(<code>for</code>/<code>each</code>)を使うときに便利です。</li>
</ul></li>
</ul>
<p>以下に2つのロケール<code>user</code>と<code>corndogs</code>を使ったビュー(<code>views/backOffice/profile.ejs</code>)の例を挙げます。:</p>
<pre><code class="language-html">&lt;div&gt;
  &lt;h1&gt;&lt;%= user.name %&gt;'s first view&lt;/h1&gt;
  &lt;h2&gt;My corndog collection:&lt;/h2&gt;
  &lt;ul&gt;
    &lt;% _.each(corndogs, function (corndog) { %&gt;
    &lt;li&gt;&lt;%= corndog.name %&gt;&lt;/li&gt;
    &lt;% }) %&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
<blockquote>
<p>ここで別のローカル<code>_</code>にお気づきのことと思います.Sailsはデフォルトで ローダッシュ(<code>_</code>)を含む幾つかローカルを自動的にビューに渡します。  </p>
</blockquote>
<p>もし渡したいデータが完全に静的な場合、コントローラは必要ありません。つまりプロジェクトの<code>config/routes.js</code>のにビューとそのローカルをハードコード出来るのです。すなわち:</p>
<pre><code class="language-javascript">  // ...
  'get /profile': {
    view: 'backOffice/profile',
    locals: {
      user: {
        name: 'Frank',
        emailAddress: 'frank@enfurter.com'
      },
      corndogs: [
        { name: 'beef corndog' },
        { name: 'chicken corndog' },
        { name: 'soy corndog' }
      ]
    }
  },
  // ...</code></pre>
<p>一方で多くのシナリオでデータはダイナミックでしょうから、モデルからそれらのデータを読み込むためのコントローラを用意してその後に<a href="http://sailsjs.org/documentation/reference/res/res.view.html">res.view()</a>メソッドを利用しそのデータをビューに受け渡す必要があります。</p>
<p>ここで、モデルはすでにセットアップされており、あるルートをあるコントローラアクションに紐付けるとします。ここで以下のようにビューを受け渡すことが出来ます。:</p>
<pre><code class="language-javascript">// in api/controllers/UserController.js...

  profile: function (req, res) {
    // ...
    return res.view('backOffice/profile', {
      user: theUser,
      corndogs: theUser.corndogCollection
    });
  },
  // ...</code></pre>
<docmeta name="uniqueID" value="Locals453748">
<docmeta name="displayName" value="Locals">