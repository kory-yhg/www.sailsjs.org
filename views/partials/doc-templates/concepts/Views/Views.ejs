<h1>ビュー</h1>
<h3>概要</h3>
<p>Sailsではビューは <em>サーバー上で</em> コンパイルされ、HTMLページに挿入されるテンプレートのことです。多くの場合、ビューはHTTPリクエストに対するレスポンスとして利用されます。（例えばホームページを表示するような使い方です。)</p>
<p>また、その他の方法としてはビューはバックエンドコードの中で文字列として直接取得されます。(<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md"><code>sails.renderView()</code></a>をご覧ください。) 例えばHTMLメールを送信したり、レガシーなAPIを利用する際に大きなXML文字列を使ったりする場合にです。</p>
<h5>ビューを作成する</h5>
<p>デフォルトではSailsはビューエンジンとしてEJS (<a href="http://embeddedjs.com/">Embedded Javascript</a>)を利用するように設定されています。EJSの構文はとても慣習的ですので、もしPHPやASP、ERB、GSP,JSPなどの言語を使ったことがある人ならすぐに何をしているかがわかるでしょう。</p>
<p>別のエンジンを利用したい場合、様々な選択肢があります。Sailは<a href="https://github.com/visionmedia/consolidate.js/">Consolidate</a>を通じ<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md">Express</a>と互換性のある全てのテンプレートエンジンを利用することが出来ます。</p>
<p>ビューはデフォルトでは<a href="http://sailsjs.org/documentation/anatomy/myApp/views"><code>views/</code></a>フォルダーで定義されますが、他のSailsのデフォルトパスと同じように<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md">設定が可能です</a>。もしダイナミックなHTMLページを提供する必要が無い場合（例えばモバイルアプリケーションのAPIを開発しているような場合）、ディレクトリをアプリケーションから削除しても構いません。</p>
<h5>ビューをコンパイルする</h5>
<p><code>res</code>オブジェクトにアクセス出来るところならどこでも（すなわち、コントローラ、アクション、カスタムレスポンスやポリシーで）<a href="http://sailsjs.org/documentation/reference/res/res.view.html"><code>res.view</code></a>を利用してビューをコンパイルし、その結果のHTMLをユーザに送出することが出来ます。</p>
<p>同様にビューディレクトリを<code>routes.js</code>ファイルに結びつけることが出来ます。これにはアプリケーションのビューの<code>views/</code>ディレクトリからの相対パスを指定するだけです。例えば：</p>
<pre><code class="language-javascript">{
  'get /': {
    view: 'homepage'
  },
  'get /signup': {
    view: 'signupFlow/basicInfo'
  },
  'get /signup/password': {
    view: 'signupFlow/chooseAPassword'
  },
  // and so on.
}</code></pre>
<h5>シングルページアプリケーションでは?</h5>
<p>ナビゲーションのうちいくつか（あるいは全て）がクライアントサイドで行われるようなアプリケーションを開発している場合、すなわちユーザーが画面遷移するたびにブラウザが新しいHTMLページを持ってくるのではなく、クライアントサイドコードが事前にロードされていて直接サーバーにアクセスし直すことなくクライアントサイドでマークアップテンプレートがレンダリングされるような場合。</p>
<p>このようなケースではシングルページアプリケーションを高速化するために幾つかの方法があります:</p>
<ul>
<li><code>views/publicSite.ejs</code>のような単一のビューを使う  利点:
<ul>
<li>Sailsのテンプレートエンジンを利用してクライアントでレンダリングされるビューに直接データを受け渡すことが出来ます。これによってユーザーデータなどをAjaxやWeb Socketによるアクセスなしにクライアントサイドのjavascriptに直接渡すことが簡単にできます。</li>
</ul></li>
<li><code>assets/index.html</code>のようなアセットページに有る単一のHTMLファイルを利用する。 利点:
<ul>
<li>サーバサイドデータを直接クライアントに渡すことは出来ませんが、クライアントサイドとサーバサイドのアプリケーションを完全に分割できます。</li>
<li>アセットフォヅダにあるものは全てスタティックなCDN（CloudfrontやCloudFlareのような）に移動でき、これにより地理的に分散しているCDNプロバイダの最も近いものからコンテンツを取得できるということの恩恵に預かられます。</li>
</ul></li>
</ul>
<docmeta name="uniqueID" value="Views426660">
<docmeta name="displayName" value="Views">