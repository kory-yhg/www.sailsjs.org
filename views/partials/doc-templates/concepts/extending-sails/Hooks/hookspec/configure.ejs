<h1><code>.configure()</code></h1>
<p><code>configure</code>機能は<a href="http://sailsjs.jp/documentation/concepts/extending-sails/Hooks/hookspec/defaults.html"><code>defaults</code> objects</a> が全てのフックに対して適用されたあとでフックを設定するための手段です。カスタムフックの<code>configure()</code>が実行された時全てのユーザレベルでの設定とコアフックのセッティングは<code>sails.config</code>にマージされます。しかしながらカスタムフックを読み込む順番は保証されていないので別のフックの設定に依存してはいけません。</p>
<p><code>configure</code> は引数を持たないファンクションとして実装され、いかなる返り値も返すことが出来ません。例えば以下の<code>configure</code>ファンクションははリモートAPIを通信するためのものであり、ユーザがフックの<code>ssl</code>設定をどうするのかによってアクセスするエンドポイントを変更するものです。フックの設定キーは<code>this.configKey</code>として<code>configure</code>で利用可能なことを覚えておいてください。:</p>
<pre><code>configure: function() {

   // SSLがONならSSLのエンドポイントを使う
   if (sails.config[this.configKey].ssl == true) {
      sails.config[this.configKey].url = "https://" + sails.config[this.configKey].domain;
   }
   // そうでなければHTTPを使う
   else {
      sails.config[this.configKey].url = "http://" + sails.config[this.configKey].domain;
   }
}</code></pre>
<p><code>configure</code>　を使う主な利点はすべての<code>configure</code>ファンクションは全ての<a href="http://sailsjs.jp/documentation/concepts/extending-sails/Hooks/hookspec/initialize.html"><code>initialize</code> functions</a> の前に実行されることが保証されているということです。したがってフックの<code>initialize</code>ファンクションは別のフックの設定を調べることが出来ます。</p>
<docmeta name="uniqueID" value="Hooks75004">
<docmeta name="displayName" value=".configure()">
<docmeta name="stabilityIndex" value="3">