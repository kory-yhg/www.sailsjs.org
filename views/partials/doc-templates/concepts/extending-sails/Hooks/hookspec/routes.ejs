<h1><code>.routes</code></h1>
<p><code>routes</code>機能を使うことでカスタムフックはSailsアプリケーションがロードされるときに簡単に新しいルートをバインド出来るようになります。もし実装されていた場合<code>routes</code>は<code>before</code>キーか<code>after</code>気のどちらか両方かを持ちます。これらのキーの値は<a href="http://sailsjs.jp/documentation/concepts/Routes/RouteTargetSyntax.html?q=route-address">route addresses</a>をキーに持ち、通常の<code>(req, res, next)</code>のパラメータをもつルートハンドリングファンクションを値に持つオブジェクトである必要があります。<code>before</code>オブジェクトで指定される全てのルートはカスタムユーザルート(<a href="http://sailsjs.jp/documentation/reference/sails.config/sails.config.routes.html">sails.config.routes</a>で定義される)や<a href="http://sailsjs.jp/documentation/reference/blueprint-api?q=blueprint-routes">ブループリントルート</a>よりも <em>前に</em> 来ます。反対に<code>after</code>で定義されるルートはカスタムユーザルートやブループリントルートの <em>後に</em> 来ます。例えば以下の<code>count-requests</code>フックを考えてみましょう:</p>
<pre><code class="language-javascript">module.exports = function (sails) {

   return {

      initialize: function(cb) {
         this.numRequestsSeen = 0;
         this.numUnhandledRequestsSeen = 0;
         return cb();
      },

      routes: {
         before: {
            'GET /*': function (req, res, next) {
               this.numRequestsSeen++;
               return next();
            }
        },
        after: {
            'GET /*': function (req, res, next) {
               this.numUnhandledRequestsSeen++;
               return next();
            }
        }
    };
};</code></pre>
<p>このフックは<code>before</code>で提供されたファンクションを通じて全てのリクエストを行い、<code>numRequestsSeen</code>変数をインクリメントします。同様に <code>after</code> オブジェクトで提供されたファンクションを通じ全ての <em>ハンドルされていない</em> リクエスト（つまりアプリケーションのカスタムルート設定やブループリントルートで示されていない全てのルート）を処理します。</p>
<blockquote>
<p>フックでセットアップされた2つの変数はSailsアプリケーションの中の他のモジュールから <code>sails.hooks["count-requests"].numRequestsSeen</code> と <code>sails.hooks["count-requests"].numUnhandledRequestsSeen</code> としてアクセスできます。</p>
</blockquote>
<docmeta name="uniqueID" value="Hooks75006">
<docmeta name="displayName" value=".routes">
<docmeta name="stabilityIndex" value="3">