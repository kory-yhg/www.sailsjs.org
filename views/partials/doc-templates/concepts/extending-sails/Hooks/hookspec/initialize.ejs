<h1><code>.initialize(cb)</code></h1>
<p><code>initialize</code>機能を使うと別のフックに依存していたり非同期であるかもしれないスタートアップタスクを実行することが出来ます。全てのSails設定はフックの<code>initialize</code>が行われる前に実行されることが保証されています。<code>initialize</code>の中に挿入したいタスクの例としては:</p>
<ul>
<li>リモートAPIへのログイン</li>
<li>フックメソッドれつかれるデータベースからの読み込み</li>
<li>ユーザーによって設定されたディレクトリからのサポートファイルの読み込み</li>
<li>別のフックが先に読み込まれるのを待つ</li>
</ul>
<p>他のフック機能と同じように<code>initialize</code>はオプショナルでありフックの定義に書かなくても構いません。もし実装されていれば<code>initialize</code>は一つの引数（Sailsがロード完了するために必要なコールバックファンクション）をとります。:</p>
<pre><code class="language-javascript">initialize: function(cb) {

   // Do some stuff here to initialize hook
   // And then call `cb` to continue
   return cb();

}</code></pre>
<h5>フックのタイムアウト設定</h5>
<p>デフォルトではフックは<code>initialize</code>を10秒で終了させられない場合、Sailsがエラーを出力する前に<code>cb</code>を呼び出します。このタイムアウトは<code>_hookTimeout</code>キーSailsが待つべきミリ秒数を指定することで設定可能です。それはフックの<a href="http://sailsjs.jp/documentation/concepts/extending-sails/Hooks/hookspec/defaults.html"><code>defaults</code></a> で行うことが出来ます。</p>
<pre><code>defaults: {
   __configKey__: {
      _hookTimeout: 20000 // wait 20 seconds before timing out
   }
}</code></pre>
<h5>フックイベントと依存</h5>
<p>フックの初期化に成功した際、以下の名前のイベントを発生させます:</p>
<p><code>hook:&lt;hook name&gt;:loaded</code></p>
<p>例えば:</p>
<ul>
<li>コアの<code>orm</code>フックは初期化完了後に<code>hook:orm:loaded</code>イベントを発生させます。</li>
<li><code>node_modules/sails-hook-foo</code>にインストールされたフックはデフォルトでは<code>hook:foo:loaded</code>を発生させます。</li>
<li>同じ<code>sails-hook-foo</code>フックが<code>sails.config.installedHooks['sails-hook-foo'].name</code>で<code>bar</code>と設定された場合は<code>hook:bar:loaded</code>を発生させます</li>
<li><code>node_modules/mygreathook</code>にインストールされたフックは<code>hook:mygreathook:loaded</code>イベントを発生させます。</li>
<li><code>api/hooks/mygreathook</code> にインストールされたフックは<code>hook:mygreathook:loaded</code>イベントを発生させます。</li>
</ul>
<p>&quot;hook loaded&quot;を利用することであるフックを別のフックに依存させることが出来ます。これをやるには単にフックの<code>initialize</code>を<code>sails.on()</code>でラップします。例えば、あるフックが<code>orm</code>フックが読み込まれるのを待つようにするためにはあなたのフックの<code>initialize</code>を以下のようにします。:</p>
<pre><code class="language-javascript">initialize: function(cb) {

   sails.on('hook:orm:loaded', function() {

      // カスタムフックの初期化を完了
      // そして、cb()をコールする
      return cb();

   }
}</code></pre>
<p>あるフックを別の幾つかのフックに依存させるには待つべきイベントの名前を配列に入れて<code>sails.after</code>をコールします:</p>
<pre><code class="language-javascript">initialize: function(cb) {

   var eventsToWaitFor = ['hook:orm:loaded', 'hook:mygreathook:loaded'];
   sails.after(eventsToWaitFor, function() {

      // カスタムフックの初期化を完了
      // そして、cb()をコールする
      return cb();

   }
}</code></pre>
<docmeta name="uniqueID" value="Hooks75005">
<docmeta name="displayName" value=".initialize()">
<docmeta name="stabilityIndex" value="3">