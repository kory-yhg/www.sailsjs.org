<h1>アダプター</h1>
<h3>ステータス</h3>
<h5>安定度: <a href="http://nodejs.org/api/documentation.html#documentation_stability_index">3</a> - ステーブル</h5>
<p>APIは十分に検証済みですが小規模な変更のためにコードを治す必要があります。後方互換性は保証されています。</p>
<h3>アダプターとは何でしょうか</h3>
<p>アダプタはある機能を実装することを意図して<strong>インターフェース</strong>を露出するものです。これによって複数のモデル、開発者、アプリケーション、さらには会社の間でもアプリケーションコードをメンテナンス可能に、効率よく、信頼性の高いものにすることが出来ます。アダプタはデータベースやオープンAPI、内部や商用のWebサービス、更にはハードウエアを統合するのに便利に使えます。</p>
<h3>アダプタを使ってどんなことが出来ますか。</h3>
<p>アダプタはモデルに意味をもたせたCRUDメソッドを提供することに主眼が置かれています。CRUDはCreate、Read、Update、Deleteの略です。SailsとWaterlineではこれらのメソッドを<code>create()</code>、<code>find()</code>、<code>update()</code>そして <code>destroy()</code>と呼んでいます。</p>
<p>例えば<code>MySQLAdapter</code>内部的には指定されたテーブル名とコネクション情報を使って<code>INSERT ...</code>SQLクエリを実行するというように<code>create()</code>メソッドを実装しています。</p>
<p>実務的にはアダプタは好きな様になんでもすることが出来ます。つまり、あなたが作った全てのメソッドは接続オブジェクトとそれを使うモデルから呼び出すことが出来ます。</p>
<h5>クラスメソッド</h5>
<p>以下の<code>class methods</code>はモデルそのもので利用可能な静的またはコレクション指向なファンクションです。（例えば<code>User.create()</code>や<code>Menu.update()</code>のようなものです）モデルに（アダプタ自身が持っているものを超えるような）カスタムメソッドを追加するにはモデルオブジェクトのトップレベルにkey/functionのペアとして追加してください。</p>
<h5>インスタンスメソッド</h5>
<p>一方で<code>instance methods</code>（オブジェクトソッドやモデルメソッドとも呼ばれます）はモデルのそれぞれの結果に対して実行可能なメソッドです。（例:<code>User.findOne(7).done(function (err, user) { user.someInstanceMethod(); });</code>）モデルに（アダプタ自身が持っているものを超えるような）インスタンスメソッドを追加するにはモデル定義の<code>attributes</code>オブジェクトににkey/functionのペアとして追加してください。</p>
<h5>DDLと自動マイグレーション</h5>
<p><code>DDL</code>とはdata-definition languageの略で、スキーマ指向のデータベースでおなじみのものです。Sailsでは設定だけで簡単に使える自動マイグレーションが用意されています。多くのSQLデータベース向けのアダプタで<code>alter()</code>が対応されていますので自動スキーママイグレーションも利用可能です。あなたがアダプタの中で<code>alter()</code>メソッドを書いた場合同様の振る舞いを起こすことが出来ます。この機能は<code>migrate</code>プロパティを使って設定可能で、<code>safe</code>（つまりスキーマに触れない）、 <code>drop</code>（つまりSailsを起動するたびにテーブルを再生成する）、<code>alter</code>（デフォルト。現在のスキーマをデータベースとマージする）をセットすることが出来ます。</p>
<docmeta name="uniqueID" value="Adapters83669">
<docmeta name="displayName" value="Adapters">
<docmeta name="stabilityIndex" value="3">