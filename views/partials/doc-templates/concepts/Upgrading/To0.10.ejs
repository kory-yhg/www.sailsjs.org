<h1>v0.10にアップグレードする</h1>
<p>多くの部分でv0.9プロジェクトと単純にliftするだけで動作します。コアコントリビュータはアップグレードをできるかぎり簡単にするために多くのステップを踏んできましたのでコンソールのデプリケーションメッセージに従うだけで大丈夫です。</p>
<p>Sails v0.10には大きな変更点がいくつかあります。以下のセクションでは何が代わったの概要や大きなバグフィックス、改善、新機能とSails v0.90アプリケーションをSilas v0.10アプリケーションにアップグレードするための基本的なやり方を紹介します。</p>
<h2>ファイルアップロード</h2>
<p>Connectマルチパートミドルウエアは<a href="http://www.senchalabs.org/connect/multipart.html">まもなく公式に廃止されます</a>。しかし、Sails v0.9 と Express v3 の内臓のHTTPボディーパーサに利用されていたため<code>req.files</code>に依存していたSails 0.9プロジェクトにとってこれは大きな変更点になります。</p>
<p>v0.10ではデフォルトで<a href="https://github.com/balderdashy/skipper">skipper</a>を内蔵していますがこれはストリーミングファイルアップロードをディスクへのバッファなしに実現します。通常のファイルアップロードのケースに関してSkipperは（skipper-diskを通じて）ローカルディスクへのアップロードの対応を内蔵していますが、ストリーミングアップロードはこれに対応するアダプタを通じて行う必要があります。</p>
<p>この例やドキュメンテーションに関してはSkipperのレポジトリの他にSailsの<code>req.file()</code>の項目をお読みください。</p>
<h3>どうしてでしょうか?</h3>
<p>ボディパーサの役割はマルチパートのHTTPリクエストの&quot;body&quot;をパースすることです。時に&quot;body&quot;はテキストパラメータを含んでいることもありますが、ファイルアップロードを含んでいることもあります。</p>
<p>Connectは素晴らしいコードですし、マルチパートリクエストにおいてテキストパラメータとファイルアップロードの両方をサポートします。しかしこのような種類のモジュールの多くと同じようにディスクにファイルアップロードをバッファすることにより実現しています。これは簡単にディスクに容量を凌駕してしまい、多くのケースでDoS攻撃の脆弱性を晒すことになります。</p>
<p>Skipperは <strong>ストリーミング</strong> ファイルアップロードをサポートするという点において特徴的で、リクエストボディの中にあるメタデータ（すなわち、JSON/XML/urlencodedのようなリクエストボディパラメータです）も維持することが出来ます。これはヒューリスティックの利点を使ってプラグインやblobアダプタが意図したファイルのみを受け取るようにし、その他の（もしかしたら悪意を持った）ファイルは無視します。</p>
<blockquote>
<h4><strong> 重要</strong></h4>
<p>Skipperが動作するためには、ファイルアップロードをサーバにリクエストするにあたって <em>全てのテキストパラメータはファイルパラメータの前にインクルードされなければいけません</em> 。Skipperは最初のファイルがアップロードされたと判断するとテキストパラメータを待ち受けるのをやめてしまいます。（これは危険で不要な、ファイル内容バッファを避けるための措置です。）</p>
</blockquote>
<h3>別のボディーパーサを設定する</h3>
<p>Sailsの中の多くのものと同じように全てのConnect/Express/Sails対応をボディーパーサをお好みに合わせて使うことが出来ます。<strong>connect-multipart</strong> に戻したい場合や、別のボディーパーサ( <strong>formidable</strong> や <strong>busboy</strong> のような)を使いたい場合はアプリケーションのhttp設定を変えてください。</p>
<h2>ブループリント</h2>
<p>新しいブループリントアクション(<code>findOne</code>)が追加されました。例えば、もし<code>FooController</code>と<code>Foo</code>があってそこに<code>/foo/5</code>へのリクエストが有った場合、<code>FooController</code>の<code>findOne</code>アクションが実行されます。もし<code>findOne</code>アクションがないときはブループリントアクションが代わりに実行されます。<code>/foo</code>に送られたリクエストは引き続きfindのコントローラアクションまたはブループリントアクションとして動作します。</p>
<h2>ポリシー</h2>
<p>ポリシーはv0.9で動いていたのと全く同じように動きます。新たに想定しなければいけない状況があります。上に挙げたように<code>findOne()</code>ブループリントアクションが追加されたのでこれをポリシーマッピング設定で別個のものとして扱わなければなりません。</p>
<p>例えば<code>policies.js</code>で<code>DoveController</code>の<code>find</code>アクションへのアクセスを防いでいたSails v0.9アプリケーションがあるとしましょう。</p>
<pre><code>module.exports.policies = {
  '*': true,
  DoveController: {
    find: false
  }
};</code></pre>
<p>全てのブループリントルートが有効化されていると仮定すると、<code>/dove</code> と <code>/dove/14</code> の両方へのアクセスが防がれています。しかし、v0.10では<code>/dove/14</code>は実際には<code>findOne</code>を実行しますのでこれを別々に取り扱わなければなりません。:</p>
<pre><code>module.exports.policies = {
  '*': true,
  DoveController: {
    find: false,
    findOne: false
  }
};</code></pre>
<h2>Pubsub</h2>
<h3>概要</h3>
<ul>
<li>クライアントの<code>message</code>ソケット（すなわち、&quot;comment&quot;）イベントは<code>modelIdentity</code>になりました。(modelIdentityは度のモデルからメソッドが呼び出されるのかによって違います)</li>
<li>クライアントはもうblueprintルートのmodel-creationにサブスクライブされません。データ作成イベントをリッスンするには<code>Model.watch()</code>を使ってください。</li>
<li>かつて<code>create</code>、 <code>update</code>、<code>destroy</code>と命名されていたイベントは現在は<code>created</code>、<code>updated</code>、<code>destroyed</code>です。</li>
</ul>
<h3>詳細</h3>
<p>最大の変更点はSocket.ioのイベントはモデル自身の名前の元に送信されるということになったことです。以前はクライアントは<code>message</code>イベントをリッスンしてそこに含まれているデータを元にどのモデルが送信していたかを判断していました。:</p>
<pre><code>socket.on('message', function(cometEvent) {
   if (cometEvent.model == 'user') {
     // userレコードに関するインバウンドメッセージを扱う
   }
   else if (cometEvent.model === 'product') {
     // productレコードに関するインバウンドメッセージを扱う
   }
   // ...
}</code></pre>
<p>現在はモデルの識別子にアクセスします。:</p>
<pre><code>socket.on('user', function(cometEvent) {
  // userレコードに関するインバウンドメッセージを扱う
});

socket.on('product', function (cometEvent) {
  // productレコードに関するインバウンドメッセージを扱う
});</code></pre>
<p>これはフロントエンドコードの構造化に役立ちます。</p>
<p>クライアントがモデルをサブスクライブする方法も変更されました。今まではそれがモデルクラスであっても、１つや複数のモデルインスタンスであっても<code>Model.subscribe</code>に渡されるパラメータを元にサブスクライブする対象を判断していました。これは事実上、一つのメソッドで二つの全く異なることをしていました。</p>
<p>今は<code>Model.subscribe()</code>をモデルインスタンス（レコード）をサブスクライブすることのみに使います。同様にリッスンしたいイベントの&quot;contexts&quot;やタイプを指定できます。例えばもしあるインスタンスのアップデートのみ、メッセージを受け取りたい場合は<code>User.subscribe(req, myUser, 'update')</code>をコールできます。もし<code>.subscribe()</code>を呼び出す際に何のコンテキストも与えられていない場合はモデルクラスのautosubscribeで指定された全てのコンテキストが使われます。</p>
<p>モデルの生成イベントをリッスンするには現在は<code>Model.watch()</code>が使えます。サブスクリプションすることによってクライアントはblueprintルートを使ってそのモデルにデータが生成される度にメッセージを受け取り、新しいインスタンスを自動的にリッスンします。</p>
<p>blueprintsを使っている時にクラスが自動的にサブスクライブすることはもう無いということを覚えておいてください。これは手動で行う必要があります。</p>
<p>最後に、全てのモデルからのpubsubメッセーをじ受け取りたい際は開発環境でのみ使える<code>firehose</code>と呼ばれるツールにアクセスでき、ここではモデルに発生する <em>全てのこと</em> に関してメッセージがブロードキャストされます。</p>
<p>新しいpubsubの例をアクションの中で見るには<a href="https://github.com/balderdashy/sailschat">SailsChat</a> をご覧ください。</p>
<h2>ライフサイクルコールバックへの引数は型キャストされます。</h2>
<p>以前は<code>schema: true</code>をすることで<code>.create()</code>や<code>.update()</code>にモデルアトリビュートで期待されている以外のデータ型を渡した場合、それらの値はライフサイクルコールバックでアクセス可能でした。</p>
<p>Sails/Waterline v0.10ではもうすでにこの限りではありません。<code>.create()</code>と<code>.update()</code>に渡された値はライフサイクルコールバックがされる前に型キャストされます。<code>beforeUpdate()</code>と<code>beforeCreate()</code>と<code>beforeValidate()</code>の影響を受けるコールバックの範囲に入ります。</p>
<h2>beforeValidation() は beforeValidate() になりました</h2>
<p>もし<code>beforeValidation</code>か<code>afterValidation</code>のモデルライフサイクルコールバックをモデルで使っていた場合それらを<code>beforeValidate</code>と<code>afterValidate</code>に変えなければなりません。これはWaterlineをその他のライフサイクルコールバック (<code>beforeCreate</code>, <code>afterUpdate</code>などのスタイルに合わせたためです)。</p>
<h2>.done() と .exec()</h2>
<p><strong> 古い（あるいはややこしい？）意味の<code>.done()</code>はもはや廃止されました</strong></p>
<p>Sails &lt;= v0.8ではORMを実行する文法は<code>Model. [ … ] .done( cb )</code>でした。v0.9ではpromiseのサポートが追加されpromiseの中で<code>.done()</code>が特別な意味を持つので<code>Model. [ … ] .exec( cb )</code>が推奨される代替方法になりました。しかし、v0.8 から v0.9への移行を簡単にするためにもともとの<code>.done()</code>の用法もそのままにしていました。</p>
<p>しかし、Sails/Waterline v0.10ではもっとしっかりしたpromiseの実装を進め、(<code>Q</code> や <code>Bluebird</code>などの)プラグイン可能なライブラリをサポートするために、もともとの意味の<code>.done()</code>は正式に廃止されました。</p>
<h2>アソシエーション</h2>
<p>Sails v0.10ではデータモデル間のアソシエーションを導入しました。我々が加えた変更は主に付加的なものなので現存のモデルは以前としてただ動くでしょう。これはつまり、このパワフルな新機能は書くべきコードを少なくし、アプリケーションをさらにメンテナンス性の高いものにするのでこの利点を活かしましょうということです！Sailsでどのようにアソシエーションを使うかはドキュメントをご覧ください。</p>
<p>アソシエーション（あるいはリレーション）は単に特種なアトリビュートです。文字列や整数の代わりにモデルのインスタンスやそのコレクションを指定します。これはJSONやNoSQLデータベースに格納されるオブジェクト(<code>{...}</code>)や(<code>[{...}, {...}]</code>)のようなものと考えていただいても良いでしょう。違いは、Sailsではサポートしているすべてのデータベースと動作することができ、しかも異なるデータベースや異なる種類のデータベースをまたいでpopulate（すなわちJSON）することが出来るということです。</p>
<h2>ジェネレータ</h2>
<p>Sailはコードの自動生成 (例： <code>sails generate controller foo</code>) をサポートしますが、v0.10ではこの機能を更に拡張可能に、Sailsコミュニティの誰にでもオープンにアクセス可能にしたいと考えました。このような考え方のもとv0.10ではコマンドラインツールとプラグイン可能なジェネレータをを完全に書き換えました。<code>sails generate blog foo</code>を使って新しいブログをSailsで作りたいでしょうか。それなら(<code>generate generator blog</code>を実行して)<code>blog</code>ジェネレータを作ってテンプレートを追加し、テンプレートを書き換えるための設定を行ってください。それからnpmのコマンドを使って、<code>sails-generate-blog</code>と命名されたこのモジュールをコミュニティーに向けて公開できます。Yomanジェネレータとの互換性機能も予定されています。</p>
<h2>コマンドラインツール</h2>
<p>ここでの大きな変更点は新しいAPIの作り方です。かつては<code>sails generate new_api</code>をコールしていました。これによって<code>new_api</code>と呼ばれるモデルとコントローラを適切な位置に生成できます。現在はこれを<code>sails generate api new_api</code>で行うことが出来ます。</p>
<p>同じCLIのコマンドを使ってモデルとコントローラを別々に生成することも出来ます。</p>
<p>同様に、<code>--linker</code>スイッチはもう使えません。以前のバージョンでは <code>--linker</code>を提供されていれば<code>js</code>、<code>styles</code>と<code>templates</code>フォルダが入っている<code>myApp/assets/linker</code>フォルダーを生成しました。新しいバージョンでは<code>myApp/assets/linker</code>フォルダーは生成されません。<code>myApp/assets/js</code>と<code>myApp/assets/scripts</code>フォルダでのCoffeeScriptとLessのコンパイルは最初から標準の動作になりました、</p>
<h2>カスタムサーバレスポンス</h2>
<p>v0.10ではカスタムのサーバレスポンスを生成できます。</p>
<p>以前と同じように幾つかのものは自動生成されます。<code>myApp/config/500.js</code>などの<code>.js</code>レスポンスをコンフィグディレクトリで生成する代わりに今では<code>myApp/api/responses/</code>に生成されます。</p>
<p>マイグレーションするには新しいv0.10プロジェクトを作って<code>myApp/api/responses</code>ディレクトリを既存のアプリケーションにコピーします。それから、レスポンスロジックファイル(500.jsなど)をあなたが行ったカスタマイズに対応するように適切な.jsファイルを編集します。</p>
<h2>レガシーなデータはsails-diskの一時データベースに保管されます。</h2>
<p>新しいSailsプロジェクトでデフォルトで使われる<code>sails-disk</code>では少し違った方法でデータを格納します。もし0.9.xのプロジェクトで保存された一時的データがある場合、それらを削除して新しく始める必要があります。これを行うには:</p>
<p>プロジェクトのルートディレクトリで:</p>
<pre><code>$ rm .tmp/disk.db</code></pre>
<h2>アダプタとデータベースの設定</h2>
<p><code>config.adapters</code>(<code>myApp/config/adapters.js</code>にあります)はconfig.connections(新規のプロジェクトでは<code>myApp/config/connections.js</code>に生成されます)になりました。同じく<code>config.model</code>は現在は<code>config.models</code>です。</p>
<p>アプリケーションのデフォルトの<code>connection</code>（つまりデータベース）はこれからは<code>config.models.connection</code>で設定されなければならず、これらモデルでデフォルトとして使われます。新規プロジェクトは<code>/config/models.js</code>ファイルで生成され、デフォルトのコネクションを含みます。</p>
<p>特定のアダプタを指定したい場合は<code>adapters</code>の代わりに<code>connection</code>キーで設定しなければなりません。</p>
<p>例:</p>
<pre><code>module.exports = {

    connection: ['someMongoDatabase'],

    attributes: {
        name:{
            type     : 'string',
            required : true
        }
    }
};</code></pre>
<h2>Blueprints/Controller設定</h2>
<p>コントローラのブループリントを上書きするコントローラ設定のオブジェクトリテラルは以下のように変更されなければいけません。:</p>
<pre><code>...
_config: {
  blueprints: {
    rest: true,
    ...
  }
}</code></pre>
<p>変更後:</p>
<pre><code>...
_config: {
    rest: true,
    ...
}</code></pre>
<h2>レイアウトパス:</h2>
<p>Sails v0.9ではビューをレンダリングする際のカスタムレイアウトとして<code>auth/someLayout.ejs</code>を指定するためには以下の構文を使わなければなりません。:</p>
<pre><code>return res.view('auth/login',{
  layout: 'someLayout'
});</code></pre>
<p>しかし、Sails v0.10では全てのレイアウトパスはアプリケーションのビューのパスに対して相対的です。言い換えれば、レイアウトのの相対パスはビューのパス自身によって解決されなくなり、常にビューのパスで解決されるということです。これは特に同じような名前を持つレイアウトファイルでこのファイルが利用されるのかを理解するのに役立ちます。:</p>
<pre><code>return res.view('auth/login', {
  layout: 'auth/someLayout'
});</code></pre>
<docmeta name="displayName" value="To v.0.10">