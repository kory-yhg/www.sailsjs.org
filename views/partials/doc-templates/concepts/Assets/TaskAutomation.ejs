<h1>タスクの自動化</h1>
<h3>概要</h3>
<p><a href="http://sailsjs.org/documentation/anatomy/tasks"><code>tasks/</code></a>ディレクトリには<a href="http://gruntjs.com/creating-tasks">Gruntタスク</a>とその<a href="http://gruntjs.com/configuring-tasks">設定ファイル</a>がまとめられて入っています。</p>
<p>タスクは主にフロントエンドのアセットをバンドルする(例えばスタイルシートやスクリプト、クライアントサイドマークアップテンプレートなど）のに利用されますがその他にも<a href="https://github.com/jmreidy/grunt-browserify">browserify</a>のcompilationから<a href="https://www.npmjs.org/package/grunt-db-migrate">データベースマイグレーション</a>に至るまで様々な開発中の細々とした仕事を自動化するためにも使えます。</p>
<p>Sailsは簡便のためにいくつかの<a href="http://sailsjs.org/documentation/grunt/default-tasks">デフォルトのタスク</a> をバンドルしていますが文字通り数百ものプラグインが利用でき、これによってすべての雑用を最小限の手数で完了することが出来ます。もしもあなたが使いたいタスクがなかったら自分で<a href="http://gruntjs.com/creating-tasks">Gruntのプラグインを作って</a>それを<a href="http://npmjs.org">npm</a>に載せることも出来ます。</p>
<blockquote>
<p>今までに<a href="http://gruntjs.com/">Grunt</a>を使ったことがない方は<a href="http://gruntjs.com/getting-started">Getting Started</a>ガイドを見てください。そこには<a href="http://gruntjs.com/sample-gruntfile">Gruntfile</a> の書き方やインストール方法が書かれています。</p>
</blockquote>
<h3>アセットパイプライン</h3>
<p>アセットパイプラインはビューに挿入されるアセットを整形する部分であり、<code>tasks/pipeline.js</code>ファイルに記述されます。これらのアセットを設定するにはGruntに<a href="http://gruntjs.com/configuring-tasks#files">タスクファイル</a>タスクファイル設定と<a href="http://gruntjs.com/configuring-tasks#globbing-patterns">wildcard/glob/splaのパターン</a>を使うだけで簡単にできます。これらは3つの部分からなります。</p>
<h5>CSSファイルの挿入</h5>
<p>ここではHTMLに<code>&lt;link</code>&gt;タグとして挿入されるCSSファイルを指定します。これらのタグは全てのビューの<code>&lt;!--STYLES--&gt;&lt;!--STYLES END--&gt;</code>コメントの間に挿入されます。</p>
<h5>Javascriptファイルの挿入</h5>
<p>ここではHTMLに<code>&lt;script</code>&gt;タグとして挿入されるCSSファイルを指定します。これらのタグは全てのビューの<code>&lt;!--STYLES--&gt;&lt;!--STYLES END--&gt;</code>コメントの間に挿入されます。各ファイルは配列の並び順に基づいて挿入されます。（すなわち依存するファイルのパスの前に依存されるファイルのパスを入れなければなりません）</p>
<h5>テンプレートファイルの挿入</h5>
<p>ここではjstファンクションにコンパイルされjst.jsファイルに保存されるhtmlファイルの配列を指定します。このファイルはその後<code>&lt;script&gt;</code>タグとしてHTMLの<code>&lt;!--TEMPLATES--&gt;&lt;!--TEMPLATES END--&gt;</code>コメントの間に挿入されます。</p>
<blockquote>
<p>同じGruntのwildcard/glob/splatとタスク設定ファイルはいくつかのタスク設定jsファイル自体でで使われていますので変更を加えたいときはそれらも同様に編集してください。</p>
</blockquote>
<h3>タスクの設定</h3>
<p>設定済みのタスクはGruntfileが実行されたとき適用されるルールをまとめたものです。これら<a href="http://sailsjs.org/documentation/anatomy/myApp/tasks/config"><code>tasks/config/</code></a>にあり、完全にカスタマイズ可能です。あなたの使いたい用途に合わせてこれたのGruntファイルのうち全てを編集し、省略し、また置き換えることが出来ます。同様に<code>someTask.js</code>のようなファイルをこのディレクトリに追加し他の適切なタスクと一緒に登録することで(<code>grunt/register/*.js</code>のファイルを参照してください。)あなた自身のGruntファイルを作成することも出来ます。なおSailsは特段の設定なしに起動できるように便利なデフォルトのタスクのセットを持っているということも忘れずにいてください。</p>
<h5>カスタムのタスクを設定する</h5>
<p>プロジェクトにカスタムのタスクを設定するのはとてもシンプルで、Gruntの<a href="http://gruntjs.com/api/grunt.config">設定</a>と<a href="http://gruntjs.com/api/grunt.task">タスク</a>APIを使うことでタスクをモジュールにすることが出来ます。既存のタスクを置き換えて新しいタスクを作成する例を見てみましょう。デフォルトで設定されているunderscoreの代わりに<a href="http://handlebarsjs.com/">Handlebars</a>をテンプレートエンジンとして使いたいとします。:</p>
<ul>
<li>まずはじめに以下のコマンドをターミナルで実行することでHandlebarsのGruntプラグインをインストールするところから始めます。:</li>
</ul>
<pre><code class="language-bash">npm install grunt-contrib-handlebars --save-dev</code></pre>
<ul>
<li><code>tasks/config/handlebars.js</code>に設定ファイルを作成します。これはhandlebarsの設定を入れるところです。 </li>
</ul>
<pre><code class="language-javascript">// tasks/config/handlebars.js
// --------------------------------
// handlebar task configuration.

module.exports = function(grunt) {

  // We use the grunt.config api's set method to configure an
  // object to the defined string. In this case the task
  // 'handlebars' will be configured based on the object below.
  grunt.config.set('handlebars', {
    dev: {
      // We will define which template files to inject
      // in tasks/pipeline.js
      files: {
        '.tmp/public/templates.js': require('../pipeline').templateFilesToInject
      }
    }
  });

  // load npm module for handlebars.
  grunt.loadNpmTasks('grunt-contrib-handlebars');
};</code></pre>
<ul>
<li>アセットパイプラインにおけるソースファイルのパス設定を書き換えます。ここでの唯一の変更点はunderscoreのテンプレートはシンプルなHTMLファイルの中に入れれるのに対してhandelbarsは.hbs拡張子のファイルを参照するということです。</li>
</ul>
<pre><code class="language-javascript">// tasks/pipeline.js
// --------------------------------
// asset pipeline

var cssFilesToInject = [
  'styles/**/*.css'
];

var jsFilesToInject = [
  'js/socket.io.js',
  'js/sails.io.js',
  'js/connection.example.js',
  'js/**/*.js'
];

// We change this glob pattern to include all files in
// the templates/ direcotry that end in the extension .hbs
var templateFilesToInject = [
  'templates/**/*.hbs'
];

module.exports = {
  cssFilesToInject: cssFilesToInject.map(function(path) {
    return '.tmp/public/' + path;
  }),
  jsFilesToInject: jsFilesToInject.map(function(path) {
    return '.tmp/public/' + path;
  }),
  templateFilesToInject: templateFilesToInject.map(function(path) {
    return 'assets/' + path;
  })
};</code></pre>
<ul>
<li>compileAssetsとsyncAssetsの登録済みタスクにhandlebarsのタスクをインクルードします。ここはjstタスクが使われるところですが、これを新しく設定したhandlebarsで置き換えます。</li>
</ul>
<pre><code class="language-javascript">// tasks/register/compileAssets.js
// --------------------------------
// compile assets registered grunt task

module.exports = function (grunt) {
  grunt.registerTask('compileAssets', [
    'clean:dev',
    'handlebars:dev',       // changed jst task to handlebars task
    'less:dev',
    'copy:dev',
    'coffee:dev'
  ]);
};

// tasks/register/syncAssets.js
// --------------------------------
// synce assets registered grunt task

module.exports = function (grunt) {
  grunt.registerTask('syncAssets', [
    'handlebars:dev',      // changed jst task to handlebars task
    'less:dev',
    'sync:dev',
    'coffee:dev'
  ]);
};</code></pre>
<ul>
<li>jstタスクの設定を削除します。我々はすでにtasks/config/jst.jsを必要としないのでこれを削除することが出来ます。単にプロジェクトから削除するだけで構いません。</li>
</ul>
<blockquote>
<p>理想的にはこれをプロジェクトとプロジェクトのnode dependenciesから削除します。これは以下のコマンドを実行することで行えます。</p>
<pre><code class="language-bash">npm uninstall grunt-contrib-jst --save-dev</code></pre>
</blockquote>
<h3>Task triggers</h3>
<p><a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.local.html?q=environment">デベロップメントモード</a>においてはSailsは<code>default</code>のタスク(<a href="http://beta.sailsjs.org/#/documentation/anatomy/myApp/tasks/register/default.js.html"><code>tasks/register/default.js</code></a>)を実行します。これはLESSやCoffeeScript、クライアントサイドのJSTテンプレートをコンパイルし、アプリケーションの動的なビューと静的なHTMLページにリンクします。</p>
<p>本番環境においてはSailsは<code>prod</code>のタスク(<a href="http://sailsjs.org/documentation/anatomy/myApp/tasks/register/prod.js.html"><code>tasks/register/prod.js</code></a>)を実行し、これはこれは<code>default</code>のタスクに加えてアプリケーションのスタイルシートスクリプトを最小化します。これによりアプリケーションの読み込み時間と利用帯域を節約することが出来ます。</p>
<p>これらのタスクのトリガーは<a href="http://sailsjs.org/documentation/anatomy/myApp/tasks/register"><code>tasks/register/</code></a>フォルダーにある<a href="http://gruntjs.com/creating-tasks#basic-tasks">Gruntの&quot;basic&quot;タスク</a>に有ります。以下にSailsの全てのタスクトリガーとそれぞれが走らせるコマンドのリファレンスを説明します。:</p>
<h5><code>sails lift</code></h5>
<p><strong>default</strong>のタスクを実行します。 (<code>tasks/register/default.js</code>).</p>
<h5><code>sails lift --prod</code></h5>
<p><strong>prod</strong>のタスクを実行します。 (<code>tasks/register/prod.js</code>).</p>
<h5><code>sails www</code></h5>
<p><strong>build</strong>タスクを実行します。 (<code>tasks/register/build.js</code>)that compiles all the assets to <code>www</code> subfolder instead of <code>.tmp/public</code> using relative paths in references. This allows serving static content with Apache or Nginx instead of relying on <a href="http://sailsjs.org/documentation/concepts/Middleware">'www middleware'</a>、.</p>
<h5><code>sails www --prod</code> (production)</h5>
<p><strong>buildProd</strong>タスクを実行します。 (<code>tasks/register/buildProd.js</code>).that does the same as <strong>build</strong> task but also optimizes assets.</p>
<p>NODE_ENVの設定で別のタスクを実行するように指定したり、tasks/register/で同名のタスクのリストを作成することが出来ます。例えば、NODE_ENVがQAの時Sailsはもしtasks/register/QA.jsが存在すればそれを実行します。</p>
<docmeta name="uniqueID" value="TaskAutomation282238">
<docmeta name="displayName" value="Task Automation">