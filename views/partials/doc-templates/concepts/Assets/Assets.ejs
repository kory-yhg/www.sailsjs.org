<h1>アセット</h1>
<h3>概要</h3>
<p>アセットとはあなたがサーバにおいて公開したい<a href="http://en.wikipedia.org/wiki/Static_web_page">スタティックファイル</a>(js,css,imagesなど)を指します。Sailsではアセットは<a href="http://sailsjs.org/documentation/anatomy/myApp/assets"><code>assets/</code></a>ディレクトリに配置されあなたがアプリケーションをデプロイした時に非表示の一時テクディレクトリ(<code>.tmp/public/</code>)に保存され、処理並びに同期がされます。この<code>.tmp/public</code>フォルダーの中身はSailsが実際に提供するものです。これはおおまかに言って<a href="https://github.com/expressjs">express</a>における&quot;public&quot;フォルダーやApacheのようなWebサーバにおける&quot;www&quot;フォルダーと同等です。この中間ステップを踏むことでSailsはアセットがクライアントで実際に使われるための前処理や事前コンパイル（LESSやCoffeeScript、SASS、spritesheets、Jade templatesなどの）を行うことが出来ます。</p>
<h3>スタティックミドルウエア</h3>
<p>舞台裏ではSailsはアセットを提供するためにExpressの<a href="http://www.senchalabs.org/connect/static.html">static middleware</a>を使っています。このミドルウエアの設定（例えばキャッシュの設定など）は<a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.http.html"><code>/config/http.js</code></a>でできます。</p>
<h5><code>index.html</code></h5>
<p>ほとんどのWebサーバのようにSailsは<code>index.html</code>の習慣を採用しています。例えばあなたが新しいSailsプロジェクトの中に<code>assets/foo.html</code>を作ったとすると<code>http://localhost:1337/foo.html</code>でアクセス可能になります。しかしもしあなたが<code>assets/foo/index.html</code>を作ったとすると<code>http://localhost:1337/foo/index.html</code>でも<code>http://localhost:1337/foo</code>でもアクセスすることが出来るようになります。</p>
<h5>ルートの優先</h5>
<p><a href="http://stephensugden.com/middleware_guide/">スタティックミドルウエア</a>がSailsのルータの<strong>背後に</strong>インストールされるということを理解することは重要な事です。そのためもしあなたが<a href="http://sailsjs.org/documentation/concepts/Routes?q=custom-routes">カスタムのルート</a>を定義しその一方で競合するパスにアセットを配置した場合、カスタムルートの設定はアクセスがスタティックミドルウエアに到達する前にそのルーティングを妨害してしまいます。例えば、もしあなたが<code>assets/index.html</code>を作成し、<a href="/#/documentation/reference/sails.config/sails.config.routes.html"><code>config/routes.js</code></a>ファイルで何もルートを定義しなかった場合そのファイルはホームページとして提供されます。しかし、もしあなたがカスタムのルート<code>'/': 'FooController.bar'</code>,を定義した場合、そのルート設定が優先されます。</p>
<docmeta name="uniqueID" value="Assets220313">
<docmeta name="displayName" value="Assets">