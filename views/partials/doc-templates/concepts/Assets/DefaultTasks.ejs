<h1>既定のタスク</h1>
<h3>概要</h3>
<p>Sailsにバンドルされているアセットパイプラインはあなたのプロジェクトをより矛盾がなくより生産的に設計するために一般的なデフォルトを使って実装されたGruntタスクのセットになっています。フロントエンドのアセットワークフローはすべてデフォルトのタスクの枠にとらわれずにカスタマイズすることが出来ます。Sailsはあなたのニーズに合わせて簡単に<a href="http://sailsjs.org/documentation/concepts/Assets/TaskAutomation.html?q=task-configuration">新しいタスクを作る</a> ことが出来ます。</p>
<!-- change link to: /documentation/concepts/assets/task-automation#?task-configuration once new site is live -->
<p>例えば以下の様な機能がSailsのデフォルトのGrunt設定として使うことが出来ます。:</p>
<ul>
<li>LESSの自動コンパイル</li>
<li>JITの自動コンパイル</li>
<li>Coffeescriptの自動コンパイル</li>
<li>その他のアセットの自動注入、最小化、連結</li>
<li>Web上へアップするためのファイルの作成</li>
<li>ファイスの監視や同期化</li>
<li>プロダクション環境でのアセットの最適化</li>
</ul>
<h3>デフォルトのGruntタスクの振る舞い</h3>
<p>以下にSailsプロジェクトに含まれているGruntタスク関して何をするのかを簡潔に記しました。また、それぞれのタスクの説明に関しての詳細な説明ページヘのリンクも用意しました。</p>
<h5>clean</h5>
<blockquote>
<p>このGruntタスクはプロジェクトの<code>.tmp/public/</code>ディレクトリにある内容を消去します。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-clean">使い方</a></p>
</blockquote>
<h5>coffee</h5>
<blockquote>
<p><code>assets/js/</code>にあるcoffeeScriptファイルをJavascriptにコンパイルし<code>.tmp/public/js/</code>に移動します。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-coffee">使い方</a></p>
</blockquote>
<h5>concat</h5>
<blockquote>
<p>javascriptとcssをそれぞれ連結し<code>.tmp/public/concat/</code>ディレクトリに保存します。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-concat">使い方</a></p>
</blockquote>
<h5>copy</h5>
<blockquote>
<p><strong>dev task 設定の時</strong>
coffeescriptとlessファイル以外のすべてのファイルとディレクトリーをSailsのアセットフォルダーから<code>.tmp/public/</code>ディレクトリにコピします。</p>
<p><strong>build task 設定の時</strong>
全てのファイルとディレクトリを<code>.tmp/public</code>ディレクトリからwwwディレクトリにコピーします。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-copy">使い方</a></p>
</blockquote>
<h5>cssmin</h5>
<blockquote>
<p>CSSファイルを最小化し<code>.tmp/public/min/</code>ディレクトリに保管します。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-cssmin">使い方</a></p>
</blockquote>
<h5>jst</h5>
<blockquote>
<p>Underscoreテンプレートをプレコンパイルし<code>.jst</code>ファイルにします。(つまり、HTMLテンプレートを小さなJavascriptのFunctionに変換します。）これによってテンプレートレンダリングを高速化させ帯域利用を減少させることが出来ます。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-jst">使い方</a></p>
</blockquote>
<h5>less</h5>
<blockquote>
<p>LESSファイルをCSSにコンパイルします。<code>assets/styles/importer.less</code>のみがコンパイルされます。これにより順序を任意に設定することが出来るようになります。（つまり他のスタイルシートの前にdependencies, mixins, variables, resetsなどをインポートすることが出来ます）</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-less">使い方</a></p>
</blockquote>
<h5>sails-linker</h5>
<p>Javascriptのタグには<code>&lt;script&gt;</code>を、CSSファイルには<code>&lt;link&gt;</code>を自動的に挿入します。また、<code>&lt;script&gt;</code>を使ってプレコンパイル済みのテンプレートに対してリンクを行います。これらに対する詳細な説明は<a href="https://github.com/balderdashy/sails-generate-frontend/blob/master/docs/overview.md#a-litte-bit-more-about-sails-linking">こちら</a>で確認することが出来ますが、おさえておきたい大切なことはスクリプトとスタイルシートの挿入は<code>&lt;!--SCRIPTS--&gt;&lt;!--SCRIPTS END--&gt;</code>や<code>&lt;!--STYLES--&gt;&lt;!--STYLES END--&gt;</code>のタグを含むファイル<em>のみ</em>で行われるということです。また、これらは新しく作成したSailsプロジェクトの<strong>views/layout.ejs</strong>にデフォルトで自動的に組み込まれています。もしあなたのプロジェクトでリンカーを使いたくない時は単にこれ他のタグを削除してください</p>
<blockquote>
<p><a href="https://github.com/Zolmeister/grunt-sails-linker">使い方</a></p>
</blockquote>
<h5>sync</h5>
<blockquote>
<p>ディレクトリを同期済みにするタスクです。このタスクはgrunt-contrib-copyにとても良く似ていますが、本当に変更されたもののみをコピーしようとします。これは<code>assets/</code>フォルダーから<code>.tmp/public/</code>へのコピーのみを行い、コピー先に既存のすべてのファイルを上書きします。</p>
<p><a href="https://github.com/tomusdrw/grunt-sync">使い方</a></p>
</blockquote>
<h5>uglify</h5>
<blockquote>
<p>クライントサイドのjavascriptアセットを最小化します。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-uglify">使い方</a></p>
</blockquote>
<h5>watch</h5>
<blockquote>
<p>ファイルパターンが追加され、編集され、削除された時に毎回予め設定されたスクリプトを実行します。<code>assets/</code>フォルダに配置されたファイルを監視し、（例えばLESSやJSTのコンパイルのような）適切なタスクを再実行します。これにより行った編集の結果をSailsを再起動することなく確認することが出来ます。</p>
<p><a href="https://github.com/gruntjs/grunt-contrib-watch">使い方</a></p>
</blockquote>
<docmeta name="uniqueID" value="DefaultTasks764297">
<docmeta name="displayName" value="Default Tasks">