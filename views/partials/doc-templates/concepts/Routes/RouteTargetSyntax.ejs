<h1>ルートターゲットの記法</h1>
<h3>概要</h3>
<p>Sailsでは<strong>config/routes.js</strong>において、いくつかの方法で明示的なルートを設定することが出来ます。すべてのルーティングせっては<strong>アドレス</strong>と<strong>ターゲット</strong>から成っています。例えば、:</p>
<pre><code>'GET /foo/bar': 'FooController.bar'
^^^address^^^^  ^^^^^^target^^^^^^^</code></pre>
<h3>ルートアドレス</h3>
<p>ルートアドレスはターゲットに指定されたハンドラーやオプションの適用を受けるにはどのようなURLにマッチしていなければならないかを示すものです。ルートは必須事項のパスとオプションのリクエスト種別から成っています。:</p>
<pre><code>'POST  /foo/bar'
^verb^ ^^path^^</code></pre>
<p>どのようなリクエスト種別も指定されなかった場合、(<strong>GET</strong>, <strong>POST</strong>, <strong>PUT</strong>などのいずれかにかかわらず)パスにマッチするすべてのリクエストに対してターゲットが適用されます。先頭に<code>/</code>をつけるのを忘れずにいてください。適切に動作させるにはすべてのパスは<code>/</code>から始まらなければなりません。</p>
<h4>ワイルドカードとダイナミックパラメータ</h4>
<p>特定のパスを<strong>foo/bar</strong>のように指定する代わりにワイルドカードとして<code>*</code>が使えます。:</p>
<pre><code>'/*'</code></pre>
<p>上のものはすべてのパスに当てはまります:</p>
<pre><code>'/user/foo/*'</code></pre>
<p>上のものは<strong>/user/foo</strong>で<em>始まる</em>すべてのパスに当てはまります。</p>
<blockquote>
<p><strong>備考:</strong> <code>'/*'</code>のようなワイルドカードのルートを利用する場合、スタティックなアセットへのリクエストにも適用され(すなわち <code>/js/dependencies/sails.io.js</code>のようなものも)、上書きされることを覚えておいてください。これを防ぐには<a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=route-target-options">以下の</a><code>skipAssets</code>オプションを利用してください。</p>
</blockquote>
<p><code>:paramName</code>を<code>*</code>の代わりにワイルドカードとして利用することにより、アドレス中のワイルドカードにマッチする部分を名前付きのパラメータとして利用することが出来ます。:</p>
<pre><code>'/user/foo/:name/bar/:age'</code></pre>
<p>これは以下のURLと同じものにマッチします:</p>
<pre><code>'/user/foo/*/bar/*'</code></pre>
<p>ただし、ワイルドカードにされた部分に与えられた値はそれぞれ<code>req.param('name')</code>と<code>req.param('age')</code>で取得出来ます。</p>
<h4>アドレス中の正規表現</h4>
<p>ワイルドカードによるアドレス記法に加えて、正規表現を用いてマッチすべきアドレスを定義する事ができます。正規表現を用いてアドレスを定義する方法は以下のとおりです。 :</p>
<p><code>"r|&lt;regular expression string&gt;|&lt;comma-delimited list of param names&gt;"</code></p>
<p>&quot;<strong>r</strong>&quot;の後に<code>|</code>、そして<em>デリミタなしの</em>正規表現文字列、そしてもう一つのパイプ、それから正規表現中で丸括弧方式で書かれた部分に対応するパラメータ名のリストと言う形式です。例えば:</p>
<p><code>"r|^/\\d+/(\\w+)/(\\w+)$|foo,bar": "MessageController.myaction"</code></p>
<p>これは <code>/123/abc/def</code>にマッチし、<code>MessageController</code>の中の<code>myaction</code>アクションを動作させその際には<code>abc</code>と<code>def</code>が<code>req.param('foo')</code>と<code>req.param('bar')</code>としてそれぞれ取り出せます。</p>
<p>2重のバックスラッシュ<code>\\d</code>と<code>\\w</code>にご留意ください。正規表現を正しく動作させるためにはこの部分のエスケープが必要です。</p>
<h4>ルートの順番</h4>
<p>ワイルドカードや正規表現を利用する際には<strong>config/routes.js</strong>における記述順の問題に関してご留意ください。URLは上に書かれたパターンから下に書かれたパターンへの順番で適用されます。例えば以下の様な設定をしたとします。:</p>
<pre><code>'/user': 'UserController.doSomething',
'/*'   : 'CatchallController.doSomethingElse'</code></pre>
<p>マッチングが途中で打ち切られてしまうので、リクエスト<code>/user</code>は最初の設定のハンドラがコード内で<code>next()</code>を呼び出さない限りは2つ目の設定にマッチすることはありません。(<a href="http://beta.sailsjs.org/#/documentation/concepts/Policies">policies</a>のみが<code>next()</code>をコールすることが出来ます。)何かとても特殊なことをするという場合以外は、各リクエストは<strong>config/routes.js</strong>中の一つのリクエストにのみマッチするようにしておいたほうが無難です。</p>
<h3>ルートターゲット</h3>
<p>カスタムルート中のアドレス部分はどのようなURLにマッチすべきかを示します。一方、<em>ターゲット</em>部分はマッチした後にSailsがどのように振る舞えばいいかを示します。ターゲットはいくつかの記法で記述できます。いくつかのケースでは並列で記述することにとっていくつかのターゲットのチェインを一つのアドレスに割り当てることも出来ますが、通常はそれぞれのアドレスは一つのターゲットを持ちます。以下にそれぞれのターゲットの記法を記し、その後提供可能な様々なオプションに関して説明します。</p>
<h4>コントローラ・アクションに対するターゲットの記法</h4>
<p>最もよく使われるターゲットは特定の<a href="http://sailsjs.org/documentation/concepts/Controllers?q=actions">コントローラアクション</a>を指定するルートです。以下の4つのルートは皆同じ意味です。:</p>
<pre><code>'GET /foo/go': 'FooController.myGoAction',
'GET /foo/go': 'Foo.myGoAction',
'GET /foo/go': {controller: "Foo", action: "myGoAction"},
'GET /foo/go': {controller: "FooController", action:"myGoAction"},
</code></pre>
<p>それぞれの設定は<code>GET /foo/go</code>が<strong>api/controllers/FooController.js</strong>の<code>myGoAction</code>マップすることを示します。もし、対応するアクションがないときにはSailsはエラーメッセージを返してルートを無視します。そうでなければ<strong>/foo/go</strong> に対する<strong>GET</strong>リクエストがなされた時はいつでもアクションのコードが実行されます。</p>
<p>この記法におけるコントローラとアクションの名前はケースセンシティブです。</p>
<p><a href="http://sailsjs.org/documentation/reference/blueprint-api">blueprints API</a>はデフォルトで(&quot;create&quot;, &quot;update&quot; and &quot;delete&quot;などの)いくつかのアクションをコントローラに追加することをご留意ください。 これらのアクションはすべてルーティング可能です。:</p>
<pre><code>'GET /foo/go': 'UserController.find'</code></pre>
<p><strong>api/controllers/UserController.js</strong>ファイルと<strong>api/models/User.js</strong>ファイルが有ったとします。そこで以上の設定においてブラウザから<strong>/foo/go</strong>にアクセスすると、Blueprintのデフォルトの &quot;find* アクションが実行され、<code>User</code>モデルの中のすべてのリストが表示されます。また、もし<code>find</code>と名付けられた<a href="http://sailsjs.org/documentation/concepts/Controllers?q=actions">カスタムアクション</a>が存在するときにはそれがかわりに呼び出されます。</p>
<h4>ビューをターゲットとする記法</h4>
<p>その他のよく使われる記法としては<a href="http://sailsjs.org/documentation/concepts/Views">ビュー</a>をバインドするものです。この記法はシンプルです。<strong>views</strong>フォルダーにおける拡張子を除いたパスを記述するものです。:</p>
<pre><code>'GET /home': {view: 'home/index'}</code></pre>
<p>このルートは<code>GET /home</code>を<strong>views/home/index.ejs</strong>に保管されているビューにマップさせるものです。（仮にデフォルトのEJS<a href="http://sailsjs.org/documentation/concepts/Views/ViewEngines.html">テンプレートエンジン</a>が利用されているとすれば。）ビューファイルが存在する限り<strong>/home</strong>への<strong>GET</strong>リクエストは表示されます。</p>
<blockquote>
<p>このルートは直接ビューにルーティングされていますのでいかなるポリシーも適用されないことをご留意ください。
詳細に関してはスタックオーバーフローの<a href="http://stackoverflow.com/questions/21303217/sailsjs-policy-based-route-with-a-view/21340313#21340313">質問</a>をご覧ください。</p>
</blockquote>
<h4>Blueprintをターゲットとする記法</h4>
<p>場合によってはSailsの<a href="http://sailsjs.org/documentation/reference/blueprint-api?q=blueprint-actions">blueprintアクション</a>に対して通常とは異なるルーティングをマッピングする必要がある時があるでしょう。例えばもしそれぞれ<strong>UserController</strong>と<strong>User</strong>と命名されたコントローラとモデルがあり、Sailsが自動的に<strong>GET /user</strong>をblueprintの全データをリスト表示する&quot;find&quot;アクションにマップしたとします。このアクションに対して別のルーティングを割り当てたい場合はBlueprintをターゲットとする記法を利用できます。:</p>
<pre><code>'GET /findAllUsers': {model: 'user', blueprint: 'find'},
'GET /user/findAll': {blueprint: 'find'}</code></pre>
<p>この設定において<code>model</code>と<code>blueprint</code>のプロパティが設定されている一方で2つ目の設定では<code>blueprint</code>のみが使われていることにご注目ください。2つ目の設定において<code>model</code>の設定が指定されてないためSailsはアドレスを見てモデルが<code>User</code>であると推定します。<code>model</code>への明示的設定により以下のようにこの推定をオーバーライドすることもできます。:</p>
<pre><code>'GET /user/findAll': {blueprint: 'find', model: 'pet'}</code></pre>
<p>しかし、アプリケーションのAPIをごちゃごちゃで理解し難いものにしてしまうため、こういうことはめったにすべきではありません。</p>
<p>もし存在しないモデルやBlueprintを指定した場合Sailsはエラーを出力し、ルーティングを無視します。</p>
<p>たとえアクションがコントローラでオーバーライドされている場合でもBlueprintをターゲットとする記法を使うことが出来ます。</p>
<h4>リダイレクトをターゲットとする記法</h4>
<p>リダイレクトアドレスを文字列で渡すだけであるアドレスを別のアドレス（アプリ内なのか外部アドレスなのかにかかわらず）にリダイレクトさせることも出来ます。:</p>
<pre><code>'/alias' : '/some/other/route'
'GET /google': 'http://www.google.com'</code></pre>
<p>Sailsアプリ内でリダレクトループを引き起こさないようにご注意ください！</p>
<p>リダイレクトの過程で多くの場合、オリジナルのHTTPリクエストは失われ、単に<strong>GET</strong>として取り扱われることにご留意ください。上記の例では<strong>/alias</strong>への<strong>POST</strong>リクエストは<strong>/some/other/route</strong>への<strong>GET</strong>リクエストとして処理されます。これはブラウザ依存の振る舞いですが、リダイレクトの間もリクエストが残ると期待しないことをおすすめします。</p>
<h4>レスポンスをターゲットとする記法</h4>
<p>以下の記法を用いてデフォルトまたはカスタムの<a href="http://sailsjs.org/documentation/concepts/Custom-Responses">レスポンス</a>に対して直接マッピングを指定することも出来ます。:</p>
<pre><code>'/foo': {response: 'notFound'}</code></pre>
<p>単に<strong>.js</strong>拡張子を除いた形で<strong>api/responses</strong>にあるレスポンス名を指定するだけです。この記法におけるレスポンス名はケースセンシティブです。もし存在しないレスポンスを指定した場合Sailsはエラーを出力してルーティングを無視します。</p>
<h4>ポリシーをターゲットとした記法</h4>
<p>多くの場合において<a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.policies.html"><strong>config/policies.js</strong></a>設定ファイルを使ってコントローラに対して<a href="http://sailsjs.org/documentation/concepts/Policies">ポリシー</a> を設定するでしょう。しかしながら時々（特に <a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=view-target-syntax">view</a>や<a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a> をターゲットする記法を使いたいときには）、個々ののルートに対してポリシーを直接指定したい時もあるでしょう。ポリシーをターゲットする記法は以下のとおりです。:</p>
<pre><code>'/foo': {policy: 'myPolicy'}</code></pre>
<p>しかしながらポリシーには以下の様な配列を使って常にひとつ以上のターゲットをチェーンする必要があります。:</p>
<pre><code>'/foo': [{policy: 'myPolicy'}, {blueprint: 'find', model: 'user'}]</code></pre>
<p>この例では<strong>myPolicy</strong>のポリシーを適用し、もしそれがパスした際には<strong>User</strong>モデルの<strong>find</strong>blueprintアクションを実行します。</p>
<h3>ルートターゲットのオプション</h3>
<p>上記で説明した様々なルート記法の他にも、ルートターゲットに付加された各種のオプションに関して、<code>req.options</code>オブジェクトの中にあるルートハンドラを通過させることが出来ます。予約されたいくつかのプロパティはルートハンドラの振る舞いに影響をあたえることが出来ます。それらのプロパティは以下の表に挙げられています。</p>
<table>
<thead>
<tr>
<th>プロパティ</th>
<th style="text-align: center;">適用可能なターゲット</th>
<th>データ型</th>
<th>詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>skipAssets</code></td>
<td style="text-align: center;">全て</td>
<td>((論理型))</td>
<td>もし、(<strong>myImage.jpg</strong>のような)ドットを含むアドレスをマッチさせたく<strong>ない</strong>場合<code>true</code>に設定してください。これにより<a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=wildcards-and-dynamic-parameters">ワイルドカード</a>を使っている場合に入力内容がアセットにマッチするのを維持します。<a href="http://sailsjs.org/documentation/concepts/Routes/URLSlugs.html">URL slugs</a>を使う際に便利です。</td>
</tr>
<tr>
<td><code>skipRegex</code></td>
<td style="text-align: center;">全て</td>
<td>((regexp型))</td>
<td>ドットを含む全てのURLをスキップするだけでは寛大すぎる場合や別の基準に基づいて正規表現をハンドルしたい場合<code>skipRegex</code>を利用することが出来ます。このオプションではマッチすべき正規表現または正規表現の配列を指定することが出来ます。もしすべての条件がマッチした場合、ハンドラーはスキップされます。ハンドラーを正規表現を使ってバインドする場合と異なり<code>skipRegex</code>文字列ではなく<em>実際の <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp">RegExpオブジェクト</a></em>を渡さなければなりません。</td>
</tr>
<tr>
<td><code>locals</code></td>
<td style="text-align: center;"><a href="http://sailsjs.org/#!/documentation/concepts/Routes/RouteTargetSyntax.html?q=controller-%2F-action-target-syntax">controller</a>, <a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=view-target-syntax">view</a>, <a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a>, <a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=response-target-syntax">response</a></td>
<td>((オブジェクト))</td>
<td>リクエストがハンドルされる間にレンダリングされるビューに対して渡されるデフォルトの<a href="http://sailsjs.org/documentation/reference/res/res.view.html?q=arguments">ローカル変数</a>を指定します。</td>
</tr>
<tr>
<td><code>cors</code></td>
<td style="text-align: center;">全て</td>
<td>((オブジェクト))または((論理型))または((文字列))</td>
<td>オリジンの異なるリクエストに対してどう処理するのかを定義します。詳細に関しては<a href="http://sailsjs.org/documentation/concepts/CORS">CORSのメインドキュメント</a>を御覧ください。</td>
</tr>
<tr>
<td><code>populate</code></td>
<td style="text-align: center;"><a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a></td>
<td>((boolean))</td>
<td>&quot;find&quot;または&quot;findOne&quot;のblueprintアクションの際にどのようなモデルフィールドが<a href="http://sailsjs.org/documentation/reference/waterline/populated-values">populate</a>されるかを表します。デフォルトでは<a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.blueprints.html"><strong>config/blueprints.js</strong></a>にある設定が適用されます。</td>
</tr>
<tr>
<td><code>skip</code>, <code>limit</code>, <code>sort</code>, <code>where</code></td>
<td style="text-align: center;"><a href="http://sailsjs.org/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a></td>
<td>((オブジェクト))</td>
<td>blueprintSetの&quot;find&quot;に対する条件式を設定します。詳細に関しては<a href="https://github.com/balderdashy/sails-docs/blob/master/reference/waterline/queries/queries.md">クエリーリファレンス</a>を御覧ください。</td>
</tr>
</tbody>
</table>
<docmeta name="uniqueID" value="RouteTargetSyntax278177">
<docmeta name="displayName" value="Custom Routes">