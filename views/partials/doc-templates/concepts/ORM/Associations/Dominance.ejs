<h1>「Dominance」</h1>
<h2>エンティティの例</h2>
<pre><code class="language-javascript">// User.js
module.exports = {
  connection: 'ourMySQL',
  attributes: {
    email: 'string',
    wishlist: {
      collection: 'product',
      via: 'wishlistedBy'
    }
  }
};</code></pre>
<pre><code class="language-javascript">// Product.js
module.exports = {
  connection: 'ourRedis',
  attributes: {
    name: 'string',
    wishlistedBy: {
      collection: 'user',
      via: 'wishlist'
    }
  }
};</code></pre>
<h3>問題</h3>
<p>このアダプタをまたがるデータ間での理レーヨンに何が起こっているのかは簡単にわかります。個々には多対多( <code>N-&gt;...</code> ) のリレーションが商品とユーザの間にあります。実際はその他のリレーション(購入等)があるとお考えになると思いますが、それらはミドルマンモデルを使ういい例だと思いますのでこの例ではよりシンプルにしました。</p>
<p>これらはすいつも全て素晴らしいですが。。。リレーションリソースは何処にあるのでしょうか。SQL的な命名法によると”ProductUser”ですね。我々はこれがどちらかの一方にあるというのはわかりますが、どっちのデータベースにあるべきなのかをコントロールしたいときはどうしましょうか。</p>
<blockquote>
<p><strong>重要な備考</strong></p>
<p>これは <em>アソシエーションの両方のモデルが<code>via</code>モディファイアの指定を持っているゆえに起こる問題です</em> !!
もし<code>via</code>がなければコレクションアトリビュートは常に<code>dominant: true</code>として振る舞います。
さらなる情報は以下のFAQを御覧ください。</p>
</blockquote>
<h2>解決策</h2>
<p>最終的にはジョインテーブルに使う第3のコネクション・アダプタがあることすらありえますが、とりあえずのところはどちらかの側にあるのかを選ぶことに焦点を当てます。</p>
<p>ここではこれをドミナンスのコンセプトを通して説明します。全てのクロスアダプタモードのリレーションにおいてどちらかの側がドミナントとみなされます。これは多国籍な両親から生まれた子供がどちらかの <a href="http://en.wikipedia.org/wiki/Japanese_nationality_law">国籍</a>を選ばなければならない例に例えれば考えやすいでしょう。</p>
<p>再びリレーションの例ですが今回はMySQLデータベースがドミナントであると明確に示しています。これは&quot;ProductUser&quot; リレーション「テーブル」がMySQLテーブルとして保存されるということです。</p>
<pre><code class="language-javascript">// User.js
module.exports = {
  connection: 'ourMySQL',
  attributes: {
    email: 'string',
    wishlist: {
      collection: 'product',
      via: 'wishlistedBy',
      dominant: true
    }
  }
};</code></pre>
<pre><code class="language-javascript">// Product.js
module.exports = {
  connection: 'ourRedis',
  attributes: {
    name: 'string',
    wishlistedBy: {
      collection: 'user',
      via: 'wishlist'
    }
  }
};</code></pre>
<h2>「ドミナント」を選ぶ</h2>
<p>この判断にはいくつかの要因が関与します:</p>
<ul>
<li>片側がSQLデータベースである場合、もう一方にコミュニケーションする前にリレーションテーブルをジョインすることが出来るため、SQLの側ににリレーションテーブルを置くほうがクエリを効率化出来ます。これは必要な総クエリ数を3から2に減少させます。</li>
<li>もしあるコネクションが他のコネクションより速い場合、その他の条件が同様であればそのコネクションに置くほうがいいでしょう。</li>
<li>一方のコネクションにマイグレートするほうが簡単な場合、マイグレート先の方を <code>dominant</code>とすべきでしょう。同様に規制やコンプライアンスの問題が判断に影響します。もしリレーションがセンシティブな患者情報を含む場合(例えば<code>Patient</code>と<code>Medicine</code>のリレーションのように)関係する全てのデータが一つの特定のデータベースに保存されているようにしたいでしょう(このケースではおそらく<code>Patient</code>を<code>dominant</code>にするでしょう)。</li>
<li>これらに加えて、一方のコネクションが読み込み専用(前の例の<code>Medicine</code>は製薬会社の読み込み専用データベースかもしれません)で書き込めない場合、そうでない方においてリレーションがきちんと保存されるようにすべきでしょう。</li>
</ul>
<h2>FAQ</h2>
<h5>どちらかのコレクションが<code>via</code>を持たなければどうなりますか?</h5>
<blockquote>
<p>もし<code>collection</code>のアソシエーションが<code>via</code>プロパティを満たない時は自動的に<code>dominant: true</code>になります。</p>
</blockquote>
<h5>両方のコレクションが<code>via</code>を持たなければどうなりますか?</h5>
<blockquote>
<p>もし両方の<code>collections</code>が<code>via</code>を持たなければリレーションは張られません。両方が<code>dominant</code>です。なぜならそれぞれ別別のリレーションテーブルだからです。</p>
</blockquote>
<h5><code>model</code>のアソシエーションはどうですか?</h5>
<blockquote>
<p>その他のタイプのアソシエーションにおいて<code>dominant</code>プロパティの仕様は禁止されています。片方に<code>dominant</code>を設定することは<code>{ via: '...', collection: '...' }</code>のようなアトリビュートを両方に持つ2つのモデルのアソシエーションにのみ必要です</p>
</blockquote>
<h5>モデルは一つのアトリビュートのドミナントになって別のもののドミナントにならないことは出来ますか。</h5>
<blockquote>
<p>モデルのドミナントは特定のリレーションについてのみの文脈であることを覚えておいてください。モデルは一つまたは複数のリレーション(アトリビュート)においてドミナントになり、別のリレーション(アトリビュート)に関してドミナントにならないということが出来ます。
例　もし<code>User</code>が<code>Toy</code>モデル上の<code>favoriteToyOf</code>を通じて<code>favoriteToys</code>と呼ばれるコレクションを持ち、<code>User</code>の<code>favoriteToys</code>は<code>dominant: true</code>の時<code>Toy</code>は依然として別の方面でドミナントになることが出来ます。<code>Toy</code> は<code>User</code>に <code>designedBy</code>アトリビュートを通じてもリレーションしており、そのドミナントが<code>dominant: true</code>であるという場合です。</p>
</blockquote>
<h5>両方のモデルがドミナントになれますか?</h5>
<blockquote>
<p>いいえ。クロスアダプタ・クロスコネクションの多対多アソシエーションにおいてもし両方のモデルが<code>dominant: true</code>に設定されている場合は起動前にエラーが出力されます。</p>
</blockquote>
<h5>どちらもドミナントにしないことは可能ですか?</h5>
<blockquote>
<p>一応出来ます。。。もしクロスアダプタ・クロスコネクションの多対多アソシエーションに置いてどちらのモデルも<code>dominant: true</code>にセットされなかった場合起動前に警告が出ます、そしてリレーションの文字列のアルファベット順に自動的に生成されるはずです。今のところは単にアルファベット順による恣意的な判断です。 :)</p>
</blockquote>
<h5>クロスアダプタではないリレーションの場合はどうですか?</h5>
<blockquote>
<p>非クロスアダプタ・非クロスコネクションのアソシエーションでは<code>dominant</code>のプロパティは静かに無視されます。我々は皆さんがいずれスキーマを複数のコネクションに分けることを考えているのではないかと思いますし、その準備を前もって行っておくことを邪魔する理由はありません。それに、これは将来の&quot;dominant&quot;の将来的な利用を予約するものですので。</p>
</blockquote>
<docmeta name="uniqueID" value="Dominance904539">
<docmeta name="displayName" value="Dominance">