<h1>ライフサイクルコールバック</h1>
<h3>概要</h3>
<p>ライフサイクルコールバックはとくていの <em>モデル</em> の前後に魔法のように自動的に呼び出されるファンクションです。例えば我々は時々<code>Account</code>モデルをcreateしたりupdateしたりする際にパスワードを暗号化する事がありますが、これにライフサイクルコールバックが使えます。</p>
<p>Sailsではデフォルトで便利なライフサイクルコールバックを露出させています。</p>
<h5><code>create</code>時のコールバック</h5>
<ul>
<li>beforeValidate: fn(values, cb)</li>
<li>afterValidate: fn(values, cb)</li>
<li>beforeCreate: fn(values, cb)</li>
<li>afterCreate: fn(newlyInsertedRecord, cb)</li>
</ul>
<h5><code>update</code>時のコールバック</h5>
<ul>
<li>beforeValidate: fn(valuesToUpdate, cb)</li>
<li>afterValidate: fn(valuesToUpdate, cb)</li>
<li>beforeUpdate: fn(valuesToUpdate, cb)</li>
<li>afterUpdate: fn(updatedRecord, cb)</li>
</ul>
<h5><code>destroy</code>時のコールバック</h5>
<ul>
<li>beforeDestroy: fn(criteria, cb)</li>
<li>afterDestroy: fn(destroyedRecords, cb)</li>
</ul>
<h3>例</h3>
<p>もしパスワードを保存前に暗号化したいときは<code>beforeCreate</code>コールバックを使います。</p>
<pre><code class="language-javascript">var bcrypt = require('bcrypt');

module.exports = {

  attributes: {

    username: {
      type: 'string',
      required: true
    },

    password: {
      type: 'string',
      minLength: 6,
      required: true,
      columnName: 'encrypted_password'
    }

  },

  // コールバック
  beforeCreate: function (values, cb) {

    // パスワードを暗号化
    bcrypt.hash(values.password, 10, function(err, hash) {
      if(err) return cb(err);
      values.password = hash;
      //エラーを返す引数でcd()をコールします。これはいくつかの条件がFailした時に処理全体をキャンセルすることが出来、便利です。
      cb();
    });
  }
};</code></pre>
<docmeta name="uniqueID" value="Lifecyclecallbacks631538">
<docmeta name="displayName" value="Lifecycle callbacks">