<h1>モデルの設定</h1>
<p>特定のモデルでのデフォルトをオーバーライドするために以下のプロパティをアプリケーションのモデル定義のトップレベルにおいてステイすることが出来ます。あなたのアプリケーションで使われすすべてのモデルで使われるデフォルト設定をオーバーライドするためには<a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md"><code>config/models.js</code></a>を編集してください。</p>
<h3><code>migrate</code></h3>
<pre><code class="language-javascript">migrate: 'safe'</code></pre>
<p>単純に言うとこの設定はSailsがあなたのスキーマのテーブルやコレクション、セットなどをどのようにして自動リビルドするかを定義するものです。</p>
<p>本番環境(NODE_ENV===&quot;production&quot;の状態の時)にはSailsはデータを不用意に削除してしまうのを防ぐため、つねに<code>migrate:"safe"</code>を利用します。
しかし開発環境では簡便のために他の方法を使うことが出来ます。</p>
<ol>
<li>safe  - データベースを自動マイグレーションしません。開発者が手動でやります。</li>
<li>alter - データを保持したまま自動マイグレーションします。（実験的運用）</li>
<li>drop  - Sailsを起動するときにすべてのデータを消してデータベースを再構築します。</li>
</ol>
<p>Sailsを起動するときにWaterlineはデータベースの中にあるすべてのデータをバリデーションします。このフラグはデーが破壊された時にどのように振る舞うかを伝えるものです。起動時に破損したデータを無視したいのであれば<code>safe</code>にセットすることが出来ます。</p>
<table>
<thead>
<tr>
<th>自動マイグレーションストラテジー</th>
<th>定義</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>safe</code></td>
<td>データベースを自動マイグレーションしません。開発者が手動でやります。</td>
</tr>
<tr>
<td><code>alter</code></td>
<td>データを保持したまま自動マイグレーションします。（実験的運用）</td>
</tr>
<tr>
<td><code>drop</code></td>
<td>Sailsを起動するときにすべてのデータを消してデータベースを再構築します。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>備考　<code>drop</code>を行うことではもちろん、<code>alter</code>でもデータ消失のリスクが有ります。ご注意ください。本番環境でのデータセットでは決して<code>drop</code>や<code>alter</code>を使わないでください。更に、大規模なデータベースでは<code>alter</code>を選択すると起動に時間がかかることがあります。これにより<code>sails console</code>のようなコマンドがハングアップしているように見えることがあります。</p>
</blockquote>
<h3><code>schema</code></h3>
<pre><code class="language-javascript">schema: true</code></pre>
<p>データベースがスキーマレスなデータ構造に対応している場合、このフラグでスキーマレスとスキーマモードの変更ができます。オフの時にはレコード内に任意のデータを保存できるようになります。オンの時にはモデルのアトリビュートで定義された<code>attribute</code>オブジェクトのみが保存できます。</p>
<p>スキーマがなくてもいいアダプタ（MongoやRedisなど）では<code>schema:false</code>がデフォルトの設定になります。</p>
<h3><code>connection</code></h3>
<pre><code class="language-javascript">connection: 'my-local-postgresql'</code></pre>
<p>設定済みのデータベース<a href="http://sailsjs.jp/documentation/reference/sails.config/sails.config.connections.html">接続設定</a>のうち、このモデルがデータを取得したるデータを書き込むものです。デフォルトは<code>sails-disk</code>をつかったSailsのデフォルトのデータベースである<code>localDiskDb</code>が選択されます。`</p>
<h3><code>identity</code></h3>
<pre><code class="language-javascript">identity: 'purchase'</code></pre>
<p><code>user</code>のような、小文字で書かれたこのモデルのユニークキーです。デフォルトではモデルの<code>identity</code>はファイル名を小文字化したもので自道的に推測されますモデル内でこのフラグを変更してはいけません。</p>
<h3><code>globalId</code></h3>
<pre><code class="language-javascript">globalId: 'Purchase'</code></pre>
<p>このフラッグはモデルに（モデルのグローバルアクセスが許可されている場合に限り）グローバルでアクセス可能な際の名前を決定します。models-においてモデルのグローバルを無効化するためにこのフラグを使ってはいけません。<a href="http://sailsjs.jp/documentation/concepts/Globals?q=disabling-globals">sails.config.globals</a>を御覧ください。</p>
<h3>autoPK</h3>
<pre><code class="language-javascript">autoPK: true</code></pre>
<p>自動で主キーアトリビュートを定義するかどうかを定義するフラグです。デフォルトのPKはアダプタによって異なります。（例えば、MySQLはオートインクリメントの整数を使いますし、Mongo DBはランダムなUUIDを使います。）いずれのケースにおいてもautoPKで作成された主キーはユニークです。もしこの機能をOffにしたら自動で主キーは作成されなくなりますので手動設定する必要があります.例：</p>
<pre><code class="language-js">attributes: {
  sku: {
    type: 'string',
    primaryKey: true,
    unique: true
  }
}</code></pre>
<h3><code>autoCreatedAt</code></h3>
<pre><code class="language-javascript">autoCreatedAt: true</code></pre>
<p>自動で<code>createdAt</code>アトリビュートをモデルに追加するかどうかを定義するフラグです。デフォルトでは<code>createdAt</code>にはレコードが作成された時に自動で現在時刻のタイムスタンプが記録されます。例：</p>
<pre><code class="language-js">attributes: {
  createdAt: {
    type: 'datetime',
    defaultsTo: function (){ return new Date(); }
  }
}</code></pre>
<h3><code>autoUpdatedAt</code></h3>
<pre><code class="language-javascript">autoUpdatedAt: true</code></pre>
<p>自動で<code>updatedAt</code>アトリビュートをモデルに追加するかどうかを定義するフラグです。デフォルトでは<code>updatedAt</code>には毎回更新が行われうごとに自動で現在時刻のタイムスタンプが記録されます。例: </p>
<pre><code class="language-js">attributes: {
  updatedAt: {
    type: 'datetime',
    defaultsTo: function (){ return new Date(); }
  }
}</code></pre>
<h3>tableName</h3>
<pre><code class="language-javascript">tableName: 'some_preexisting_table'</code></pre>
<p><code>tableName</code>を加える事にアダプタの実際のコレクションの中におけるコレクション名を指定することが出来ます。これは <em>テーブル名には限りませ</em> ん。MySQLやPostgreSQL、Oracleなどではこれはテープル名を意味しますが、Mongo DBやRedisではコレクション名を意味するなどのことが行われます。<code>tableName</code>が定義されていなければWaterlineはモデルの<code>identity</code>を<code>tableName</code>として利用します。</p>
<p>これはすでに存在するレガシーのデータベースと一緒に利用する際に便利です。</p>
<!-- in WL2, this is `cid` (but is backwards-compatible) -->
<h3><code>attributes</code></h3>
<pre><code class="language-js">attributes: {
  name: { type: 'string' },
  email: { type: 'email' },
  age: { type: 'integer' }
}</code></pre>
<p><a href="http://sailsjs.jp/documentation/concepts/ORM/Attributes.html">アトリビュート</a>の項目をご覧ください。</p>
<docmeta name="uniqueID" value="Modelconfiguration960213">
<docmeta name="displayName" value="Model Settings">