<h1>Waterlineクエリー言語</h1>
<p>Waterline Query languageはサポートされているすべてのデータベースコネクタからデータを取り出すことの出来るオブジェクトベースの比較式です。つまり、MySQLで使う時と同じクエリをMongo DBでもRediasでも使うことが出来るということです。これにより、コードの変更なしにデータベースの変更が可能です。</p>
<h3>クエリー言語の基礎</h3>
<p>Criteriaオブジェクトは４種類のオブジェクトのうち一つから構成されます。これらはクエリオブジェクトのトップレベルオブジェクトです。
このオブジェクトはMongoDBで使われているクエリオブジェクトに「ゆるく」似ていますがちょっとした違いが有ります。</p>
<p>クエリはアトリビュートを指定するために<code>where</code>を使い、また<code>limit</code>や<code>skip</code>などのオプションをオブジェクトのどこの部分を取り出すかを指定するために使うことができ、<code>where</code>が含まれない場合は<code>where</code>はオブジェクト全体を指しているものとしてみなされます。</p>
<pre><code class="language-javascript">Model.find({ where: { name: 'foo' }, skip: 20, limit: 10, sort: 'name DESC' });

// OR

Model.find({ name: 'foo' })</code></pre>
<h4>Key Pairs</h4>
<p>キーペアは指定された値に厳密に合致するレコードを探すのに使えます。キーはモデルの中のどのアトリビュートを指し示すかを表し、値はアトリビュートの中の値がどの内容に厳密に合致して欲しいか指定します。これはCriteriaオブジェクトの基礎です。</p>
<pre><code class="language-javascript">Model.find({ name: 'walter' })</code></pre>
<p>複数のアトリビュート指定を同時に行うことも出来ます。</p>
<pre><code class="language-javascript">Model.find({ name: 'walter', state: 'new mexico' })</code></pre>
<h4>Modified Pairs</h4>
<p>改良型ペアは様々な補助演算子を使い、厳密比較ではうまくいかないケースをサポートします。</p>
<pre><code class="language-javascript">Model.find({
  name : {
    'contains' : 'alt'
  }
})</code></pre>
<h4>In Pairs</h4>
<p>INクエリはMySQLの'in queries'と似ています。配列中のそれぞれのエレメントはorとして処理されます。</p>
<pre><code class="language-javascript">Model.find({
  name : ['Walter', 'Skyler']
});</code></pre>
<h4>Not-In Pairs</h4>
<p>Not-Inクエリは<code>in</code>クエリと似ていますが、比較オブジェクトがネストされているという部分が異なります。</p>
<pre><code class="language-javascript">Model.find({
  name: { '!' : ['Walter', 'Skyler'] }
});</code></pre>
<h4>Or Pairs</h4>
<p>クエリペアの配列を使うことで<code>OR</code>クエリが実行できます。
配列の中のいずれかの条件を満たすレコードが結果として帰ってきます。</p>
<pre><code class="language-javascript">Model.find({
  or : [
    { name: 'walter' },
    { occupation: 'teacher' }
  ]
})</code></pre>
<h3>Criteria修飾子</h3>
<p>クエリを作成する際には以下の修飾子を利用することが出来ます。</p>
<ul>
<li><code>'&lt;'</code> / <code>'lessThan'</code></li>
<li><code>'&lt;='</code> / <code>'lessThanOrEqual'</code></li>
<li><code>'&gt;'</code> / <code>'greaterThan'</code></li>
<li><code>'&gt;='</code> / <code>'greaterThanOrEqual'</code></li>
<li><code>'!'</code> / <code>'not'</code></li>
<li><code>'like'</code></li>
<li><code>'contains'</code></li>
<li><code>'startsWith'</code></li>
<li><code>'endsWith'</code></li>
</ul>
<h4>'&lt;' / 'lessThan'</h4>
<p>指定された値より小さな値を持つレコードを検索します。</p>
<pre><code class="language-javascript">Model.find({ age: { '&lt;': 30 }})</code></pre>
<h4>'&lt;=' / 'lessThanOrEqual'</h4>
<p>指定された値と同じ値か、より小さな値を持つレコードを検索します。</p>
<pre><code class="language-javascript">Model.find({ age: { '&lt;=': 21 }})</code></pre>
<h4>'&gt;' / 'greaterThan'</h4>
<p>指定された値より大きな値を持つレコードを検索します。</p>
<pre><code class="language-javascript">Model.find({ age: { '&gt;': 18 }})</code></pre>
<h4>'&gt;=' / 'greaterThanOrEqual'</h4>
<p>指定された値と同じ値か、より大きな値を持つレコードを検索します。</p>
<pre><code class="language-javascript">Model.find({ age: { '&gt;=': 21 }})</code></pre>
<h4>'!' / 'not'</h4>
<p>指定した値と合致しないレコードを検索します。</p>
<pre><code class="language-javascript">Model.find({ name: { '!': 'foo' }})</code></pre>
<h4>'like'</h4>
<p><code>%</code>記号を使ってパターンマッチングでレコードを検索します。(大文字と小文字を区別します)</p>
<pre><code class="language-javascript">Model.find({ food: { 'like': '%beans' }})</code></pre>
<h4>'contains'</h4>
<p>両端に<code>%</code>記号を付けたパターンマッチング検索のショートカットです。
指定した内容が文字列中のどこかに存在するレコードを返します。(大文字と小文字を区別します)</p>
<pre><code class="language-javascript">Model.find({ class: { 'contains': 'history' }})

// 上記のコードは下記のコードと一緒です。

Model.find({ class: { 'like': '%history%' }})</code></pre>
<h4>'startsWith'</h4>
<p>右端に<code>%</code>記号を付けたパターンマッチング検索のショートカットです。
文字列が指定した内容で始まるレコードを返します。(大文字と小文字を区別します)</p>
<pre><code class="language-javascript">Model.find({ class: { 'startsWith': 'american' }})

// 上記のコードは下記のコードと一緒です。

Model.find({ class: { 'like': 'american%' }})</code></pre>
<h4>'endsWith'</h4>
<p>左端に<code>%</code>記号を付けたパターンマッチング検索のショートカットです。
文字列が指定した内容で終わるレコードを返します。(大文字と小文字を区別します)</p>
<pre><code class="language-javascript">Model.find({ class: { 'endsWith': 'can' }})

// 上記のコードは下記のコードと一緒です。

Model.find({ class: { 'like': '%can' }})</code></pre>
<h4>'Date Ranges'</h4>
<p>You can do date range queries using the comparison operators.</p>
<pre><code class="language-javascript">Model.find({ date: { '&gt;': new Date('2/4/2014'), '&lt;': new Date('2/7/2014') } })</code></pre>
<h3>Query Options</h3>
<p>クエリプションを使うことでクエリに対して帰ってくる結果をさらに改良することが出来ます。
現在使えるオプションはい次のものです。:</p>
<ul>
<li><code>limit</code></li>
<li><code>skip</code></li>
<li><code>sort</code></li>
</ul>
<h4>Limit</h4>
<p>返すレコードの数を制限します。</p>
<pre><code class="language-javascript">Model.find({ where: { name: 'foo' }, limit: 20 })</code></pre>
<h4>Skip</h4>
<p>最初の指定した個数を除く全てのレコードを受け取ります。</p>
<pre><code class="language-javascript">Model.find({ where: { name: 'foo' }, skip: 10 });</code></pre>
<h5>Pagination</h5>
<p><code>skip</code>と<code>limit</code>を一緒に使うことでページネーションが出来ます。</p>
<pre><code class="language-javascript">Model.find({ where: { name: 'foo' }, limit: 10, skip: 10 });</code></pre>
<p><code>paginate</code>は<code>skip</code>と<code>limit</code>を一緒に使うのと同じ役割を果たすWaterlineヘルパーメソッドです。</p>
<pre><code class="language-javascript">Model.find().paginate({page: 2, limit: 10});</code></pre>
<blockquote>
<p><strong>Waterline</strong></p>
<p>WaterlineAPIに関して更に詳しくは以下のドキュメントで確認できます。:</p>
<ul>
<li><a href="http://sailsjs.org/documentation/reference/waterline/queries">Sails.js Documentation</a></li>
<li><a href="https://github.com/balderdashy/waterline/blob/master/README.md">Waterline README</a></li>
<li><a href="https://github.com/balderdashy/waterline-docs">Waterline Documentation</a></li>
<li><a href="https://github.com/balderdashy/waterline">Waterline Github Repository</a></li>
</ul>
</blockquote>
<h4>ソート</h4>
<p>検索結果をアトリビュートの名前でソートすることが出来ます。
単にアトリビュートを指定するだけで昇順のソートが出来る他<code>asc</code>または<code>desc</code>のフラグを指定することでそれぞれのアトリビュートに対して昇順と降順の並べ順を指定できます。</p>
<pre><code class="language-javascript">// nameの昇順で並び替え。
Model.find({ where: { name: 'foo' }, sort: 'name' });

// nameの降順で並び替え。
Model.find({ where: { name: 'foo' }, sort: 'name DESC' });

// nameの昇順で並び替え。
Model.find({ where: { name: 'foo' }, sort: 'name ASC' });

// バイナリNotationで並び替え。
Model.find({ where: { name: 'foo' }, sort: { 'name': 1 }});

// 複数のアトリビュートで並び替え。
Model.find({ where: { name: 'foo' }, sort: { name:  1, age: 0 });</code></pre>
<blockquote>
<p><strong>ケースセンシティブか？</strong></p>
<p>Waterlineのすべてのクエリは<strong>ケースセンシティブではありません</strong>。このおかげでクエリを簡単に実行できますが、文字列をインデックスするのは難しくなります。このことは文字列を検索したり文字列で並び替えたりするときに念頭に置いておいてください。</p>
<p>現在のところ、<strong>ケースセンシティブ</strong>なクエリを発行するもっともよい手段は <a href="http://sailsjs.org/documentation/reference/waterline/models/native.html"><code>.native()</code></a>か<a href="http://sailsjs.org/documentation/reference/waterline/models/query.html"><code>.query()</code></a>のメソッドを使うことです。</p>
</blockquote>
<docmeta name="displayName" value="Query Language">