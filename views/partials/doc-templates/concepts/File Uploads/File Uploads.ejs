<h1>ファイルアップロード</h1>
<p>SailsでのファイルアップロードはプレーンなNode.jsやExpressアプリケーションと似ています。しかし、PHP、.NET、Python、Ruby、Javaのような異なるプラットフォームを使ってきた人からすると、それらとはちょっと違うかもしれません。しかし、恐れることはありません:コアチームは安全性とスケーラビリティを維持したうえで簡単にファイルアップロードを出来るようにしました。</p>
<p>Sailsには<a href="https://github.com/balderdashy/skipper">Skipper</a>と呼ばれるパワフルな「ボディーパーサ」があり、サーバのファイルシステム（すなわちハードディスク）に限らずAmazon S3やMongoDBのgridfsなど対応する全てのファイルアダプタに対して簡単にストリーミングアップロードを行うことが出来ます。</p>
<h3>ファイルをアップロードする</h3>
<p>ファイルは <em>ファイルパラメータ</em> としてHTTPWebサーバにアップロードされます。これは&quot;name&quot;、&quot;email&quot;、&quot;password&quot;にようなテキストパラメータをURLに対してPOSTすると同じように&quot;avatar&quot;、&quot;newSong&quot;のようなファイルパラメータを送れるということです。</p>
<p>以下の例を見てみましょう:</p>
<pre><code class="language-javascript">req.file('avatar').upload(function (err, uploadedFiles) {
  // ...
});</code></pre>
<p>ファイルはどれかのコントローラの中の<code>action</code>の中でアップロードされなければなりません。以下はどのようにユーザにアバターをアップロードさせて、それを彼らのアカウントに紐付けるかの関してのもう少し掘り下げた例です。アクセスコントロールに関してはすでにポリシーで実行され、ログイン済みのユーザのidは<code>req.session.me</code>に保管されていると想定します。</p>
<pre><code class="language-javascript">// api/controllers/UserController.js
//
// ...

/**
 * ログイン済みのユーザに関してのアバターをアップロードする
 *
 * (POST /user/avatar)
 */
uploadAvatar: function (req, res) {

  req.file('avatar').upload({
    // 合計10MBを超えるサイズのファイルはアップロードを許可しない
    maxBytes: 10000000
  },function whenDone(err, uploadedFiles) {
    if (err) {
      return res.negotiate(err);
    }

    // 何のファイルもアップロードされなければエラーを返す。
    if (uploadedFiles.length === 0){
      return res.badRequest('No file was uploaded');
    }

    // ユーザがアバターにアクセス可能なURLと"fd"を保管する
    User.update(req.session.me, {

      // アバターがダウンロード可能なユニークなURLを生成する
      avatarUrl: require('util').format('%s/user/avatar/%s', sails.getBaseUrl(), req.session.me),

      // ひとつ目のファイルを取得し、その`fd` (ファイルディスクリプタ)を使う
      avatarFd: uploadedFiles[0].fd
    })
    .exec(function (err){
      if (err) return res.negotiate(err);
      return res.ok();
    });
  });
},

/**
 * 指定されたidのユーザーのアバターをダウンロードする
 *
 * (GET /user/avatar/:id)
 */
avatar: function (req, res){

  req.validate({
    id: 'string'
  });

  User.findOne(req.param('id')).exec(function (err, user){
    if (err) return res.negotiate(err);
    if (!user) return res.notFound();

    // アバターイメージをアップロードしていないユーザ。
    // (このエンドポイントをヒットするべきではなく、デフォルトの画像を使うべき)
    if (!user.avatarFd) {
      return res.notFound();
    }

    var SkipperDisk = require('skipper-disk');
    var fileAdapter = SkipperDisk(/* optional opts */);

    // ファイルをストリーム送信する
    fileAdapter.read(user.avatarFd)
    .on('error', function (err){
      return res.serverError(err);
    })
    .pipe(res);
  });
}

//
// ...</code></pre>
<h4>これらのファイルはどこへいきますか？</h4>
<p>デフォルトの<code>receiver</code>を使っているときはアップロードされたファイルは<code>myApp/.tmp/uploads/</code>ディレクトリに行きます。これは<code>dirname</code>オプションを使って上書きできます。<code>.upload()</code>とコールする時とskipper-diskアダプタをコールするときの両方でこのオプションを提供しなければならない（このようにして同じ場所にアップロード、ダウンロードする）ということを覚えておいてください。</p>
<h4>カスタムのフォルダにアップロードする.tmp/uploads.</h4>
<p>上記の例では.tmp/uploadsにファイルをアップロードしました。カスタムフォルダー‘assets/images’に設定するにはどうすればいいでしょうか。以下のようにアップロードファンクションにオプションを追加することで出来ます。</p>
<pre><code class="language-javascript">req.file('avatar').upload({
  dirname: require('path').resolve(sails.config.appPath, '/assets/images')
},function (err, uploadedFiles) {
  if (err) return res.negotiate(err);

  return res.json({
    message: uploadedFiles.length + ' file(s) uploaded successfully!'
  });
});</code></pre>
<h3>例</h3>
<h4><code>api</code>を作る</h4>
<p>最初にデータを保存するための新しい<code>api</code>を作る必要があります。これをコマンドラインツールを使って行います。</p>
<pre><code class="language-sh">$ sails generate api file

debug: Generated a new controller `file` at api/controllers/FileController.js!
debug: Generated a new model `File` at api/models/File.js!

info: REST API generated @ http://localhost:1337/file
info: and will be available the next time you run `sails lift`.</code></pre>
<h4>コントローラアクションを書く</h4>
<p>それではファイルアップロードを初期化するための<code>index</code>アクションとファイルを受け取るための<code>upload</code>アクションを書きましょう。</p>
<pre><code class="language-javascript">
// myApp/api/controllers/FileController.js

module.exports = {

  index: function (req,res){

    res.writeHead(200, {'content-type': 'text/html'});
    res.end(
    '&lt;form action="http://localhost:1337/file/upload" enctype="multipart/form-data" method="post"&gt;'+
    '&lt;input type="text" name="title"&gt;&lt;br&gt;'+
    '&lt;input type="file" name="avatar" multiple="multiple"&gt;&lt;br&gt;'+
    '&lt;input type="submit" value="Upload"&gt;'+
    '&lt;/form&gt;'
    )
  },
  upload: function  (req, res) {
    req.file('avatar').upload(function (err, files) {
      if (err)
        return res.serverError(err);

      return res.json({
        message: files.length + ' file(s) uploaded successfully!',
        files: files
      });
    });
  }

};</code></pre>
<h4>これらはどこに行きますか？</h4>
<p>デフォルトの<code>receiver</code>を使うとアップロードされたファイルは<code>myApp/.tmp/uploads/</code>に保存されます。<code>upload</code>で好きな保存場所に変更することが出来ます。</p>
<h4>カスタムのフォルダにアップロードする.tmp/uploads.</h4>
<p>上記の例では.tmp/uploadsにファイルをアップロードしました。カスタムフォルダー‘assets/images’に設定するにはどうすればいいでしょうか。以下のようにアップロードファンクションにオプションを追加することで出来ます。</p>
<pre><code class="language-javascript">req.file('avatar').upload({
  dirname: './assets/images'
},function (err, uploadedFiles) {
  if (err) return res.negotiate(err);

  return res.json({
    message: uploadedFiles.length + ' file(s) uploaded successfully!'
  });
});</code></pre>
<h2>Read more</h2>
<ul>
<li><a href="https://github.com/balderdashy/skipper">Skipper docs</a></li>
<li><a href="http://sailsjs.org/documentation/concepts/file-uploads/uploading-to-s-3">Uploading to Amazon S3</a></li>
<li><a href="http://sailsjs.org/documentation/concepts/file-uploads/uploading-to-grid-fs">Uploading to Mongo GridFS</a></li>
</ul>
<docmeta name="displayName" value="File Uploads">