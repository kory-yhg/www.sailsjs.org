<h1>クロスオリジンでのリソース共有(CORS)</h1>
<!--
デフォルトのSailはすでに同じドメインからのAJAXリクエストを処理するように設定されています。でも他のドメインからのリクエストに対応したい場合はどうでしょう。ブラウザのJSONPをセットアップアップすることができます。これこそが [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing)がっ必要な場面なんです。
-->
<p><a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>は別のドメイン(例：myothersite.com)から提供されたブラウザスクリプトがあなたのサーバ(例：api.mysite.com)にアクセスできるようになる仕組みです。JSONPと同じく、CORSのゴールは <a href="http://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy</a>を回避し、他のドメインで動作しているjavascriptコードからのリクエストに応対するための安全な方法です。しかし、JSONPと違ってこれはGETリクエスト以外に対しても動作してしまいます。</p>
<p>Sailsは全てのドメインや特定のドメインリストからのアクセスを許可するように設定が可能です。これはルートベースで指定することもアプリケーションの全てのルートに関して指定することも可能です。</p>
<h3>CORSを有効化する</h3>
<p>セキュリティ―上の理由からSailsではCORSはデフォルトで無効になっています。しかし、とても簡単に有効化することができます。</p>
<p><em>全ての</em> ドメインからの <em>全ての</em> ルートへのクロスオリジンアクセスを許可するためには単純に<a href="http://beta.sailsjs.org/#/documentation/reference/sails.config/sails.config.cors.html"><code>config/cors.js</code></a>で<code>allRoutes</code>を有効化するだけです。:</p>
<pre><code class="language-javascript">allRoutes: true</code></pre>
<p>全てのオプションの利用方法は<a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.cors.html"><code>sails.config.cors</code></a> をご覧下さい。</p>
<h3>それぞれのルートに対してCORSを設定する</h3>
<p>CORS設定のゴールは<code>config/routes.js</code>にあるそれぞれのルートに対してクロスオリジンアクセスを許可（あるいは拒否）することです。それぞれのルートへのCORSを許可することを示すには<code>config/cors.js</code>の中で<code>cors</code>プロパティを<code>true</code>にすることで行えます。:</p>
<pre><code class="language-javascript">"get /foo": {
   controller: "FooController",
   action: "index",
   cors: true
}</code></pre>
<p>もし<code>config.cors.js</code>で<code>allRoutes</code>を<code>true</code>にセットし特定のルートを除外したい場合、<code>cors</code>に対して<code>false</code>を明示することで行えます。:</p>
<pre><code class="language-javascript">"get /foo": {
   controller: "FooController",
   action: "index",
   cors: false
}</code></pre>
<p>ルートに対しての特定のCORSパラメータを上書きするには<code>cors</code>プロパティオブジェクトを追加します。:</p>
<pre><code class="language-javascript">"get /foo": {
   controller: "FooController",
   action: "index",
   cors: {
     origin: "http://sailsjs.org, http://sailsjs.com",
     credentials: false
  }
}</code></pre>
<h3>セキュリティレベル</h3>
<p>デフォルトではたとえCORSが有効でも、Sailはどのドメインからくるアクセスに対しても処理を行います:つまり、単にレスポンスに適切なヘッダーを付加し、<em>クライアントが</em> 情報を表示させるかどうかを判断するのです。例えばCORSのホワイトリストに入っていないドメインから<code>/foo/bar</code>に対して<code>GET</code>リクエストを行った場合でも<code>FooController.js</code>コントローラにある<code>bar</code>アクションは依然として実行されますが、ブラウザがその結果を捨てるのです。これは直感に反するような気がしますが、<a href="http://en.wikipedia.org/wiki/Same-origin_policy">Same-Origin Policy</a>が想定している種類の攻撃から保護した上で、ブラウザではないクライアント(<a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">Postman</a> や <a href="http://curl.haxx.se/">curl</a>のような) がアクセス可能にすることは重要な事なのです。</p>
<p>もし許可していないドメインからのアクセスを完全に防ぎたい場合は<code>securityLevel</code>設定が利用可能です:</p>
<pre><code class="language-javascript">module.exports.cors = {
  allRoutes: true,
  origin: "http://sailsjs.org",
  securityLevel: 1
}</code></pre>
<p>セキュリティレベル１（高）は許可されていない全てのドメインからの<code>http</code> あるいは <code>https</code>のリクエストに対して403ステータスを返します。セキュリティレベル２（特に高い）でも同じようにしますが今度は <em>全ての</em> プロトコルを対象にします。（そのためPostmanやcurlのようなものは動作しません）</p>
<docmeta name="uniqueID" value="cors198259">
<docmeta name="displayName" value="CORS">