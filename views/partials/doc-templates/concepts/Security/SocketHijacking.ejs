<h1>セッションハイジャック</h1>
<p>残念ながらクロスサイトによるリクエスト偽装はHTTPプロトコルに限った話ではありません。Webソケットハイジャック（<a href="http://www.christian-schneider.net/CrossSiteWebSocketHijacking.html">CSWSH</a>ともいわれています）は多くのリアルタイムアプリケーションで見られる脆弱性です。幸いSailsではHTTPとWebSocketのいずれも「一等市民」と見なしていますので内蔵されている<a href="http://sailsjs.jp/documentation/concepts/Security/CSRF.html">CSRF protection</a>と<a href="http://sailsjs.jp/documentation/concepts/Security/CORS.html">configurable CORS rulesets</a> は両方のプロトコルをサポートしています。</p>
<p><a href="http://sailsjs.jp/documentation/anatomy/myApp/config/csrf.js.html"><code>config/csrf.js</code></a> でSailsに内蔵の防護策を有効化し、入ってくるソケットリクエストに<code>_csrf</code>を持たせることでアプリケーションをCSWSHに対応させることができます。さらにアプリケーションがクロスオリジン（別のドメインやサブドメイン）のソケット接続を許可する場合それにしたがってCORS設定を変更します。<a href="http://sailsjs.jp/documentation/anatomy/myApp/config/sockets.js.html"><code>config/sockets.js</code></a>で<code>authorization</code>設定を行い、ニーズに合わせてソケットの接続の可否を許可するカスタムのファンクションを用意することもできます。</p>
<h4>備考</h4>
<ul>
<li>CSWSH防御はユーザが同じクライアントアプリケーションから複数のソケットサービスに接続すること（Chromeの中に保存されているクッキーのデータがChase.comとHorrible-Hacker-Site.comの両方で利用可能になるような）を想定した機能です。</li>
</ul>
<docmeta name="uniqueID" value="SocketHijacking397141">
<docmeta name="displayName" value="Socket Hijacking">