<h1>デフォルトのレスポンス</h1>
<p>以下のレスポンスは<code>/api/responses</code>以下にある全ての新しいSailsアプリケーションにバインドされています。それぞれのレスポンスはJSONを希望しているクライアントにはHTTPステータスコードと<code>status</code>、関連するエラーの情報を含んだキーからなる標準化されたJSONオブジェクトを返します。</p>
<h4>res.serverError(errors)</h4>
<p>このレスポンスは<code>Error</code>オブジェクトを適切に可読化して<code>errors</code>アレイに入れることで標準化します。<code>errors</code>は一つまたは複数の文字列か<code>Error</code>オブジェクトです。その後、すべてのエラーをSailsのロガー（通常はコンソールです）に記録し、クライアントがHTTPを要求していれば<code>views/500.*</code>ファイルでレスポンスを返し、クライアントがJSONを要求していればJSONオブジェクトで返します。開発モードではエラーのリストがレスポンスに含まれす。プロダクションモードでは実際のエラーは抑制されます。</p>
<h4>res.badRequest(validationErrors, redirectTo)</h4>
<p>JSONを要求するリクエストに対しては<code>validationErrors</code>として400ステータスコードとともに関連するデータを返します。</p>
<p>トラディショナルな（AJAXでない）Webフォームに関してはミドルウエアは以下の流れのユーザが不正なデータを送った際に行われるベストプラクティスを実行します:</p>
<ul>
<li>初めに1回限り使い捨てのflash変数がセットされますが、この中にはおそらくセマンティックなバリデーションエラーの配列が入っています。</li>
<li>それからユーザは<code>redirectTo</code>（つまりその不正なリクエストの発生元）にリダイレクトバックされます。</li>
<li>ここでコントローラとビュー（あるいはコントローラかビュー）は <code>errors</code>のflash変数を使ってエラーメッセージを表示したりフォームをハイライトしたりします。</li>
</ul>
<h4>res.notFound()</h4>
<p>リクエスト元がJSONを要求している場合、単純に404ステータスコードと<code>{status: 404}</code>を返します。</p>
<p>そうでない場合は、<code>myApp/views/404.*</code>のパスのビューが呼び出されます。ビューが見つからない場合は単にJSONレスポンスを返します。</p>
<h4>res.forbidden(message)</h4>
<p>リクエスト元がJSONを要求している場合、単純に403ステータスコードと<code>message</code>の中身を返します。</p>
<p>そうでない場合は、<code>myApp/views/403.*</code>のパスのビューが呼び出されます。ビューが見つからない場合は単にJSONレスポンスを返します。</p>
<docmeta name="displayName" value="Default Responses">