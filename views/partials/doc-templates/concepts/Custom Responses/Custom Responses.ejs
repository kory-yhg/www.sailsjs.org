<h1>カスタムレスポンス</h1>
<h3>概要</h3>
<p>Sails 0.10はカスタムレスポンスをサポートしています。また、Sailsは一般的なレスポンスタイプに関して便利なデフォルトのレスポンスを用意しています。これらのレスポンスはプロジェクトファイルの<code>/api/responses</code>ディレクトリーに有ります。 これらをカスタマイズするためには適切な.jsファイルを編集してください。</p>
<p>簡単な例として以下のコントローラアクションに関して考えてみましょう。:</p>
<pre><code class="language-javascript">foo: function(req, res) {
   if (!req.param('id')) {
     res.status(400);
     res.view('400', {message: 'Sorry, you need to tell us the ID of the FOO you want!'});
   }
   ...
}</code></pre>
<p>このコードではBad requestを処理してエラー原因を記述したエラーメッセージを返信しています。しかし、このコードには以下の様な問題が有ります。:</p>
<ul>
<li><em>一般化されていない</em>：このコードはこのインスタンス特有のものですので、他の場所でもフォーマットが同じようになるために気を付けなければなりません。</li>
<li><em>抽象化されていない</em>：他の場所で同じことをやらなければならない場合、コピーペーストしなければなりません。</li>
<li>レスポンスが<em>content-negotiated</em>でない： クライアントがJSONをリクエストしていた場合は残念なことになります。</li>
</ul>
<p>それではこれを解決することを考えてみましょう。:</p>
<pre><code class="language-javascript">foo: function(req, res) {
   if (!req.param('id')) {
     res.badRequest('Sorry, you need to tell us the ID of the FOO you want!');
   }
   ...
}</code></pre>
<p>この方法は多くの利点があります:</p>
<ul>
<li>エラーのペイロードが一般化されている</li>
<li>プロダクション環境と開発環境の間でエラーログの管理ができる。</li>
<li>エラーコードが一貫している。</li>
<li>JSONとHTMLなどのコンテンツネゴシエーションが処理されている。</li>
<li>APIの微調整が適切な１箇所のファイルを簡単に編集するだけでできる。</li>
</ul>
<h3>レスポンスメソッドとファイル</h3>
<p><code>/api/respons</code>フォルダに保存されたすべての<code>.js</code>スクリプトはコントローラ内で<code>res.[responseName]</code>の形式で呼び出すことで実行が出来ます。例えば<code>/api/responses/serverError.js</code>は<code>res.serverError(errors)</code>で呼び出すことが出来ます。リクエストとレスポンスはレスポンススクリプトの中ではt<code>his.req</code>と<code>this.res</code>で呼び出すことが出来ます。これにより任意のパラメータ（<code>serverError</code>の<code>errors</code>パラメータのように）を実際のレスポンスファンクションに引き渡すことが出来ます。</p>
<docmeta name="displayName" value="Custom Responses">