<div class="page features-page" ng-controller="FeaturesCtrl" >
  <a id="the-top"></a>
  <!-- White Upper Bar -->
  <div class="banner" id="target">
    <!-- <div class="banner-container"> -->
      <%- partial('partials/news-banner') %>

      <!-- Light Blue Section -->
      <div class="banner-container">
        <h1>少しでも、たくさんでも、お好きなだけ。</h1>
        <p class="sub-header">
          Sailsは<a target="_blank" href="https://github.com/expressjs">Express</a>上で動作する軽量フレームワークです。

          Sailsの織りなす小さなモジュールのアンサンブルは<em>シンプルさ</em>, <em>メンテナンス性</em>, と <em>構造的な慣習</em> をNode.jsアプリケーションにもたらすことが出来ます。
        </p>
        <img class="squiddy" alt="A cartoon squid holding multiple devices with the Sails.js logo on them and sitting next to a starfish" src="images/img_squiddy.png">
      </div> <!-- light blue section -->
  </div> <!-- banner -->

  <!-- Features Section -->
  <div class="features-section-container" scrollng>
    <!-- left-side navigation -->

  <div class="features-container">
    <div class="features-nav" ng-class="{'sticky': scrollTop>757}" ng-style="{left: scrollTop > 757 ? getOffsetLeft('.features-container') : 0}">
      <div>
        <h1>機能</h1>
        <ul>
          <li><a href="#?javascript" ng-click="intent.scrollToElement('#javascript')">100% Javascript</a></li>
          <li><a href="#?database" ng-click="intent.scrollToElement('#database')" du-smooth-scroll du-scrollspy offset="60">どんなデータベースでも</a></li>
          <li><a href="#?associations" ng-click="intent.scrollToElement('#associations')">強力なリレーション</a></li>
          <li><a href="#?rest" ng-click="intent.scrollToElement('#rest')">REST APIを自動生成</a></li>
          <li><a href="#?websocket" ng-click="intent.scrollToElement('#websocket')-support">簡単なWebSocketサポート</a></li>
          <li><a href="#?security" ng-click="intent.scrollToElement('#security')">再利用可能なセキュリティポリシー</a></li>
          <li><a href="#?front-end" ng-click="intent.scrollToElement('#front-end')">フロントエンドは何でも</a></li>
          <li><a href="#?asset-pipeline" ng-click="intent.scrollToElement('#asset-pipeline')">フレキシブルなアセットパイプライン</a></li>
          <li><a href="#?solid-foundation" ng-click="intent.scrollToElement('#solid-foundation')">堅牢な基礎技術</a></li>
        </ul>
      </div>
    </div> <!-- left side navigation -->


    <!-- right side features list -->
    <div class="feature-list" id="feature-content" style="position: relative;">
      <div>
        <ul>
          <li>
            <a name="#?javascript" id="javascript"></a>
            <div class="icon-container">
              <img class="icon javascript" src="images/icon_js_large.png"/>
            </div>
            <h5>100% JavaScript</h5>
            <p>多くのMVCフレームワークと同じようにSailsは慣習より設定の概念のもとにできています。しかし、Node.jsは更にそこから一歩踏み込みました。Sails上でアプリケーションを開発するということはアプリケーションが全JavaScriptによって書かれる、つまりは開発チームがすでにブラウザ上で使っている言語で書かれるということを意味します。これによりコンテキストの切り替えに掛かる時間を節約でき、より一貫性のあるスタイルでコードが書けますので開発がより楽しく、効率的になります。
            </p>
          </li>
          <li>
            <a name="#?database" id="database"></a>
            <div class="icon-container">
              <img class="icon database" src="images/icon_database_large.png"/>
            </div>
            <h5>どんなデータベースでも</h5>
            <p>SailsはWaterlineと呼ばれるパワフルなORMを組み込んでおり、
               データベースに依存しないシンプルなデータアクセスレイヤーを提供します。
               多くのコミュニティサポートのプロジェクトに加え、MySQL、MongoDB、PostgreSQL、Redisとローカルディスクの公式サポートがあります。
          </li>
          <li>
            <a name="#?associations" id="associations"></a>
            <div class="icon-container">
              <img class="icon optional-support" src="images/icon_associations_large.png"/>
            </div>
            <h5>強力なリレーション</h5>
            <p>Sailsはより実践的なデータモデルを実現する新しいリレーショナルモデルを採用しています。1対多や多対多のようなお馴染みのやり方は全て使えるということの他にモデルごとに複数の<em>名前がつけられた</em>アソシエーションを実現することが出来ます。（例えば「ケーキ」は複数の種類の人、「持っている人」と「食べる人」を持つでしょう。）さらに、別々のモデルを別々のデータベースに割り当てることが出来、さらにその上にアソシエーションとジョインを<strong>動作させる</strong>ことが(例えNoSQLとリレーショナルDB間でも)出来ます。SailsはMongoのコレクションなどとMySQLテープルの自動的かつ暗示的なジョインを全く問題なくを行うことが出来ます。</p>
          </li>
          <li>
            <div class="icon-container">
              <a name="#?rest" id="rest"></a>
              <img class="icon api" src="images/icon_api_large.png"/>
            </div>
            <h5>REST APIを自動生成</h5>
            <p>Sailsにはコードを書くことなくバックエンドを生成できる<em>blueprints</em>が搭載されています。<code>sails generate api dentist</code> と実行するだけで検索、ページネーション、ソート、フィルタ、作成、削除、アップデート、結合操作が出来りAPIを作成することが出来ます。これらの<em>blueprint actions</em>はSailsを同じ技術の下に構築されますのでWebsocketsや各種データベースと簡単に組み合わせて使うことが出来ます。</p>
          </li>
          <li>
            <a name="#?websocket" id="websocket"></a>
            <div class="icon-container">
              <img class="icon realtime" src="images/icon_websocket_large.png"/>
            </div>
            <h5>追加コード無しで簡単にWebSocketをサポート</h5>
            <p>かつてはリアルタイムの「commet」機能を使うためには別々のコードを利用することがありました。しかし、Sailsのリクエスト変換機能は受信したソケット通信を翻訳してくれ、Sailsアプリケーション上の任意のアクションに変換出来るほか、全てのExpressルートやミドルウエアに変換されることが出来ます。パラメータのノーマライゼーションやセッション、ストリーミングインタフェースは全て処理されます。これは別の言い方をすれば、あなたが書いたコードは特に何もせずともHTTPとWebSocketの<em>両方で</em>動くということなのです。</p>
          </li>
          <li>
            <a name="#?security" id="security"></a>
            <div class="icon-container">
              <img class="icon security" src="images/icon_security_large.png"/>
            </div>
            <h5>宣言的で再利用可能なセキュリティポリシー</h5>
            <p>Sailsは基本的なセキュリティとロールベースのアクセス制御をデフォルトのポリシーとして用意しています。この「ポリシー」はシンプルで再利用可能なミドルウエアであり、コントローラアクションの手前で実行されるものです。ポリシーを書くことで<a>カプセル化</a>を推進し、ビジネスロジックを劇的にシンプル化することで書かなければいけないコード量を減らせます。ポリシーはExpress/Connectのミドルウエアと交換可能であり、<a>Passport</a>のような人気のnpmモジュールを組み込むことが出来ます。そして、Sailsのその他多くの部分と同じようにポリシーは自動的にWebSocketsとHTTPの両方で動作します。</p>
          </li>

          <li>
            <a name="#?front-end" id="front-end"></a>
            <div class="icon-container">
              <img class="icon database" src="images/icon_frontend_large.png"/>
            </div>
            <h5>フロントエンドは何でも</h5>
            <p>一つのフレームワークや言語で全てを行うことは魅力的ではありますが常に現実的とは限りません。Sailsは全てのフロントエンド戦略に対応し、それがAngularでもBackboneでも、あるいはiOS/ObjCやAndroid/Java、Windows Phoneでも、まだ発明されていないその他のフレームワークでも構いません。さらに別々のWebサービスやコミュニティの開発者が同じAPIを利用するのも簡単です。
            </p>
          </li>

          <li>
            <a name="#?asset-pipeline" id="asset-pipeline"></a>
            <div class="icon-container">
              <img class="icon minification" src="images/icon_asset_large.png"/>
            </div>
            <h5>フレキシブルなアセットパイプライン</h5>
            <p>
              あなたがブラウザ向けのアプリケーションを開発しているのであればラッキーです。Sailsには<a>Grunt</a>が搭載されています。つまりフロントエンドアセットのワークフローが完全にカスタマイズ可能であり、現在世の中に出ている、全ての素晴らしいGruntモジュールをサポートしているということです。これにはLESS、SASS、Stylus、CoffeeScript、JST、 Jade、Handlebars、Dustなどたくさんのサポートが含まれます。デプロイの準備が出来た時には自動的にアセットの最小化やgzip圧縮ができます。さらにスタティックなアセットをコンパイルしたりCloudFrontのようなCDNにアップロードして読み込みをもっと早くすることも出来ます。
              <br/>
              <br/>Gulpがお望みですか。 <a target="_blank" href="https://github.com/PaulAvery">@PaulAvery</a>による<a target="_blank" href="https://github.com/PaulAvery/sails-generate-gulp-bower">コミュニティージェネレータ</a>をお試しください。
            </p>
          </li>
          <li>
            <a name="#?solid-foundation" id="solid-foundation"></a>
            <div class="icon-container">
              <img class="icon policies" src="images/icon_foundation_large.png"/>
            </div>
            <h5>堅牢な基礎技術</h5>
            <p>Sailsはとても早くてスケーラブルなJapascriptサーバサイドアプリケーションを開発できると人気のライトウエイトサーバサイド技術である<a href="http://nodejs.org">Node.js</a>の上に構築されています。SailsはHTTPのリクエストをハンドリングするのに<a>Express</a>を使い、WebSocketsの管理に<a>socket.io</a>をラップしています。そのためもしもあなたのアプリケーションに本当に低レベルへのアクセスが必要な場合、生のExpressやsocket.ioオブジェクトにアクセスすることが出来ます。もう一つの良い副作用としては既存のExpressのルートがSailsアプリケーションと完全にうまく共存するため、驚くほど迅速に既存のNodeアプリケーションをマイグレーション出来ます。</p>
          </li>
        </ul>
      </div>
    </div>
  </div> <!-- right side features content -->

  <%- partial('partials/next') %>

</div>
<div class="sails-footer-wrapper">
  <%- partial('partials/footer') %>
</div>
